
005_HAL_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ccc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08009e5c  08009e5c  00019e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec8  08009ec8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed0  08009ed0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000b40  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bc8  20000bc8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001502a  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038fa  00000000  00000000  00035125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a0  00000000  00000000  00038a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d66  00000000  00000000  00039bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025861  00000000  00000000  0003a926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017d87  00000000  00000000  00060187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d81a2  00000000  00000000  00077f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050dc  00000000  00000000  001500b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0015518c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e44 	.word	0x08009e44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009e44 	.word	0x08009e44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
uint32_t adc_Buffer[5];
uint32_t adc1_Value1=0, adc1_Value2=0, adc1_Value3=0, adc1_Value4=0, adc1_Value5=0 ;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_Delay(3000);
 8000574:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000578:	f000 fe46 	bl	8001208 <HAL_Delay>
	for(uint8_t i=0;i<7;i++)
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e009      	b.n	8000596 <HAL_ADC_ConvCpltCallback+0x2a>
	{
	adc1_Value1 += adc_Buffer[0];
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_ADC_ConvCpltCallback+0x44>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x48>)
 800058e:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<7;i++)
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	3301      	adds	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d9f2      	bls.n	8000582 <HAL_ADC_ConvCpltCallback+0x16>
	/* adc1_Value2 = adc_Buffer[1];
	adc1_Value3 = adc_Buffer[2];
	adc1_Value4 = adc_Buffer[3];
	adc1_Value5 = adc_Buffer[4]; */
	}
	  printf("Sum of values: %lu\n", adc1_Value1);
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x48>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005a4:	f008 fe84 	bl	80092b0 <iprintf>

}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200002a0 	.word	0x200002a0
 80005b4:	200002b4 	.word	0x200002b4
 80005b8:	08009e5c 	.word	0x08009e5c

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fdb0 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f81a 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9ea 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f9c0 	bl	8000950 <MX_DMA_Init>
  MX_I2C1_Init();
 80005d0:	f000 f95a 	bl	8000888 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d4:	f000 f986 	bl	80008e4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005d8:	f008 f9e2 	bl	80089a0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80005dc:	f000 f878 	bl	80006d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005e0:	f000 f900 	bl	80007e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_Buffer, sizeof(adc_Buffer));
 80005e4:	2214      	movs	r2, #20
 80005e6:	4903      	ldr	r1, [pc, #12]	; (80005f4 <main+0x38>)
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <main+0x3c>)
 80005ea:	f000 fe75 	bl	80012d8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ee:	f008 f9fd 	bl	80089ec <MX_USB_HOST_Process>
 80005f2:	e7fc      	b.n	80005ee <main+0x32>
 80005f4:	200002a0 	.word	0x200002a0
 80005f8:	200000a4 	.word	0x200000a4

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 fea5 	bl	800935a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fa82 	bl	8004b8c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 fa87 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2105      	movs	r1, #5
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fce3 	bl	800507c <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 fa70 	bl	8000ba0 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <MX_ADC1_Init+0x108>)
 80006e4:	4a3d      	ldr	r2, [pc, #244]	; (80007dc <MX_ADC1_Init+0x10c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <MX_ADC1_Init+0x108>)
 80006ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_ADC1_Init+0x108>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006f6:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <MX_ADC1_Init+0x108>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_ADC1_Init+0x108>)
 80006fe:	2201      	movs	r2, #1
 8000700:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000702:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_ADC1_Init+0x108>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <MX_ADC1_Init+0x108>)
 800070c:	2200      	movs	r2, #0
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000710:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_ADC1_Init+0x108>)
 8000712:	4a33      	ldr	r2, [pc, #204]	; (80007e0 <MX_ADC1_Init+0x110>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <MX_ADC1_Init+0x108>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800071c:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_ADC1_Init+0x108>)
 800071e:	2205      	movs	r2, #5
 8000720:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000722:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_ADC1_Init+0x108>)
 8000724:	2201      	movs	r2, #1
 8000726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_ADC1_Init+0x108>)
 800072c:	2201      	movs	r2, #1
 800072e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000730:	4829      	ldr	r0, [pc, #164]	; (80007d8 <MX_ADC1_Init+0x108>)
 8000732:	f000 fd8d 	bl	8001250 <HAL_ADC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800073c:	f000 fa30 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4821      	ldr	r0, [pc, #132]	; (80007d8 <MX_ADC1_Init+0x108>)
 8000752:	f000 fee5 	bl	8001520 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800075c:	f000 fa20 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000760:	2301      	movs	r3, #1
 8000762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	481a      	ldr	r0, [pc, #104]	; (80007d8 <MX_ADC1_Init+0x108>)
 800076e:	f000 fed7 	bl	8001520 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000778:	f000 fa12 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800077c:	2302      	movs	r3, #2
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000780:	2303      	movs	r3, #3
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_ADC1_Init+0x108>)
 800078a:	f000 fec9 	bl	8001520 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000794:	f000 fa04 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000798:	2303      	movs	r3, #3
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ADC1_Init+0x108>)
 80007a6:	f000 febb 	bl	8001520 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007b0:	f000 f9f6 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007b8:	2305      	movs	r3, #5
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_ADC1_Init+0x108>)
 80007c2:	f000 fead 	bl	8001520 <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80007cc:	f000 f9e8 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000a4 	.word	0x200000a4
 80007dc:	40012000 	.word	0x40012000
 80007e0:	0f000001 	.word	0x0f000001

080007e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_ADC2_Init+0x98>)
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <MX_ADC2_Init+0x9c>)
 80007fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ADC2_Init+0x98>)
 80007fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000802:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_ADC2_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ADC2_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ADC2_Init+0x98>)
 8000812:	2201      	movs	r2, #1
 8000814:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ADC2_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_ADC2_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_ADC2_Init+0x98>)
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_ADC2_Init+0xa0>)
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_ADC2_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_ADC2_Init+0x98>)
 8000832:	2201      	movs	r2, #1
 8000834:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_ADC2_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_ADC2_Init+0x98>)
 8000840:	2201      	movs	r2, #1
 8000842:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_ADC2_Init+0x98>)
 8000846:	f000 fd03 	bl	8001250 <HAL_ADC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 f9a6 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000854:	2302      	movs	r3, #2
 8000856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_ADC2_Init+0x98>)
 8000866:	f000 fe5b 	bl	8001520 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000870:	f000 f996 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000ec 	.word	0x200000ec
 8000880:	40012100 	.word	0x40012100
 8000884:	0f000001 	.word	0x0f000001

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f004 f81d 	bl	8004904 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f966 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200001f4 	.word	0x200001f4
 80008dc:	40005400 	.word	0x40005400
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_SPI1_Init+0x64>)
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_SPI1_Init+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI1_Init+0x64>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI1_Init+0x64>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI1_Init+0x64>)
 8000930:	220a      	movs	r2, #10
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_SPI1_Init+0x64>)
 8000936:	f004 fdad 	bl	8005494 <HAL_SPI_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000940:	f000 f92e 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000248 	.word	0x20000248
 800094c:	40013000 	.word	0x40013000

08000950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_DMA_Init+0x4c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <MX_DMA_Init+0x4c>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_DMA_Init+0x4c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2038      	movs	r0, #56	; 0x38
 8000978:	f001 f94d 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800097c:	2038      	movs	r0, #56	; 0x38
 800097e:	f001 f966 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	203a      	movs	r0, #58	; 0x3a
 8000988:	f001 f945 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800098c:	203a      	movs	r0, #58	; 0x3a
 800098e:	f001 f95e 	bl	8001c4e <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	4b74      	ldr	r3, [pc, #464]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a73      	ldr	r2, [pc, #460]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b71      	ldr	r3, [pc, #452]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	4b6d      	ldr	r3, [pc, #436]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b6a      	ldr	r3, [pc, #424]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b66      	ldr	r3, [pc, #408]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a65      	ldr	r2, [pc, #404]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b63      	ldr	r3, [pc, #396]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b5f      	ldr	r3, [pc, #380]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a5e      	ldr	r2, [pc, #376]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b58      	ldr	r3, [pc, #352]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a57      	ldr	r2, [pc, #348]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b55      	ldr	r3, [pc, #340]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b51      	ldr	r3, [pc, #324]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a50      	ldr	r2, [pc, #320]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b4e      	ldr	r3, [pc, #312]	; (8000b8c <MX_GPIO_Init+0x1ec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	484b      	ldr	r0, [pc, #300]	; (8000b90 <MX_GPIO_Init+0x1f0>)
 8000a64:	f001 fe1a 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4849      	ldr	r0, [pc, #292]	; (8000b94 <MX_GPIO_Init+0x1f4>)
 8000a6e:	f001 fe15 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a72:	2200      	movs	r2, #0
 8000a74:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a78:	4847      	ldr	r0, [pc, #284]	; (8000b98 <MX_GPIO_Init+0x1f8>)
 8000a7a:	f001 fe0f 	bl	800269c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	483e      	ldr	r0, [pc, #248]	; (8000b90 <MX_GPIO_Init+0x1f0>)
 8000a96:	f001 fc65 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4838      	ldr	r0, [pc, #224]	; (8000b94 <MX_GPIO_Init+0x1f4>)
 8000ab2:	f001 fc57 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4830      	ldr	r0, [pc, #192]	; (8000b94 <MX_GPIO_Init+0x1f4>)
 8000ad2:	f001 fc47 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	482c      	ldr	r0, [pc, #176]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000aea:	f001 fc3b 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b00:	2305      	movs	r3, #5
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4824      	ldr	r0, [pc, #144]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000b0c:	f001 fc2a 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b10:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b14:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_GPIO_Init+0x1f8>)
 8000b2a:	f001 fc1b 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b2e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b40:	2306      	movs	r3, #6
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_GPIO_Init+0x1f4>)
 8000b4c:	f001 fc0a 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b50:	2320      	movs	r3, #32
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_GPIO_Init+0x1f8>)
 8000b64:	f001 fbfe 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b6c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0x1f0>)
 8000b7e:	f001 fbf1 	bl	8002364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f001 f808 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a5e      	ldr	r2, [pc, #376]	; (8000d94 <HAL_ADC_MspInit+0x198>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d158      	bne.n	8000cd0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	4b5d      	ldr	r3, [pc, #372]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a5c      	ldr	r2, [pc, #368]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b5a      	ldr	r3, [pc, #360]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	4b56      	ldr	r3, [pc, #344]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a55      	ldr	r2, [pc, #340]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c56:	231f      	movs	r3, #31
 8000c58:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	484c      	ldr	r0, [pc, #304]	; (8000d9c <HAL_ADC_MspInit+0x1a0>)
 8000c6a:	f001 fb7b 	bl	8002364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c6e:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000c70:	4a4c      	ldr	r2, [pc, #304]	; (8000da4 <HAL_ADC_MspInit+0x1a8>)
 8000c72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c74:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000c98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c9e:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cac:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb2:	483b      	ldr	r0, [pc, #236]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000cb4:	f000 ffe6 	bl	8001c84 <HAL_DMA_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cbe:	f7ff ff6f 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc8:	4a35      	ldr	r2, [pc, #212]	; (8000da0 <HAL_ADC_MspInit+0x1a4>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cce:	e05d      	b.n	8000d8c <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a34      	ldr	r2, [pc, #208]	; (8000da8 <HAL_ADC_MspInit+0x1ac>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d158      	bne.n	8000d8c <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <HAL_ADC_MspInit+0x19c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d12:	2304      	movs	r3, #4
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <HAL_ADC_MspInit+0x1a0>)
 8000d26:	f001 fb1d 	bl	8002364 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d2c:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <HAL_ADC_MspInit+0x1b4>)
 8000d2e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d36:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d62:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d70:	480e      	ldr	r0, [pc, #56]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d72:	f000 ff87 	bl	8001c84 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8000d7c:	f7ff ff10 	bl	8000ba0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_ADC_MspInit+0x1b0>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40012000 	.word	0x40012000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	20000134 	.word	0x20000134
 8000da4:	40026410 	.word	0x40026410
 8000da8:	40012100 	.word	0x40012100
 8000dac:	20000194 	.word	0x20000194
 8000db0:	40026440 	.word	0x40026440

08000db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_I2C_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12c      	bne.n	8000e30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000df2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df8:	2312      	movs	r3, #18
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e04:	2304      	movs	r3, #4
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <HAL_I2C_MspInit+0x8c>)
 8000e10:	f001 faa8 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020400 	.word	0x40020400

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_SPI_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e9e:	23e0      	movs	r3, #224	; 0xe0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_SPI_MspInit+0x8c>)
 8000eba:	f001 fa53 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f952 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA2_Stream0_IRQHandler+0x10>)
 8000f2e:	f000 ffaf 	bl	8001e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000134 	.word	0x20000134

08000f3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <DMA2_Stream2_IRQHandler+0x10>)
 8000f42:	f000 ffa5 	bl	8001e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000194 	.word	0x20000194

08000f50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <OTG_FS_IRQHandler+0x10>)
 8000f56:	f001 fe9b 	bl	8002c90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000069c 	.word	0x2000069c

08000f64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
  }

  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
  }
  return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f008 f9d2 	bl	8009418 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20020000 	.word	0x20020000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200002b8 	.word	0x200002b8
 80010a8:	20000bc8 	.word	0x20000bc8

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010d4:	f7ff ffea 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f008 f991 	bl	8009424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fa5b 	bl	80005bc <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001114:	08009ed8 	.word	0x08009ed8
  ldr r2, =_sbss
 8001118:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800111c:	20000bc8 	.word	0x20000bc8

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 fd57 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fd28 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fd6f 	bl	8001c6a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 fd37 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	200002bc 	.word	0x200002bc

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200002bc 	.word	0x200002bc

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e033      	b.n	80012ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fcc4 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	d118      	bne.n	80012c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001296:	f023 0302 	bic.w	r3, r3, #2
 800129a:	f043 0202 	orr.w	r2, r3, #2
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa5e 	bl	8001764 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f023 0303 	bic.w	r3, r3, #3
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
 80012be:	e001      	b.n	80012c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Start_DMA+0x1e>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e0e9      	b.n	80014ca <HAL_ADC_Start_DMA+0x1f2>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	d018      	beq.n	800133e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_ADC_Start_DMA+0x1fc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a6d      	ldr	r2, [pc, #436]	; (80014d8 <HAL_ADC_Start_DMA+0x200>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9a      	lsrs	r2, r3, #18
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001330:	e002      	b.n	8001338 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	3b01      	subs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800134c:	d107      	bne.n	800135e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80a1 	bne.w	80014b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001398:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ac:	d106      	bne.n	80013bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f023 0206 	bic.w	r2, r3, #6
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
 80013ba:	e002      	b.n	80013c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <HAL_ADC_Start_DMA+0x204>)
 80013cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	4a43      	ldr	r2, [pc, #268]	; (80014e0 <HAL_ADC_Start_DMA+0x208>)
 80013d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <HAL_ADC_Start_DMA+0x20c>)
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	4a41      	ldr	r2, [pc, #260]	; (80014e8 <HAL_ADC_Start_DMA+0x210>)
 80013e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013fe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800140e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	334c      	adds	r3, #76	; 0x4c
 800141a:	4619      	mov	r1, r3
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f000 fcde 	bl	8001de0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2b00      	cmp	r3, #0
 800142e:	d12a      	bne.n	8001486 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2d      	ldr	r2, [pc, #180]	; (80014ec <HAL_ADC_Start_DMA+0x214>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d015      	beq.n	8001466 <HAL_ADC_Start_DMA+0x18e>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <HAL_ADC_Start_DMA+0x218>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d105      	bne.n	8001450 <HAL_ADC_Start_DMA+0x178>
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <HAL_ADC_Start_DMA+0x204>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00a      	beq.n	8001466 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a27      	ldr	r2, [pc, #156]	; (80014f4 <HAL_ADC_Start_DMA+0x21c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d136      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_ADC_Start_DMA+0x204>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d130      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d129      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	e020      	b.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_ADC_Start_DMA+0x214>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d11b      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d114      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	e00b      	b.n	80014c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f043 0210 	orr.w	r2, r3, #16
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	40012300 	.word	0x40012300
 80014e0:	0800195d 	.word	0x0800195d
 80014e4:	08001a17 	.word	0x08001a17
 80014e8:	08001a33 	.word	0x08001a33
 80014ec:	40012000 	.word	0x40012000
 80014f0:	40012100 	.word	0x40012100
 80014f4:	40012200 	.word	0x40012200

080014f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1c>
 8001538:	2302      	movs	r3, #2
 800153a:	e105      	b.n	8001748 <HAL_ADC_ConfigChannel+0x228>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b09      	cmp	r3, #9
 800154a:	d925      	bls.n	8001598 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68d9      	ldr	r1, [r3, #12]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3b1e      	subs	r3, #30
 8001562:	2207      	movs	r2, #7
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43da      	mvns	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	400a      	ands	r2, r1
 8001570:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68d9      	ldr	r1, [r3, #12]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	4603      	mov	r3, r0
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4403      	add	r3, r0
 800158a:	3b1e      	subs	r3, #30
 800158c:	409a      	lsls	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	e022      	b.n	80015de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6919      	ldr	r1, [r3, #16]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	2207      	movs	r2, #7
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	400a      	ands	r2, r1
 80015ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6919      	ldr	r1, [r3, #16]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4403      	add	r3, r0
 80015d4:	409a      	lsls	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d824      	bhi.n	8001630 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	3b05      	subs	r3, #5
 80015f8:	221f      	movs	r2, #31
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	3b05      	subs	r3, #5
 8001622:	fa00 f203 	lsl.w	r2, r0, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
 800162e:	e04c      	b.n	80016ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d824      	bhi.n	8001682 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b23      	subs	r3, #35	; 0x23
 800164a:	221f      	movs	r2, #31
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43da      	mvns	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	400a      	ands	r2, r1
 8001658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	4618      	mov	r0, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	3b23      	subs	r3, #35	; 0x23
 8001674:	fa00 f203 	lsl.w	r2, r0, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
 8001680:	e023      	b.n	80016ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	3b41      	subs	r3, #65	; 0x41
 8001694:	221f      	movs	r2, #31
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	400a      	ands	r2, r1
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	3b41      	subs	r3, #65	; 0x41
 80016be:	fa00 f203 	lsl.w	r2, r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_ADC_ConfigChannel+0x234>)
 80016cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a21      	ldr	r2, [pc, #132]	; (8001758 <HAL_ADC_ConfigChannel+0x238>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d109      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x1cc>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b12      	cmp	r3, #18
 80016de:	d105      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_ADC_ConfigChannel+0x238>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d123      	bne.n	800173e <HAL_ADC_ConfigChannel+0x21e>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d003      	beq.n	8001706 <HAL_ADC_ConfigChannel+0x1e6>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b11      	cmp	r3, #17
 8001704:	d11b      	bne.n	800173e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b10      	cmp	r3, #16
 8001718:	d111      	bne.n	800173e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_ADC_ConfigChannel+0x23c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <HAL_ADC_ConfigChannel+0x240>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9a      	lsrs	r2, r3, #18
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001730:	e002      	b.n	8001738 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3b01      	subs	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f9      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40012300 	.word	0x40012300
 8001758:	40012000 	.word	0x40012000
 800175c:	20000000 	.word	0x20000000
 8001760:	431bde83 	.word	0x431bde83

08001764 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176c:	4b79      	ldr	r3, [pc, #484]	; (8001954 <ADC_Init+0x1f0>)
 800176e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	431a      	orrs	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001798:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	021a      	lsls	r2, r3, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	4a58      	ldr	r2, [pc, #352]	; (8001958 <ADC_Init+0x1f4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d022      	beq.n	8001842 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800180a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6899      	ldr	r1, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800182c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6899      	ldr	r1, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	e00f      	b.n	8001862 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001850:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001860:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0202 	bic.w	r2, r2, #2
 8001870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7e1b      	ldrb	r3, [r3, #24]
 800187c:	005a      	lsls	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01b      	beq.n	80018c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800189e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6859      	ldr	r1, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	3b01      	subs	r3, #1
 80018bc:	035a      	lsls	r2, r3, #13
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	e007      	b.n	80018d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	051a      	lsls	r2, r3, #20
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800190c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6899      	ldr	r1, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191a:	025a      	lsls	r2, r3, #9
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6899      	ldr	r1, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	029a      	lsls	r2, r3, #10
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	609a      	str	r2, [r3, #8]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40012300 	.word	0x40012300
 8001958:	0f000001 	.word	0x0f000001

0800195c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001972:	2b00      	cmp	r3, #0
 8001974:	d13c      	bne.n	80019f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d12b      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d127      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d119      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0220 	bic.w	r2, r2, #32
 80019c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7fe fdbf 	bl	800056c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019ee:	e00e      	b.n	8001a0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fd85 	bl	800150c <HAL_ADC_ErrorCallback>
}
 8001a02:	e004      	b.n	8001a0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f7ff fd67 	bl	80014f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f043 0204 	orr.w	r2, r3, #4
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fd5a 	bl	800150c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff29 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff3e 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff31 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa2 	bl	8001bbc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff faae 	bl	80011f0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e099      	b.n	8001dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc0:	e00f      	b.n	8001ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc2:	f7ff fa95 	bl	80011f0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d908      	bls.n	8001ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e078      	b.n	8001dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e8      	bne.n	8001cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_DMA_Init+0x158>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d107      	bne.n	8001d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4313      	orrs	r3, r2
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f023 0307 	bic.w	r3, r3, #7
 8001d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d117      	bne.n	8001da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fa6f 	bl	800226c <DMA_CheckFifoParam>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001da2:	2301      	movs	r3, #1
 8001da4:	e016      	b.n	8001dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fa26 	bl	8002200 <DMA_CalcBaseAndBitshift>
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	223f      	movs	r2, #63	; 0x3f
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	f010803f 	.word	0xf010803f

08001de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_DMA_Start_IT+0x26>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e040      	b.n	8001e88 <HAL_DMA_Start_IT+0xa8>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12f      	bne.n	8001e7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f9b8 	bl	80021a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	223f      	movs	r2, #63	; 0x3f
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0216 	orr.w	r2, r2, #22
 8001e4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0208 	orr.w	r2, r2, #8
 8001e66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e005      	b.n	8001e86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e9c:	4b8e      	ldr	r3, [pc, #568]	; (80020d8 <HAL_DMA_IRQHandler+0x248>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a8e      	ldr	r2, [pc, #568]	; (80020dc <HAL_DMA_IRQHandler+0x24c>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0a9b      	lsrs	r3, r3, #10
 8001ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2208      	movs	r2, #8
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01a      	beq.n	8001efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	2208      	movs	r2, #8
 8001eea:	409a      	lsls	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2201      	movs	r2, #1
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	2204      	movs	r2, #4
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d012      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00b      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2204      	movs	r2, #4
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d043      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03c      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d018      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d108      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d024      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
 8001fbe:	e01f      	b.n	8002000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	e016      	b.n	8002000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0208 	bic.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2220      	movs	r2, #32
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 808f 	beq.w	8002130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8087 	beq.w	8002130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2220      	movs	r2, #32
 8002028:	409a      	lsls	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b05      	cmp	r3, #5
 8002038:	d136      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0216 	bic.w	r2, r2, #22
 8002048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_DMA_IRQHandler+0x1da>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0208 	bic.w	r2, r2, #8
 8002078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	223f      	movs	r2, #63	; 0x3f
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07e      	beq.n	800219c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
        }
        return;
 80020a6:	e079      	b.n	800219c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01d      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
 80020d4:	e02c      	b.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000
 80020dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d023      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e01e      	b.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10f      	bne.n	8002120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0210 	bic.w	r2, r2, #16
 800210e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	2b00      	cmp	r3, #0
 8002136:	d032      	beq.n	800219e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d022      	beq.n	800218a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2205      	movs	r2, #5
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	d307      	bcc.n	8002178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f2      	bne.n	800215c <HAL_DMA_IRQHandler+0x2cc>
 8002176:	e000      	b.n	800217a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e000      	b.n	800219e <HAL_DMA_IRQHandler+0x30e>
        return;
 800219c:	bf00      	nop
    }
  }
}
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d108      	bne.n	80021e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021e2:	e007      	b.n	80021f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3b10      	subs	r3, #16
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <DMA_CalcBaseAndBitshift+0x64>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <DMA_CalcBaseAndBitshift+0x68>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d909      	bls.n	8002242 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	; 0x58
 8002240:	e007      	b.n	8002252 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	aaaaaaab 	.word	0xaaaaaaab
 8002268:	08009e8c 	.word	0x08009e8c

0800226c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11f      	bne.n	80022c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d856      	bhi.n	800233a <DMA_CheckFifoParam+0xce>
 800228c:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <DMA_CheckFifoParam+0x28>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022b7 	.word	0x080022b7
 800229c:	080022a5 	.word	0x080022a5
 80022a0:	0800233b 	.word	0x0800233b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d046      	beq.n	800233e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e043      	b.n	800233e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022be:	d140      	bne.n	8002342 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c4:	e03d      	b.n	8002342 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	d121      	bne.n	8002314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d837      	bhi.n	8002346 <DMA_CheckFifoParam+0xda>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <DMA_CheckFifoParam+0x70>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022f3 	.word	0x080022f3
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002305 	.word	0x08002305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e030      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d025      	beq.n	800234a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002302:	e022      	b.n	800234a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800230c:	d11f      	bne.n	800234e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002312:	e01c      	b.n	800234e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d903      	bls.n	8002322 <DMA_CheckFifoParam+0xb6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002320:	e018      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      break;
 8002326:	e015      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00e      	beq.n	8002352 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e00b      	b.n	8002352 <DMA_CheckFifoParam+0xe6>
      break;
 800233a:	bf00      	nop
 800233c:	e00a      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
 8002340:	e008      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e006      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e004      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e002      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;   
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
    }
  } 
  
  return status; 
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e16b      	b.n	8002658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 815a 	bne.w	8002652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80b4 	beq.w	8002652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b60      	ldr	r3, [pc, #384]	; (8002670 <HAL_GPIO_Init+0x30c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <HAL_GPIO_Init+0x30c>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <HAL_GPIO_Init+0x30c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a5b      	ldr	r2, [pc, #364]	; (8002674 <HAL_GPIO_Init+0x310>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_GPIO_Init+0x314>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02b      	beq.n	800258a <HAL_GPIO_Init+0x226>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a51      	ldr	r2, [pc, #324]	; (800267c <HAL_GPIO_Init+0x318>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d025      	beq.n	8002586 <HAL_GPIO_Init+0x222>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a50      	ldr	r2, [pc, #320]	; (8002680 <HAL_GPIO_Init+0x31c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_Init+0x21e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <HAL_GPIO_Init+0x320>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x21a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4e      	ldr	r2, [pc, #312]	; (8002688 <HAL_GPIO_Init+0x324>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x216>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4d      	ldr	r2, [pc, #308]	; (800268c <HAL_GPIO_Init+0x328>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x212>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4c      	ldr	r2, [pc, #304]	; (8002690 <HAL_GPIO_Init+0x32c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x20e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x20a>
 800256a:	2307      	movs	r3, #7
 800256c:	e00e      	b.n	800258c <HAL_GPIO_Init+0x228>
 800256e:	2308      	movs	r3, #8
 8002570:	e00c      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002572:	2306      	movs	r3, #6
 8002574:	e00a      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002576:	2305      	movs	r3, #5
 8002578:	e008      	b.n	800258c <HAL_GPIO_Init+0x228>
 800257a:	2304      	movs	r3, #4
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x228>
 800257e:	2303      	movs	r3, #3
 8002580:	e004      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002582:	2302      	movs	r3, #2
 8002584:	e002      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x228>
 800258a:	2300      	movs	r3, #0
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	f002 0203 	and.w	r2, r2, #3
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4093      	lsls	r3, r2
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259c:	4935      	ldr	r1, [pc, #212]	; (8002674 <HAL_GPIO_Init+0x310>)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ce:	4a32      	ldr	r2, [pc, #200]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f8:	4a27      	ldr	r2, [pc, #156]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_GPIO_Init+0x334>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_GPIO_Init+0x334>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_GPIO_Init+0x334>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <HAL_GPIO_Init+0x334>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3301      	adds	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	f67f ae90 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40013800 	.word	0x40013800
 8002678:	40020000 	.word	0x40020000
 800267c:	40020400 	.word	0x40020400
 8002680:	40020800 	.word	0x40020800
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40021400 	.word	0x40021400
 8002690:	40021800 	.word	0x40021800
 8002694:	40021c00 	.word	0x40021c00
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b8:	e003      	b.n	80026c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	619a      	str	r2, [r3, #24]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af02      	add	r7, sp, #8
 80026d4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e059      	b.n	8002794 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f006 f9ae 	bl	8008a5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2203      	movs	r2, #3
 8002704:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270e:	d102      	bne.n	8002716 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 ffb8 	bl	8005690 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7c1a      	ldrb	r2, [r3, #16]
 8002728:	f88d 2000 	strb.w	r2, [sp]
 800272c:	3304      	adds	r3, #4
 800272e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002730:	f002 ff39 	bl	80055a6 <USB_CoreInit>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e026      	b.n	8002794 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f002 ffb0 	bl	80056b2 <USB_SetCurrentMode>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e017      	b.n	8002794 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7c1a      	ldrb	r2, [r3, #16]
 800276c:	f88d 2000 	strb.w	r2, [sp]
 8002770:	3304      	adds	r3, #4
 8002772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002774:	f003 f952 	bl	8005a1c <USB_HostInit>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e004      	b.n	8002794 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af04      	add	r7, sp, #16
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	70fb      	strb	r3, [r7, #3]
 80027ae:	460b      	mov	r3, r1
 80027b0:	70bb      	strb	r3, [r7, #2]
 80027b2:	4613      	mov	r3, r2
 80027b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80027b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80027b8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_HCD_HC_Init+0x2c>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e09d      	b.n	8002904 <HAL_HCD_HC_Init+0x168>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3319      	adds	r3, #25
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3314      	adds	r3, #20
 80027f4:	787a      	ldrb	r2, [r7, #1]
 80027f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3315      	adds	r3, #21
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3326      	adds	r3, #38	; 0x26
 800281c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	78bb      	ldrb	r3, [r7, #2]
 8002826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282a:	b2d8      	uxtb	r0, r3
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3316      	adds	r3, #22
 800283a:	4602      	mov	r2, r0
 800283c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fbc8 	bl	8002fd8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002848:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800284c:	2b00      	cmp	r3, #0
 800284e:	da0a      	bge.n	8002866 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3317      	adds	r3, #23
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e009      	b.n	800287a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3317      	adds	r3, #23
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fa30 	bl	8005ce4 <USB_GetHostSpeed>
 8002884:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002886:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d10b      	bne.n	80028a6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800288e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <HAL_HCD_HC_Init+0x10a>
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2bbc      	cmp	r3, #188	; 0xbc
 80028a0:	d901      	bls.n	80028a6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80028a2:	23bc      	movs	r3, #188	; 0xbc
 80028a4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3318      	adds	r3, #24
 80028b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80028ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	b298      	uxth	r0, r3
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3328      	adds	r3, #40	; 0x28
 80028d0:	4602      	mov	r2, r0
 80028d2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	787c      	ldrb	r4, [r7, #1]
 80028de:	78ba      	ldrb	r2, [r7, #2]
 80028e0:	78f9      	ldrb	r1, [r7, #3]
 80028e2:	9302      	str	r3, [sp, #8]
 80028e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4623      	mov	r3, r4
 80028f2:	f003 fa1f 	bl	8005d34 <USB_HC_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd90      	pop	{r4, r7, pc}

0800290c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_HCD_HC_Halt+0x1e>
 8002926:	2302      	movs	r3, #2
 8002928:	e00f      	b.n	800294a <HAL_HCD_HC_Halt+0x3e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fdb1 	bl	80064a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	70fb      	strb	r3, [r7, #3]
 8002966:	460b      	mov	r3, r1
 8002968:	70bb      	strb	r3, [r7, #2]
 800296a:	4613      	mov	r3, r2
 800296c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3317      	adds	r3, #23
 800297e:	78ba      	ldrb	r2, [r7, #2]
 8002980:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3326      	adds	r3, #38	; 0x26
 8002992:	787a      	ldrb	r2, [r7, #1]
 8002994:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002996:	7c3b      	ldrb	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d114      	bne.n	80029c6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	332a      	adds	r3, #42	; 0x2a
 80029ac:	2203      	movs	r2, #3
 80029ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3319      	adds	r3, #25
 80029c0:	7f3a      	ldrb	r2, [r7, #28]
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e009      	b.n	80029da <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	332a      	adds	r3, #42	; 0x2a
 80029d6:	2202      	movs	r2, #2
 80029d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80029da:	787b      	ldrb	r3, [r7, #1]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	f200 8102 	bhi.w	8002be6 <HAL_HCD_HC_SubmitRequest+0x292>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002bd1 	.word	0x08002bd1
 80029f0:	08002abd 	.word	0x08002abd
 80029f4:	08002b47 	.word	0x08002b47
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80029f8:	7c3b      	ldrb	r3, [r7, #16]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	f040 80f5 	bne.w	8002bea <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002a00:	78bb      	ldrb	r3, [r7, #2]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d12d      	bne.n	8002a62 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002a06:	8b3b      	ldrh	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	333d      	adds	r3, #61	; 0x3d
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	333d      	adds	r3, #61	; 0x3d
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	332a      	adds	r3, #42	; 0x2a
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002a4a:	e0ce      	b.n	8002bea <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	332a      	adds	r3, #42	; 0x2a
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	701a      	strb	r2, [r3, #0]
      break;
 8002a60:	e0c3      	b.n	8002bea <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	331a      	adds	r3, #26
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	f040 80b8 	bne.w	8002bea <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	333c      	adds	r3, #60	; 0x3c
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	332a      	adds	r3, #42	; 0x2a
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
      break;
 8002aa4:	e0a1      	b.n	8002bea <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	332a      	adds	r3, #42	; 0x2a
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	701a      	strb	r2, [r3, #0]
      break;
 8002aba:	e096      	b.n	8002bea <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002abc:	78bb      	ldrb	r3, [r7, #2]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d120      	bne.n	8002b04 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	333d      	adds	r3, #61	; 0x3d
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	332a      	adds	r3, #42	; 0x2a
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002aec:	e07e      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	332a      	adds	r3, #42	; 0x2a
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
      break;
 8002b02:	e073      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	333c      	adds	r3, #60	; 0x3c
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	332a      	adds	r3, #42	; 0x2a
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
      break;
 8002b2e:	e05d      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	332a      	adds	r3, #42	; 0x2a
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
      break;
 8002b44:	e052      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b46:	78bb      	ldrb	r3, [r7, #2]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d120      	bne.n	8002b8e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	333d      	adds	r3, #61	; 0x3d
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	332a      	adds	r3, #42	; 0x2a
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b76:	e039      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	332a      	adds	r3, #42	; 0x2a
 8002b88:	2202      	movs	r2, #2
 8002b8a:	701a      	strb	r2, [r3, #0]
      break;
 8002b8c:	e02e      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	333c      	adds	r3, #60	; 0x3c
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	332a      	adds	r3, #42	; 0x2a
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
      break;
 8002bb8:	e018      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	332a      	adds	r3, #42	; 0x2a
 8002bca:	2202      	movs	r2, #2
 8002bcc:	701a      	strb	r2, [r3, #0]
      break;
 8002bce:	e00d      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	332a      	adds	r3, #42	; 0x2a
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
      break;
 8002be4:	e002      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002be6:	bf00      	nop
 8002be8:	e000      	b.n	8002bec <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002bea:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	332c      	adds	r3, #44	; 0x2c
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	8b39      	ldrh	r1, [r7, #24]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4403      	add	r3, r0
 8002c10:	3334      	adds	r3, #52	; 0x34
 8002c12:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334c      	adds	r3, #76	; 0x4c
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3338      	adds	r3, #56	; 0x38
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3315      	adds	r3, #21
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334d      	adds	r3, #77	; 0x4d
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	3310      	adds	r3, #16
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	1d19      	adds	r1, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	799b      	ldrb	r3, [r3, #6]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f003 f984 	bl	8005f8c <USB_HC_StartXfer>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop

08002c90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fe79 	bl	800599e <USB_GetMode>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	f040 80fb 	bne.w	8002eaa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 fe3c 	bl	8005936 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80f1 	beq.w	8002ea8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fe33 	bl	8005936 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cda:	d104      	bne.n	8002ce6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ce4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 fe23 	bl	8005936 <USB_ReadInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cfa:	d104      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 fe13 	bl	8005936 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d1a:	d104      	bne.n	8002d26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fe03 	bl	8005936 <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d103      	bne.n	8002d42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fdf5 	bl	8005936 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d56:	d120      	bne.n	8002d9a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d60:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d113      	bne.n	8002d9a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d72:	2110      	movs	r1, #16
 8002d74:	6938      	ldr	r0, [r7, #16]
 8002d76:	f002 fce8 	bl	800574a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d7a:	6938      	ldr	r0, [r7, #16]
 8002d7c:	f002 fd17 	bl	80057ae <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7a5b      	ldrb	r3, [r3, #9]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d105      	bne.n	8002d94 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 ff08 	bl	8005ba4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f005 fedf 	bl	8008b58 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fdc9 	bl	8005936 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002daa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dae:	d102      	bne.n	8002db6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f001 fd33 	bl	800481c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 fdbb 	bl	8005936 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d106      	bne.n	8002dd8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f005 fea8 	bl	8008b20 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fdaa 	bl	8005936 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dec:	d139      	bne.n	8002e62 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fb44 	bl	8006480 <USB_HC_ReadInterrupt>
 8002df8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e025      	b.n	8002e4c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d018      	beq.n	8002e46 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2a:	d106      	bne.n	8002e3a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f905 	bl	8003042 <HCD_HC_IN_IRQHandler>
 8002e38:	e005      	b.n	8002e46 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 ff67 	bl	8003d14 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	795b      	ldrb	r3, [r3, #5]
 8002e50:	461a      	mov	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d3d3      	bcc.n	8002e00 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 fd65 	bl	8005936 <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d101      	bne.n	8002e7a <HAL_HCD_IRQHandler+0x1ea>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_HCD_IRQHandler+0x1ec>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d014      	beq.n	8002eaa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0210 	bic.w	r2, r2, #16
 8002e8e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f001 fbe4 	bl	800465e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0210 	orr.w	r2, r2, #16
 8002ea4:	619a      	str	r2, [r3, #24]
 8002ea6:	e000      	b.n	8002eaa <HAL_HCD_IRQHandler+0x21a>
      return;
 8002ea8:	bf00      	nop
    }
  }
}
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_HCD_Start+0x16>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e013      	b.n	8002eee <HAL_HCD_Start+0x3e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fecc 	bl	8005c72 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fbc5 	bl	800566e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_HCD_Stop+0x16>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e00d      	b.n	8002f28 <HAL_HCD_Stop+0x32>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fc1f 	bl	800675c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fe6e 	bl	8005c1e <USB_ResetPort>
 8002f42:	4603      	mov	r3, r0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	334c      	adds	r3, #76	; 0x4c
 8002f68:	781b      	ldrb	r3, [r3, #0]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3338      	adds	r3, #56	; 0x38
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 feb0 	bl	8005d12 <USB_GetCurrentFrame>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fe8b 	bl	8005ce4 <USB_GetHostSpeed>
 8002fce:	4603      	mov	r3, r0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	331a      	adds	r3, #26
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	331b      	adds	r3, #27
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3325      	adds	r3, #37	; 0x25
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	3324      	adds	r3, #36	; 0x24
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f002 fc7b 	bl	800595c <USB_ReadChInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d11a      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2304      	movs	r3, #4
 8003080:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	334d      	adds	r3, #77	; 0x4d
 8003092:	2207      	movs	r2, #7
 8003094:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 f9ff 	bl	80064a2 <USB_HC_Halt>
 80030a4:	e09e      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 fc54 	bl	800595c <USB_ReadChInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d11b      	bne.n	80030f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	461a      	mov	r2, r3
 80030ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334d      	adds	r3, #77	; 0x4d
 80030e4:	2208      	movs	r2, #8
 80030e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 f9d6 	bl	80064a2 <USB_HC_Halt>
 80030f6:	e075      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f002 fc2b 	bl	800595c <USB_ReadChInterrupts>
 8003106:	4603      	mov	r3, r0
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d11a      	bne.n	8003146 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	2308      	movs	r3, #8
 8003120:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	334d      	adds	r3, #77	; 0x4d
 8003132:	2206      	movs	r2, #6
 8003134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f003 f9af 	bl	80064a2 <USB_HC_Halt>
 8003144:	e04e      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fc04 	bl	800595c <USB_ReadChInterrupts>
 8003154:	4603      	mov	r3, r0
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d11b      	bne.n	8003198 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	461a      	mov	r2, r3
 800316e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003172:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	334d      	adds	r3, #77	; 0x4d
 8003184:	2209      	movs	r2, #9
 8003186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f003 f986 	bl	80064a2 <USB_HC_Halt>
 8003196:	e025      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 fbdb 	bl	800595c <USB_ReadChInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d119      	bne.n	80031e4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	334d      	adds	r3, #77	; 0x4d
 80031d2:	2207      	movs	r2, #7
 80031d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 f95f 	bl	80064a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fbb5 	bl	800595c <USB_ReadChInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d112      	bne.n	8003224 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f003 f94b 	bl	80064a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	f000 bd75 	b.w	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fb95 	bl	800595c <USB_ReadChInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 8128 	bne.w	800348e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	2320      	movs	r3, #32
 800324e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	331b      	adds	r3, #27
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d119      	bne.n	800329a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	331b      	adds	r3, #27
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	0151      	lsls	r1, r2, #5
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	440a      	add	r2, r1
 8003290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	799b      	ldrb	r3, [r3, #6]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01b      	beq.n	80032da <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3330      	adds	r3, #48	; 0x30
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	1ac9      	subs	r1, r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4403      	add	r3, r0
 80032d6:	3338      	adds	r3, #56	; 0x38
 80032d8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	334d      	adds	r3, #77	; 0x4d
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3344      	adds	r3, #68	; 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	461a      	mov	r2, r3
 8003310:	2301      	movs	r3, #1
 8003312:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3326      	adds	r3, #38	; 0x26
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3326      	adds	r3, #38	; 0x26
 800333a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800333c:	2b02      	cmp	r3, #2
 800333e:	d110      	bne.n	8003362 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f003 f8aa 	bl	80064a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	461a      	mov	r2, r3
 800335c:	2310      	movs	r3, #16
 800335e:	6093      	str	r3, [r2, #8]
 8003360:	e03d      	b.n	80033de <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3326      	adds	r3, #38	; 0x26
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d00a      	beq.n	800338e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3326      	adds	r3, #38	; 0x26
 8003388:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800338a:	2b01      	cmp	r3, #1
 800338c:	d127      	bne.n	80033de <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	0151      	lsls	r1, r2, #5
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	440a      	add	r2, r1
 80033a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033ac:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334c      	adds	r3, #76	; 0x4c
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	334c      	adds	r3, #76	; 0x4c
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f005 fbcb 	bl	8008b74 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	799b      	ldrb	r3, [r3, #6]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d13b      	bne.n	800345e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3338      	adds	r3, #56	; 0x38
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	3328      	adds	r3, #40	; 0x28
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	440b      	add	r3, r1
 800340c:	1e59      	subs	r1, r3, #1
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4403      	add	r3, r0
 800341c:	3328      	adds	r3, #40	; 0x28
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	fbb1 f3f3 	udiv	r3, r1, r3
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8470 	beq.w	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	333c      	adds	r3, #60	; 0x3c
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2d8      	uxtb	r0, r3
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	333c      	adds	r3, #60	; 0x3c
 8003456:	4602      	mov	r2, r0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	f000 bc58 	b.w	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	333c      	adds	r3, #60	; 0x3c
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	f083 0301 	eor.w	r3, r3, #1
 8003476:	b2d8      	uxtb	r0, r3
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	333c      	adds	r3, #60	; 0x3c
 8003486:	4602      	mov	r2, r0
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	f000 bc40 	b.w	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f002 fa60 	bl	800595c <USB_ReadChInterrupts>
 800349c:	4603      	mov	r3, r0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d131      	bne.n	800350a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b2:	461a      	mov	r2, r3
 80034b4:	2320      	movs	r3, #32
 80034b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	331a      	adds	r3, #26
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	f040 841f 	bne.w	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	331b      	adds	r3, #27
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	334d      	adds	r3, #77	; 0x4d
 80034f4:	2203      	movs	r2, #3
 80034f6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f002 ffce 	bl	80064a2 <USB_HC_Halt>
 8003506:	f000 bc02 	b.w	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fa22 	bl	800595c <USB_ReadChInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	f040 8305 	bne.w	8003b2e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	2302      	movs	r3, #2
 8003534:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	334d      	adds	r3, #77	; 0x4d
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d114      	bne.n	8003576 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	334d      	adds	r3, #77	; 0x4d
 800355c:	2202      	movs	r2, #2
 800355e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	334c      	adds	r3, #76	; 0x4c
 8003570:	2201      	movs	r2, #1
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e2cc      	b.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	334d      	adds	r3, #77	; 0x4d
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d114      	bne.n	80035b6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	; 0x4d
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	334c      	adds	r3, #76	; 0x4c
 80035b0:	2205      	movs	r2, #5
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	e2ac      	b.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	334d      	adds	r3, #77	; 0x4d
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	d00b      	beq.n	80035e4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	334d      	adds	r3, #77	; 0x4d
 80035dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035de:	2b09      	cmp	r3, #9
 80035e0:	f040 80a6 	bne.w	8003730 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334d      	adds	r3, #77	; 0x4d
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3344      	adds	r3, #68	; 0x44
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1c59      	adds	r1, r3, #1
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4403      	add	r3, r0
 8003618:	3344      	adds	r3, #68	; 0x44
 800361a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3344      	adds	r3, #68	; 0x44
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d943      	bls.n	80036ba <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3344      	adds	r3, #68	; 0x44
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	331a      	adds	r3, #26
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d123      	bne.n	80036a4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	331b      	adds	r3, #27
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	331c      	adds	r3, #28
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	0151      	lsls	r1, r2, #5
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	440a      	add	r2, r1
 800369a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800369e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334c      	adds	r3, #76	; 0x4c
 80036b4:	2204      	movs	r2, #4
 80036b6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036b8:	e229      	b.n	8003b0e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	334c      	adds	r3, #76	; 0x4c
 80036ca:	2202      	movs	r2, #2
 80036cc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3326      	adds	r3, #38	; 0x26
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3326      	adds	r3, #38	; 0x26
 80036f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	f040 8209 	bne.w	8003b0e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003712:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800371a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800372e:	e1ee      	b.n	8003b0e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	334d      	adds	r3, #77	; 0x4d
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b05      	cmp	r3, #5
 8003744:	f040 80c8 	bne.w	80038d8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334d      	adds	r3, #77	; 0x4d
 8003758:	2202      	movs	r2, #2
 800375a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	331b      	adds	r3, #27
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b01      	cmp	r3, #1
 8003770:	f040 81ce 	bne.w	8003b10 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3326      	adds	r3, #38	; 0x26
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d16b      	bne.n	8003862 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3348      	adds	r3, #72	; 0x48
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	1c59      	adds	r1, r3, #1
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4403      	add	r3, r0
 80037aa:	3348      	adds	r3, #72	; 0x48
 80037ac:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3348      	adds	r3, #72	; 0x48
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d943      	bls.n	800384c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3348      	adds	r3, #72	; 0x48
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	331b      	adds	r3, #27
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3344      	adds	r3, #68	; 0x44
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d809      	bhi.n	8003816 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	331c      	adds	r3, #28
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	440a      	add	r2, r1
 800382c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003834:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	334c      	adds	r3, #76	; 0x4c
 8003846:	2204      	movs	r2, #4
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e014      	b.n	8003876 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	334c      	adds	r3, #76	; 0x4c
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e009      	b.n	8003876 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	334c      	adds	r3, #76	; 0x4c
 8003872:	2202      	movs	r2, #2
 8003874:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3326      	adds	r3, #38	; 0x26
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	3326      	adds	r3, #38	; 0x26
 800389c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800389e:	2b02      	cmp	r3, #2
 80038a0:	f040 8136 	bne.w	8003b10 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e11b      	b.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	334d      	adds	r3, #77	; 0x4d
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	f040 8081 	bne.w	80039f2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	334d      	adds	r3, #77	; 0x4d
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	331b      	adds	r3, #27
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	f040 80fa 	bne.w	8003b10 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	334c      	adds	r3, #76	; 0x4c
 800392c:	2202      	movs	r2, #2
 800392e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	440a      	add	r2, r1
 8003946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800394a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	440a      	add	r2, r1
 8003966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800396a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	440a      	add	r2, r1
 8003986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398a:	f023 0320 	bic.w	r3, r3, #32
 800398e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3326      	adds	r3, #38	; 0x26
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3326      	adds	r3, #38	; 0x26
 80039b6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	f040 80a9 	bne.w	8003b10 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e08e      	b.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334d      	adds	r3, #77	; 0x4d
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d143      	bne.n	8003a90 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	334d      	adds	r3, #77	; 0x4d
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	334c      	adds	r3, #76	; 0x4c
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3326      	adds	r3, #38	; 0x26
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3326      	adds	r3, #38	; 0x26
 8003a56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d159      	bne.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e03f      	b.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	334d      	adds	r3, #77	; 0x4d
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d126      	bne.n	8003af4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334d      	adds	r3, #77	; 0x4d
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3344      	adds	r3, #68	; 0x44
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4403      	add	r3, r0
 8003ada:	3344      	adds	r3, #68	; 0x44
 8003adc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	334c      	adds	r3, #76	; 0x4c
 8003aee:	2204      	movs	r2, #4
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e00d      	b.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	; 0x4d
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	f000 8100 	beq.w	8003d0c <HCD_HC_IN_IRQHandler+0xcca>
 8003b0c:	e000      	b.n	8003b10 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b0e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334c      	adds	r3, #76	; 0x4c
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f005 f824 	bl	8008b74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b2c:	e0ef      	b.n	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 ff10 	bl	800595c <USB_ReadChInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d12f      	bne.n	8003ba6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	461a      	mov	r2, r3
 8003b54:	2340      	movs	r3, #64	; 0x40
 8003b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	334d      	adds	r3, #77	; 0x4d
 8003b68:	2205      	movs	r2, #5
 8003b6a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	331a      	adds	r3, #26
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3344      	adds	r3, #68	; 0x44
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 fc7f 	bl	80064a2 <USB_HC_Halt>
 8003ba4:	e0b3      	b.n	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fed4 	bl	800595c <USB_ReadChInterrupts>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	f040 80a7 	bne.w	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3326      	adds	r3, #38	; 0x26
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d11b      	bne.n	8003c0e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	3344      	adds	r3, #68	; 0x44
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	; 0x4d
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 fc4b 	bl	80064a2 <USB_HC_Halt>
 8003c0c:	e03f      	b.n	8003c8e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3326      	adds	r3, #38	; 0x26
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	3326      	adds	r3, #38	; 0x26
 8003c34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d129      	bne.n	8003c8e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3344      	adds	r3, #68	; 0x44
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	799b      	ldrb	r3, [r3, #6]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HCD_HC_IN_IRQHandler+0xc2a>
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	331b      	adds	r3, #27
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d110      	bne.n	8003c8e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334d      	adds	r3, #77	; 0x4d
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f002 fc0a 	bl	80064a2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	331b      	adds	r3, #27
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d129      	bne.n	8003cf8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	331b      	adds	r3, #27
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	0151      	lsls	r1, r2, #5
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	440a      	add	r2, r1
 8003cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf2:	f043 0320 	orr.w	r3, r3, #32
 8003cf6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	461a      	mov	r2, r3
 8003d06:	2310      	movs	r3, #16
 8003d08:	6093      	str	r3, [r2, #8]
 8003d0a:	e000      	b.n	8003d0e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003d0c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fe12 	bl	800595c <USB_ReadChInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d11b      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2304      	movs	r3, #4
 8003d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	334d      	adds	r3, #77	; 0x4d
 8003d64:	2207      	movs	r2, #7
 8003d66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f002 fb96 	bl	80064a2 <USB_HC_Halt>
 8003d76:	f000 bc6f 	b.w	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 fdea 	bl	800595c <USB_ReadChInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	f040 8082 	bne.w	8003e98 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	461a      	mov	r2, r3
 8003da2:	2320      	movs	r3, #32
 8003da4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	3319      	adds	r3, #25
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d124      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3319      	adds	r3, #25
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	334c      	adds	r3, #76	; 0x4c
 8003de0:	2202      	movs	r2, #2
 8003de2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	334d      	adds	r3, #77	; 0x4d
 8003df4:	2203      	movs	r2, #3
 8003df6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f002 fb4e 	bl	80064a2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	331a      	adds	r3, #26
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 841d 	bne.w	8004658 <HCD_HC_OUT_IRQHandler+0x944>
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	331b      	adds	r3, #27
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 8411 	bne.w	8004658 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	3326      	adds	r3, #38	; 0x26
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d009      	beq.n	8003e60 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	331b      	adds	r3, #27
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	334d      	adds	r3, #77	; 0x4d
 8003e70:	2203      	movs	r2, #3
 8003e72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fb10 	bl	80064a2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3344      	adds	r3, #68	; 0x44
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e3df      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 fd5b 	bl	800595c <USB_ReadChInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb0:	d111      	bne.n	8003ed6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ec4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f002 fae7 	bl	80064a2 <USB_HC_Halt>
 8003ed4:	e3c0      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fd3c 	bl	800595c <USB_ReadChInterrupts>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d168      	bne.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3344      	adds	r3, #68	; 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 fd26 	bl	800595c <USB_ReadChInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d112      	bne.n	8003f40 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	3319      	adds	r3, #25
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2340      	movs	r3, #64	; 0x40
 8003f3e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	331b      	adds	r3, #27
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d019      	beq.n	8003f8a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	331b      	adds	r3, #27
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f88:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	461a      	mov	r2, r3
 8003f98:	2301      	movs	r3, #1
 8003f9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334d      	adds	r3, #77	; 0x4d
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 fa72 	bl	80064a2 <USB_HC_Halt>
 8003fbe:	e34b      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fcc7 	bl	800595c <USB_ReadChInterrupts>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d139      	bne.n	800404c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	334d      	adds	r3, #77	; 0x4d
 8003fe8:	2205      	movs	r2, #5
 8003fea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	331a      	adds	r3, #26
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	3319      	adds	r3, #25
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3344      	adds	r3, #68	; 0x44
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f002 fa35 	bl	80064a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4413      	add	r3, r2
 8004040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004044:	461a      	mov	r2, r3
 8004046:	2340      	movs	r3, #64	; 0x40
 8004048:	6093      	str	r3, [r2, #8]
 800404a:	e305      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fc81 	bl	800595c <USB_ReadChInterrupts>
 800405a:	4603      	mov	r3, r0
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d11a      	bne.n	800409a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	2308      	movs	r3, #8
 8004074:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	334d      	adds	r3, #77	; 0x4d
 8004086:	2206      	movs	r2, #6
 8004088:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f002 fa05 	bl	80064a2 <USB_HC_Halt>
 8004098:	e2de      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fc5a 	bl	800595c <USB_ReadChInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d144      	bne.n	800413c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	3344      	adds	r3, #68	; 0x44
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334d      	adds	r3, #77	; 0x4d
 80040d6:	2204      	movs	r2, #4
 80040d8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3319      	adds	r3, #25
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d114      	bne.n	800411a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	3318      	adds	r3, #24
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3319      	adds	r3, #25
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f002 f9bd 	bl	80064a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004134:	461a      	mov	r2, r3
 8004136:	2310      	movs	r3, #16
 8004138:	6093      	str	r3, [r2, #8]
 800413a:	e28d      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fc09 	bl	800595c <USB_ReadChInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d169      	bne.n	8004228 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	799b      	ldrb	r3, [r3, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d111      	bne.n	8004180 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	334d      	adds	r3, #77	; 0x4d
 800416c:	2207      	movs	r2, #7
 800416e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f002 f992 	bl	80064a2 <USB_HC_Halt>
 800417e:	e049      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3344      	adds	r3, #68	; 0x44
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4403      	add	r3, r0
 80041a0:	3344      	adds	r3, #68	; 0x44
 80041a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3344      	adds	r3, #68	; 0x44
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d922      	bls.n	8004200 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3344      	adds	r3, #68	; 0x44
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	334c      	adds	r3, #76	; 0x4c
 80041de:	2204      	movs	r2, #4
 80041e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	334c      	adds	r3, #76	; 0x4c
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f004 fcbb 	bl	8008b74 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041fe:	e009      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	334c      	adds	r3, #76	; 0x4c
 8004210:	2202      	movs	r2, #2
 8004212:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	461a      	mov	r2, r3
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	e217      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fb93 	bl	800595c <USB_ReadChInterrupts>
 8004236:	4603      	mov	r3, r0
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004240:	d11b      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	334d      	adds	r3, #77	; 0x4d
 8004252:	2209      	movs	r2, #9
 8004254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f002 f91f 	bl	80064a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004276:	6093      	str	r3, [r2, #8]
 8004278:	e1ee      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fb6a 	bl	800595c <USB_ReadChInterrupts>
 8004288:	4603      	mov	r3, r0
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	f040 81df 	bne.w	8004652 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	461a      	mov	r2, r3
 80042a2:	2302      	movs	r3, #2
 80042a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	334d      	adds	r3, #77	; 0x4d
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 8093 	bne.w	80043e4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334d      	adds	r3, #77	; 0x4d
 80042ce:	2202      	movs	r2, #2
 80042d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	334c      	adds	r3, #76	; 0x4c
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3326      	adds	r3, #38	; 0x26
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d00b      	beq.n	8004314 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3326      	adds	r3, #38	; 0x26
 800430c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800430e:	2b03      	cmp	r3, #3
 8004310:	f040 8190 	bne.w	8004634 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	799b      	ldrb	r3, [r3, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	333d      	adds	r3, #61	; 0x3d
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	f083 0301 	eor.w	r3, r3, #1
 8004334:	b2d8      	uxtb	r0, r3
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	333d      	adds	r3, #61	; 0x3d
 8004344:	4602      	mov	r2, r0
 8004346:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	799b      	ldrb	r3, [r3, #6]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 8171 	bne.w	8004634 <HCD_HC_OUT_IRQHandler+0x920>
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	3334      	adds	r3, #52	; 0x34
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8165 	beq.w	8004634 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	3334      	adds	r3, #52	; 0x34
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4403      	add	r3, r0
 800438a:	3328      	adds	r3, #40	; 0x28
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	440b      	add	r3, r1
 8004390:	1e59      	subs	r1, r3, #1
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4403      	add	r3, r0
 80043a0:	3328      	adds	r3, #40	; 0x28
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 813f 	beq.w	8004634 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	333d      	adds	r3, #61	; 0x3d
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	f083 0301 	eor.w	r3, r3, #1
 80043ce:	b2d8      	uxtb	r0, r3
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	333d      	adds	r3, #61	; 0x3d
 80043de:	4602      	mov	r2, r0
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e127      	b.n	8004634 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	334d      	adds	r3, #77	; 0x4d
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d120      	bne.n	800443c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	334d      	adds	r3, #77	; 0x4d
 800440a:	2202      	movs	r2, #2
 800440c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	331b      	adds	r3, #27
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	f040 8107 	bne.w	8004634 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	334c      	adds	r3, #76	; 0x4c
 8004436:	2202      	movs	r2, #2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e0fb      	b.n	8004634 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	334d      	adds	r3, #77	; 0x4d
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d13a      	bne.n	80044c8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	334d      	adds	r3, #77	; 0x4d
 8004462:	2202      	movs	r2, #2
 8004464:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	334c      	adds	r3, #76	; 0x4c
 8004476:	2202      	movs	r2, #2
 8004478:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	331b      	adds	r3, #27
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	f040 80d1 	bne.w	8004634 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	331b      	adds	r3, #27
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c4:	6053      	str	r3, [r2, #4]
 80044c6:	e0b5      	b.n	8004634 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	334d      	adds	r3, #77	; 0x4d
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d114      	bne.n	8004508 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	334d      	adds	r3, #77	; 0x4d
 80044ee:	2202      	movs	r2, #2
 80044f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	334c      	adds	r3, #76	; 0x4c
 8004502:	2202      	movs	r2, #2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e095      	b.n	8004634 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	334d      	adds	r3, #77	; 0x4d
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b06      	cmp	r3, #6
 800451c:	d114      	bne.n	8004548 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	334d      	adds	r3, #77	; 0x4d
 800452e:	2202      	movs	r2, #2
 8004530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334c      	adds	r3, #76	; 0x4c
 8004542:	2205      	movs	r2, #5
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	e075      	b.n	8004634 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	334d      	adds	r3, #77	; 0x4d
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b07      	cmp	r3, #7
 800455c:	d00a      	beq.n	8004574 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	334d      	adds	r3, #77	; 0x4d
 800456e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004570:	2b09      	cmp	r3, #9
 8004572:	d170      	bne.n	8004656 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	334d      	adds	r3, #77	; 0x4d
 8004584:	2202      	movs	r2, #2
 8004586:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3344      	adds	r3, #68	; 0x44
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	1c59      	adds	r1, r3, #1
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4403      	add	r3, r0
 80045a8:	3344      	adds	r3, #68	; 0x44
 80045aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3344      	adds	r3, #68	; 0x44
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d914      	bls.n	80045ec <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	3344      	adds	r3, #68	; 0x44
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	334c      	adds	r3, #76	; 0x4c
 80045e6:	2204      	movs	r2, #4
 80045e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045ea:	e022      	b.n	8004632 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	334c      	adds	r3, #76	; 0x4c
 80045fc:	2202      	movs	r2, #2
 80045fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004616:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800461e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462c:	461a      	mov	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004632:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	334c      	adds	r3, #76	; 0x4c
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f004 fa92 	bl	8008b74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004650:	e002      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004656:	bf00      	nop
  }
}
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b08a      	sub	sp, #40	; 0x28
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	0c5b      	lsrs	r3, r3, #17
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004692:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d004      	beq.n	80046a4 <HCD_RXQLVL_IRQHandler+0x46>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b05      	cmp	r3, #5
 800469e:	f000 80b6 	beq.w	800480e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046a2:	e0b7      	b.n	8004814 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80b3 	beq.w	8004812 <HCD_RXQLVL_IRQHandler+0x1b4>
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	332c      	adds	r3, #44	; 0x2c
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80a7 	beq.w	8004812 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4613      	mov	r3, r2
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	3338      	adds	r3, #56	; 0x38
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	18d1      	adds	r1, r2, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4403      	add	r3, r0
 80046e8:	3334      	adds	r3, #52	; 0x34
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4299      	cmp	r1, r3
 80046ee:	f200 8083 	bhi.w	80047f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	332c      	adds	r3, #44	; 0x2c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	b292      	uxth	r2, r2
 800470c:	4619      	mov	r1, r3
 800470e:	f001 f8ba 	bl	8005886 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	332c      	adds	r3, #44	; 0x2c
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	18d1      	adds	r1, r2, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4403      	add	r3, r0
 8004736:	332c      	adds	r3, #44	; 0x2c
 8004738:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4613      	mov	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3338      	adds	r3, #56	; 0x38
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	18d1      	adds	r1, r2, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4403      	add	r3, r0
 800475e:	3338      	adds	r3, #56	; 0x38
 8004760:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	0cdb      	lsrs	r3, r3, #19
 8004772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004776:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3328      	adds	r3, #40	; 0x28
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4293      	cmp	r3, r2
 8004790:	d13f      	bne.n	8004812 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03c      	beq.n	8004812 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	333c      	adds	r3, #60	; 0x3c
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	f083 0301 	eor.w	r3, r3, #1
 80047e0:	b2d8      	uxtb	r0, r3
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	333c      	adds	r3, #60	; 0x3c
 80047f2:	4602      	mov	r2, r0
 80047f4:	701a      	strb	r2, [r3, #0]
      break;
 80047f6:	e00c      	b.n	8004812 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	334c      	adds	r3, #76	; 0x4c
 8004808:	2204      	movs	r2, #4
 800480a:	701a      	strb	r2, [r3, #0]
      break;
 800480c:	e001      	b.n	8004812 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004812:	bf00      	nop
  }
}
 8004814:	bf00      	nop
 8004816:	3728      	adds	r7, #40	; 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004848:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d10b      	bne.n	800486c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f004 f96c 	bl	8008b3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f043 0302 	orr.w	r3, r3, #2
 800486a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b08      	cmp	r3, #8
 8004874:	d132      	bne.n	80048dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f043 0308 	orr.w	r3, r3, #8
 800487c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d126      	bne.n	80048d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	7a5b      	ldrb	r3, [r3, #9]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d113      	bne.n	80048b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800489a:	d106      	bne.n	80048aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 f97e 	bl	8005ba4 <USB_InitFSLSPClkSel>
 80048a8:	e011      	b.n	80048ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 f977 	bl	8005ba4 <USB_InitFSLSPClkSel>
 80048b6:	e00a      	b.n	80048ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	79db      	ldrb	r3, [r3, #7]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d106      	bne.n	80048ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c6:	461a      	mov	r2, r3
 80048c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80048cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f004 f95e 	bl	8008b90 <HAL_HCD_PortEnabled_Callback>
 80048d4:	e002      	b.n	80048dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f004 f968 	bl	8008bac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d103      	bne.n	80048ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f043 0320 	orr.w	r3, r3, #32
 80048ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048f4:	461a      	mov	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e12b      	b.n	8004b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fa42 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004968:	f000 fd80 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 800496c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a81      	ldr	r2, [pc, #516]	; (8004b78 <HAL_I2C_Init+0x274>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d807      	bhi.n	8004988 <HAL_I2C_Init+0x84>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a80      	ldr	r2, [pc, #512]	; (8004b7c <HAL_I2C_Init+0x278>)
 800497c:	4293      	cmp	r3, r2
 800497e:	bf94      	ite	ls
 8004980:	2301      	movls	r3, #1
 8004982:	2300      	movhi	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e006      	b.n	8004996 <HAL_I2C_Init+0x92>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a7d      	ldr	r2, [pc, #500]	; (8004b80 <HAL_I2C_Init+0x27c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	bf94      	ite	ls
 8004990:	2301      	movls	r3, #1
 8004992:	2300      	movhi	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0e7      	b.n	8004b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a78      	ldr	r2, [pc, #480]	; (8004b84 <HAL_I2C_Init+0x280>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	0c9b      	lsrs	r3, r3, #18
 80049a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a6a      	ldr	r2, [pc, #424]	; (8004b78 <HAL_I2C_Init+0x274>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d802      	bhi.n	80049d8 <HAL_I2C_Init+0xd4>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	3301      	adds	r3, #1
 80049d6:	e009      	b.n	80049ec <HAL_I2C_Init+0xe8>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	4a69      	ldr	r2, [pc, #420]	; (8004b88 <HAL_I2C_Init+0x284>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	3301      	adds	r3, #1
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	495c      	ldr	r1, [pc, #368]	; (8004b78 <HAL_I2C_Init+0x274>)
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	d819      	bhi.n	8004a40 <HAL_I2C_Init+0x13c>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e59      	subs	r1, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a20:	400b      	ands	r3, r1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_I2C_Init+0x138>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1e59      	subs	r1, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a34:	3301      	adds	r3, #1
 8004a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3a:	e051      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	e04f      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d111      	bne.n	8004a6c <HAL_I2C_Init+0x168>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e58      	subs	r0, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	440b      	add	r3, r1
 8004a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	e012      	b.n	8004a92 <HAL_I2C_Init+0x18e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1e58      	subs	r0, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	0099      	lsls	r1, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a82:	3301      	adds	r3, #1
 8004a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Init+0x196>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e022      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_I2C_Init+0x1bc>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1e58      	subs	r0, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	440b      	add	r3, r1
 8004ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abe:	e00f      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1e58      	subs	r0, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	0099      	lsls	r1, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	6809      	ldr	r1, [r1, #0]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6911      	ldr	r1, [r2, #16]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68d2      	ldr	r2, [r2, #12]
 8004b1a:	4311      	orrs	r1, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	000186a0 	.word	0x000186a0
 8004b7c:	001e847f 	.word	0x001e847f
 8004b80:	003d08ff 	.word	0x003d08ff
 8004b84:	431bde83 	.word	0x431bde83
 8004b88:	10624dd3 	.word	0x10624dd3

08004b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e267      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d075      	beq.n	8004c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004baa:	4b88      	ldr	r3, [pc, #544]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb6:	4b85      	ldr	r3, [pc, #532]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d112      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc2:	4b82      	ldr	r3, [pc, #520]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bce:	d10b      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	4b7e      	ldr	r3, [pc, #504]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05b      	beq.n	8004c94 <HAL_RCC_OscConfig+0x108>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d157      	bne.n	8004c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e242      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x74>
 8004bf2:	4b76      	ldr	r3, [pc, #472]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a75      	ldr	r2, [pc, #468]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e01d      	b.n	8004c3c <HAL_RCC_OscConfig+0xb0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x98>
 8004c0a:	4b70      	ldr	r3, [pc, #448]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6f      	ldr	r2, [pc, #444]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	4b6d      	ldr	r3, [pc, #436]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a6c      	ldr	r2, [pc, #432]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e00b      	b.n	8004c3c <HAL_RCC_OscConfig+0xb0>
 8004c24:	4b69      	ldr	r3, [pc, #420]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a68      	ldr	r2, [pc, #416]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b66      	ldr	r3, [pc, #408]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a65      	ldr	r2, [pc, #404]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d013      	beq.n	8004c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fc fad4 	bl	80011f0 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fc fad0 	bl	80011f0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e207      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0xc0>
 8004c6a:	e014      	b.n	8004c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fc fac0 	bl	80011f0 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c74:	f7fc fabc 	bl	80011f0 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b64      	cmp	r3, #100	; 0x64
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e1f3      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0xe8>
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d063      	beq.n	8004d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ca2:	4b4a      	ldr	r3, [pc, #296]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d11c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cba:	4b44      	ldr	r3, [pc, #272]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d116      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_RCC_OscConfig+0x152>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e1c7      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4937      	ldr	r1, [pc, #220]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	e03a      	b.n	8004d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d020      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfc:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <HAL_RCC_OscConfig+0x244>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fc fa75 	bl	80011f0 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0a:	f7fc fa71 	bl	80011f0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1a8      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4925      	ldr	r1, [pc, #148]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]
 8004d3c:	e015      	b.n	8004d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <HAL_RCC_OscConfig+0x244>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fc fa54 	bl	80011f0 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d4c:	f7fc fa50 	bl	80011f0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e187      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d036      	beq.n	8004de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <HAL_RCC_OscConfig+0x248>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fc fa34 	bl	80011f0 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7fc fa30 	bl	80011f0 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e167      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x200>
 8004daa:	e01b      	b.n	8004de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_OscConfig+0x248>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fc fa1d 	bl	80011f0 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db8:	e00e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dba:	f7fc fa19 	bl	80011f0 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d907      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e150      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	42470000 	.word	0x42470000
 8004dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	4b88      	ldr	r3, [pc, #544]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ea      	bne.n	8004dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8097 	beq.w	8004f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df6:	4b81      	ldr	r3, [pc, #516]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	4b7d      	ldr	r3, [pc, #500]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	4a7c      	ldr	r2, [pc, #496]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e10:	6413      	str	r3, [r2, #64]	; 0x40
 8004e12:	4b7a      	ldr	r3, [pc, #488]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e22:	4b77      	ldr	r3, [pc, #476]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d118      	bne.n	8004e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2e:	4b74      	ldr	r3, [pc, #464]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a73      	ldr	r2, [pc, #460]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3a:	f7fc f9d9 	bl	80011f0 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e42:	f7fc f9d5 	bl	80011f0 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e10c      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	4b6a      	ldr	r3, [pc, #424]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <HAL_RCC_OscConfig+0x2ea>
 8004e68:	4b64      	ldr	r3, [pc, #400]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	4a63      	ldr	r2, [pc, #396]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6713      	str	r3, [r2, #112]	; 0x70
 8004e74:	e01c      	b.n	8004eb0 <HAL_RCC_OscConfig+0x324>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCC_OscConfig+0x30c>
 8004e7e:	4b5f      	ldr	r3, [pc, #380]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a5e      	ldr	r2, [pc, #376]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8a:	4b5c      	ldr	r3, [pc, #368]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	4a5b      	ldr	r2, [pc, #364]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCC_OscConfig+0x324>
 8004e98:	4b58      	ldr	r3, [pc, #352]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea4:	4b55      	ldr	r3, [pc, #340]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a54      	ldr	r2, [pc, #336]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f023 0304 	bic.w	r3, r3, #4
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d015      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fc f99a 	bl	80011f0 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fc f996 	bl	80011f0 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e0cb      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed6:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0ee      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x334>
 8004ee2:	e014      	b.n	8004f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee4:	f7fc f984 	bl	80011f0 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fc f980 	bl	80011f0 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0b5      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f02:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ee      	bne.n	8004eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d105      	bne.n	8004f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f14:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a1 	beq.w	800506c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f2a:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d05c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d141      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <HAL_RCC_OscConfig+0x478>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fc f954 	bl	80011f0 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fc f950 	bl	80011f0 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e087      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	3b01      	subs	r3, #1
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	491b      	ldr	r1, [pc, #108]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <HAL_RCC_OscConfig+0x478>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fc f929 	bl	80011f0 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fc f925 	bl	80011f0 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e05c      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x416>
 8004fc0:	e054      	b.n	800506c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <HAL_RCC_OscConfig+0x478>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fc f912 	bl	80011f0 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fc f90e 	bl	80011f0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e045      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x444>
 8004fee:	e03d      	b.n	800506c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e038      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40007000 	.word	0x40007000
 8005004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005008:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <HAL_RCC_OscConfig+0x4ec>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d028      	beq.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d121      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d11a      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005040:	4293      	cmp	r3, r2
 8005042:	d111      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800

0800507c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0cc      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005090:	4b68      	ldr	r3, [pc, #416]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d90c      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b65      	ldr	r3, [pc, #404]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b63      	ldr	r3, [pc, #396]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0b8      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d0:	4b59      	ldr	r3, [pc, #356]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a58      	ldr	r2, [pc, #352]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e8:	4b53      	ldr	r3, [pc, #332]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a52      	ldr	r2, [pc, #328]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f4:	4b50      	ldr	r3, [pc, #320]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	494d      	ldr	r1, [pc, #308]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d044      	beq.n	800519c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	4b47      	ldr	r3, [pc, #284]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d119      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e07f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d003      	beq.n	800513a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005136:	2b03      	cmp	r3, #3
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	4b3f      	ldr	r3, [pc, #252]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e06f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514a:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e067      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b37      	ldr	r3, [pc, #220]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4934      	ldr	r1, [pc, #208]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800516c:	f7fc f840 	bl	80011f0 <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fc f83c 	bl	80011f0 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e04f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	4b2b      	ldr	r3, [pc, #172]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 020c 	and.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	429a      	cmp	r2, r3
 800519a:	d1eb      	bne.n	8005174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800519c:	4b25      	ldr	r3, [pc, #148]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d20c      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b22      	ldr	r3, [pc, #136]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e032      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4916      	ldr	r1, [pc, #88]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	490e      	ldr	r1, [pc, #56]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005202:	f000 f821 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005206:	4602      	mov	r2, r0
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	490a      	ldr	r1, [pc, #40]	; (800523c <HAL_RCC_ClockConfig+0x1c0>)
 8005214:	5ccb      	ldrb	r3, [r1, r3]
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	4a09      	ldr	r2, [pc, #36]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fb ffa0 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40023c00 	.word	0x40023c00
 8005238:	40023800 	.word	0x40023800
 800523c:	08009e74 	.word	0x08009e74
 8005240:	20000000 	.word	0x20000000
 8005244:	20000004 	.word	0x20000004

08005248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800524c:	b094      	sub	sp, #80	; 0x50
 800524e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	647b      	str	r3, [r7, #68]	; 0x44
 8005254:	2300      	movs	r3, #0
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005258:	2300      	movs	r3, #0
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005260:	4b79      	ldr	r3, [pc, #484]	; (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d00d      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x40>
 800526c:	2b08      	cmp	r3, #8
 800526e:	f200 80e1 	bhi.w	8005434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x34>
 8005276:	2b04      	cmp	r3, #4
 8005278:	d003      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x3a>
 800527a:	e0db      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800527c:	4b73      	ldr	r3, [pc, #460]	; (800544c <HAL_RCC_GetSysClockFreq+0x204>)
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005280:	e0db      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005282:	4b73      	ldr	r3, [pc, #460]	; (8005450 <HAL_RCC_GetSysClockFreq+0x208>)
 8005284:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005286:	e0d8      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005288:	4b6f      	ldr	r3, [pc, #444]	; (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005292:	4b6d      	ldr	r3, [pc, #436]	; (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d063      	beq.n	8005366 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529e:	4b6a      	ldr	r3, [pc, #424]	; (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	2200      	movs	r2, #0
 80052a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	633b      	str	r3, [r7, #48]	; 0x30
 80052b2:	2300      	movs	r3, #0
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
 80052b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052ba:	4622      	mov	r2, r4
 80052bc:	462b      	mov	r3, r5
 80052be:	f04f 0000 	mov.w	r0, #0
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	0159      	lsls	r1, r3, #5
 80052c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052cc:	0150      	lsls	r0, r2, #5
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4621      	mov	r1, r4
 80052d4:	1a51      	subs	r1, r2, r1
 80052d6:	6139      	str	r1, [r7, #16]
 80052d8:	4629      	mov	r1, r5
 80052da:	eb63 0301 	sbc.w	r3, r3, r1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052ec:	4659      	mov	r1, fp
 80052ee:	018b      	lsls	r3, r1, #6
 80052f0:	4651      	mov	r1, sl
 80052f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052f6:	4651      	mov	r1, sl
 80052f8:	018a      	lsls	r2, r1, #6
 80052fa:	4651      	mov	r1, sl
 80052fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005300:	4659      	mov	r1, fp
 8005302:	eb63 0901 	sbc.w	r9, r3, r1
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531a:	4690      	mov	r8, r2
 800531c:	4699      	mov	r9, r3
 800531e:	4623      	mov	r3, r4
 8005320:	eb18 0303 	adds.w	r3, r8, r3
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	462b      	mov	r3, r5
 8005328:	eb49 0303 	adc.w	r3, r9, r3
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800533a:	4629      	mov	r1, r5
 800533c:	024b      	lsls	r3, r1, #9
 800533e:	4621      	mov	r1, r4
 8005340:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005344:	4621      	mov	r1, r4
 8005346:	024a      	lsls	r2, r1, #9
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534e:	2200      	movs	r2, #0
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
 8005352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005358:	f7fa ff8a 	bl	8000270 <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4613      	mov	r3, r2
 8005362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005364:	e058      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005366:	4b38      	ldr	r3, [pc, #224]	; (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	099b      	lsrs	r3, r3, #6
 800536c:	2200      	movs	r2, #0
 800536e:	4618      	mov	r0, r3
 8005370:	4611      	mov	r1, r2
 8005372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005376:	623b      	str	r3, [r7, #32]
 8005378:	2300      	movs	r3, #0
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
 800537c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	0159      	lsls	r1, r3, #5
 800538e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005392:	0150      	lsls	r0, r2, #5
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4641      	mov	r1, r8
 800539a:	ebb2 0a01 	subs.w	sl, r2, r1
 800539e:	4649      	mov	r1, r9
 80053a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053b8:	ebb2 040a 	subs.w	r4, r2, sl
 80053bc:	eb63 050b 	sbc.w	r5, r3, fp
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	00eb      	lsls	r3, r5, #3
 80053ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ce:	00e2      	lsls	r2, r4, #3
 80053d0:	4614      	mov	r4, r2
 80053d2:	461d      	mov	r5, r3
 80053d4:	4643      	mov	r3, r8
 80053d6:	18e3      	adds	r3, r4, r3
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	464b      	mov	r3, r9
 80053dc:	eb45 0303 	adc.w	r3, r5, r3
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ee:	4629      	mov	r1, r5
 80053f0:	028b      	lsls	r3, r1, #10
 80053f2:	4621      	mov	r1, r4
 80053f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053f8:	4621      	mov	r1, r4
 80053fa:	028a      	lsls	r2, r1, #10
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	2200      	movs	r2, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	61fa      	str	r2, [r7, #28]
 8005408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800540c:	f7fa ff30 	bl	8000270 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4613      	mov	r3, r2
 8005416:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCC_GetSysClockFreq+0x200>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	3301      	adds	r3, #1
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800542a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005432:	e002      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCC_GetSysClockFreq+0x204>)
 8005436:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800543c:	4618      	mov	r0, r3
 800543e:	3750      	adds	r7, #80	; 0x50
 8005440:	46bd      	mov	sp, r7
 8005442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	00f42400 	.word	0x00f42400
 8005450:	007a1200 	.word	0x007a1200

08005454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_RCC_GetHCLKFreq+0x14>)
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000000 	.word	0x20000000

0800546c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005470:	f7ff fff0 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0a9b      	lsrs	r3, r3, #10
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40023800 	.word	0x40023800
 8005490:	08009e84 	.word	0x08009e84

08005494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07b      	b.n	800559e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b6:	d009      	beq.n	80054cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
 80054be:	e005      	b.n	80054cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb fcac 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	ea42 0103 	orr.w	r1, r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0104 	and.w	r1, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0210 	and.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055a6:	b084      	sub	sp, #16
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	f107 001c 	add.w	r0, r7, #28
 80055b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d123      	bne.n	8005608 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f9dc 	bl	80059ba <USB_CoreReset>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
 8005606:	e01b      	b.n	8005640 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f9d0 	bl	80059ba <USB_CoreReset>
 800561a:	4603      	mov	r3, r0
 800561c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800561e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
 8005632:	e005      	b.n	8005640 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005640:	7fbb      	ldrb	r3, [r7, #30]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d10b      	bne.n	800565e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f043 0206 	orr.w	r2, r3, #6
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800566a:	b004      	add	sp, #16
 800566c:	4770      	bx	lr

0800566e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f023 0201 	bic.w	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d115      	bne.n	8005700 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056e0:	200a      	movs	r0, #10
 80056e2:	f7fb fd91 	bl	8001208 <HAL_Delay>
      ms += 10U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	330a      	adds	r3, #10
 80056ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f956 	bl	800599e <USB_GetMode>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d01e      	beq.n	8005736 <USB_SetCurrentMode+0x84>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2bc7      	cmp	r3, #199	; 0xc7
 80056fc:	d9f0      	bls.n	80056e0 <USB_SetCurrentMode+0x2e>
 80056fe:	e01a      	b.n	8005736 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d115      	bne.n	8005732 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005712:	200a      	movs	r0, #10
 8005714:	f7fb fd78 	bl	8001208 <HAL_Delay>
      ms += 10U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	330a      	adds	r3, #10
 800571c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f93d 	bl	800599e <USB_GetMode>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <USB_SetCurrentMode+0x84>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2bc7      	cmp	r3, #199	; 0xc7
 800572e:	d9f0      	bls.n	8005712 <USB_SetCurrentMode+0x60>
 8005730:	e001      	b.n	8005736 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e005      	b.n	8005742 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2bc8      	cmp	r3, #200	; 0xc8
 800573a:	d101      	bne.n	8005740 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005764:	d901      	bls.n	800576a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e01b      	b.n	80057a2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	daf2      	bge.n	8005758 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	019b      	lsls	r3, r3, #6
 800577a:	f043 0220 	orr.w	r2, r3, #32
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800578e:	d901      	bls.n	8005794 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b20      	cmp	r3, #32
 800579e:	d0f0      	beq.n	8005782 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3301      	adds	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80057c6:	d901      	bls.n	80057cc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e018      	b.n	80057fe <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	daf2      	bge.n	80057ba <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2210      	movs	r2, #16
 80057dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80057ea:	d901      	bls.n	80057f0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e006      	b.n	80057fe <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d0f0      	beq.n	80057de <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800580a:	b480      	push	{r7}
 800580c:	b089      	sub	sp, #36	; 0x24
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	4611      	mov	r1, r2
 8005816:	461a      	mov	r2, r3
 8005818:	460b      	mov	r3, r1
 800581a:	71fb      	strb	r3, [r7, #7]
 800581c:	4613      	mov	r3, r2
 800581e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	d123      	bne.n	8005878 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005830:	88bb      	ldrh	r3, [r7, #4]
 8005832:	3303      	adds	r3, #3
 8005834:	089b      	lsrs	r3, r3, #2
 8005836:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005838:	2300      	movs	r3, #0
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e018      	b.n	8005870 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	031a      	lsls	r2, r3, #12
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4413      	add	r3, r2
 8005846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584a:	461a      	mov	r2, r3
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	3301      	adds	r3, #1
 8005856:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3301      	adds	r3, #1
 800585c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	3301      	adds	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	3301      	adds	r3, #1
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	429a      	cmp	r2, r3
 8005876:	d3e2      	bcc.n	800583e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3724      	adds	r7, #36	; 0x24
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005886:	b480      	push	{r7}
 8005888:	b08b      	sub	sp, #44	; 0x2c
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	4613      	mov	r3, r2
 8005892:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058ac:	2300      	movs	r3, #0
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	e014      	b.n	80058dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	3301      	adds	r3, #1
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	3301      	adds	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	3301      	adds	r3, #1
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d3e6      	bcc.n	80058b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058e4:	8bfb      	ldrh	r3, [r7, #30]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01e      	beq.n	8005928 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f4:	461a      	mov	r2, r3
 80058f6:	f107 0310 	add.w	r3, r7, #16
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	fa22 f303 	lsr.w	r3, r2, r3
 800590a:	b2da      	uxtb	r2, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	701a      	strb	r2, [r3, #0]
      i++;
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	3301      	adds	r3, #1
 8005914:	623b      	str	r3, [r7, #32]
      pDest++;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	3301      	adds	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800591c:	8bfb      	ldrh	r3, [r7, #30]
 800591e:	3b01      	subs	r3, #1
 8005920:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005922:	8bfb      	ldrh	r3, [r7, #30]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ea      	bne.n	80058fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800592a:	4618      	mov	r0, r3
 800592c:	372c      	adds	r7, #44	; 0x2c
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4013      	ands	r3, r2
 800598e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005990:	68bb      	ldr	r3, [r7, #8]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0301 	and.w	r3, r3, #1
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059d2:	d901      	bls.n	80059d8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e01b      	b.n	8005a10 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	daf2      	bge.n	80059c6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f043 0201 	orr.w	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059fc:	d901      	bls.n	8005a02 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e006      	b.n	8005a10 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d0f0      	beq.n	80059f0 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	2300      	movs	r3, #0
 8005a40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d119      	bne.n	8005aa6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d10a      	bne.n	8005a90 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a88:	f043 0304 	orr.w	r3, r3, #4
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e014      	b.n	8005aba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9e:	f023 0304 	bic.w	r3, r3, #4
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e009      	b.n	8005aba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ab4:	f023 0304 	bic.w	r3, r3, #4
 8005ab8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aba:	2110      	movs	r1, #16
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fe44 	bl	800574a <USB_FlushTxFifo>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fe6e 	bl	80057ae <USB_FlushRxFifo>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	e015      	b.n	8005b0e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aee:	461a      	mov	r2, r3
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295
 8005af4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	461a      	mov	r2, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b12:	461a      	mov	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d3e3      	bcc.n	8005ae2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f04f 32ff 	mov.w	r2, #4294967295
 8005b26:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <USB_HostInit+0x170>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10b      	bne.n	8005b48 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <USB_HostInit+0x174>)
 8005b3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <USB_HostInit+0x178>)
 8005b42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b46:	e009      	b.n	8005b5c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <USB_HostInit+0x17c>)
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a11      	ldr	r2, [pc, #68]	; (8005b9c <USB_HostInit+0x180>)
 8005b58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f043 0210 	orr.w	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <USB_HostInit+0x184>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b88:	b004      	add	sp, #16
 8005b8a:	4770      	bx	lr
 8005b8c:	40040000 	.word	0x40040000
 8005b90:	01000200 	.word	0x01000200
 8005b94:	00e00300 	.word	0x00e00300
 8005b98:	00600080 	.word	0x00600080
 8005b9c:	004000e0 	.word	0x004000e0
 8005ba0:	a3200008 	.word	0xa3200008

08005ba4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bec:	461a      	mov	r2, r3
 8005bee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bf2:	6053      	str	r3, [r2, #4]
 8005bf4:	e00c      	b.n	8005c10 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d107      	bne.n	8005c0c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c02:	461a      	mov	r2, r3
 8005c04:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c08:	6053      	str	r3, [r2, #4]
 8005c0a:	e001      	b.n	8005c10 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c4e:	2064      	movs	r0, #100	; 0x64
 8005c50:	f7fb fada 	bl	8001208 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c60:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c62:	200a      	movs	r0, #10
 8005c64:	f7fb fad0 	bl	8001208 <HAL_Delay>

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <USB_DriveVbus+0x44>
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d106      	bne.n	8005cb6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cb4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d109      	bne.n	8005cd6 <USB_DriveVbus+0x64>
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	0c5b      	lsrs	r3, r3, #17
 8005d02:	f003 0303 	and.w	r3, r3, #3
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	b29b      	uxth	r3, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	70fb      	strb	r3, [r7, #3]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70bb      	strb	r3, [r7, #2]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	461a      	mov	r2, r3
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d87c      	bhi.n	8005e6c <USB_HC_Init+0x138>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <USB_HC_Init+0x44>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005e2f 	.word	0x08005e2f
 8005d80:	08005d89 	.word	0x08005d89
 8005d84:	08005df1 	.word	0x08005df1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	461a      	mov	r2, r3
 8005d96:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da10      	bge.n	8005dc6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005dc4:	e055      	b.n	8005e72 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a6f      	ldr	r2, [pc, #444]	; (8005f88 <USB_HC_Init+0x254>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d151      	bne.n	8005e72 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dec:	60d3      	str	r3, [r2, #12]
      break;
 8005dee:	e040      	b.n	8005e72 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	da34      	bge.n	8005e76 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e2c:	e023      	b.n	8005e76 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f240 2325 	movw	r3, #549	; 0x225
 8005e40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da17      	bge.n	8005e7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e6a:	e006      	b.n	8005e7a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	77fb      	strb	r3, [r7, #31]
      break;
 8005e70:	e004      	b.n	8005e7c <USB_HC_Init+0x148>
      break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <USB_HC_Init+0x148>
      break;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <USB_HC_Init+0x148>
      break;
 8005e7a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea8:	f043 0302 	orr.w	r3, r3, #2
 8005eac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	6939      	ldr	r1, [r7, #16]
 8005ec4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ed8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da03      	bge.n	8005ee8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e001      	b.n	8005eec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fef9 	bl	8005ce4 <USB_GetHostSpeed>
 8005ef2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ef4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d106      	bne.n	8005f0a <USB_HC_Init+0x1d6>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d003      	beq.n	8005f0a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e001      	b.n	8005f0e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f0e:	787b      	ldrb	r3, [r7, #1]
 8005f10:	059b      	lsls	r3, r3, #22
 8005f12:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f16:	78bb      	ldrb	r3, [r7, #2]
 8005f18:	02db      	lsls	r3, r3, #11
 8005f1a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f1e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f24:	049b      	lsls	r3, r3, #18
 8005f26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005f2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f32:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f4c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d003      	beq.n	8005f5e <USB_HC_Init+0x22a>
 8005f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10f      	bne.n	8005f7e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f7c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40040000 	.word	0x40040000

08005f8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08c      	sub	sp, #48	; 0x30
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fa8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4a5d      	ldr	r2, [pc, #372]	; (8006124 <USB_HC_StartXfer+0x198>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d12f      	bne.n	8006012 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d11c      	bne.n	8005ff2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	7c9b      	ldrb	r3, [r3, #18]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <USB_HC_StartXfer+0x3c>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	7c9b      	ldrb	r3, [r3, #18]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d124      	bne.n	8006012 <USB_HC_StartXfer+0x86>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	799b      	ldrb	r3, [r3, #6]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d120      	bne.n	8006012 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	6a3a      	ldr	r2, [r7, #32]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60d3      	str	r3, [r2, #12]
 8005ff0:	e00f      	b.n	8006012 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <USB_HC_StartXfer+0x86>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	795b      	ldrb	r3, [r3, #5]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d107      	bne.n	8006012 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	4619      	mov	r1, r3
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fb6b 	bl	80066e4 <USB_DoPing>
        return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e232      	b.n	8006478 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	799b      	ldrb	r3, [r3, #6]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d158      	bne.n	80060cc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800601a:	2301      	movs	r3, #1
 800601c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	78db      	ldrb	r3, [r3, #3]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	8a92      	ldrh	r2, [r2, #20]
 800602c:	fb03 f202 	mul.w	r2, r3, r2
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	61da      	str	r2, [r3, #28]
 8006034:	e07c      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7c9b      	ldrb	r3, [r3, #18]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d130      	bne.n	80060a0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	2bbc      	cmp	r3, #188	; 0xbc
 8006044:	d918      	bls.n	8006078 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	8a9b      	ldrh	r3, [r3, #20]
 800604a:	461a      	mov	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d003      	beq.n	8006068 <USB_HC_StartXfer+0xdc>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d103      	bne.n	8006070 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2202      	movs	r2, #2
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	e05f      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2201      	movs	r2, #1
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	e05b      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6a1a      	ldr	r2, [r3, #32]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d007      	beq.n	8006098 <USB_HC_StartXfer+0x10c>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d003      	beq.n	8006098 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2204      	movs	r2, #4
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	e04b      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2203      	movs	r2, #3
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e047      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10d      	bne.n	80060c2 <USB_HC_StartXfer+0x136>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	8a92      	ldrh	r2, [r2, #20]
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d907      	bls.n	80060c2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	8a92      	ldrh	r2, [r2, #20]
 80060b8:	fb03 f202 	mul.w	r2, r3, r2
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	61da      	str	r2, [r3, #28]
 80060c0:	e036      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	61da      	str	r2, [r3, #28]
 80060ca:	e031      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d018      	beq.n	8006106 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	8a92      	ldrh	r2, [r2, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	3b01      	subs	r3, #1
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	8a92      	ldrh	r2, [r2, #20]
 80060e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e8:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80060ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060ec:	8b7b      	ldrh	r3, [r7, #26]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d90b      	bls.n	800610a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80060f2:	8b7b      	ldrh	r3, [r7, #26]
 80060f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	8a92      	ldrh	r2, [r2, #20]
 80060fc:	fb03 f202 	mul.w	r2, r3, r2
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61da      	str	r2, [r3, #28]
 8006104:	e001      	b.n	800610a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006106:	2301      	movs	r3, #1
 8006108:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	78db      	ldrb	r3, [r3, #3]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006112:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	8a92      	ldrh	r2, [r2, #20]
 8006118:	fb03 f202 	mul.w	r2, r3, r2
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	61da      	str	r2, [r3, #28]
 8006120:	e006      	b.n	8006130 <USB_HC_StartXfer+0x1a4>
 8006122:	bf00      	nop
 8006124:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800613a:	04d9      	lsls	r1, r3, #19
 800613c:	4ba3      	ldr	r3, [pc, #652]	; (80063cc <USB_HC_StartXfer+0x440>)
 800613e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006140:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	7d9b      	ldrb	r3, [r3, #22]
 8006146:	075b      	lsls	r3, r3, #29
 8006148:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	0148      	lsls	r0, r1, #5
 8006150:	6a39      	ldr	r1, [r7, #32]
 8006152:	4401      	add	r1, r0
 8006154:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006158:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800615a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	460a      	mov	r2, r1
 8006174:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	7e7b      	ldrb	r3, [r7, #25]
 80061be:	075b      	lsls	r3, r3, #29
 80061c0:	69f9      	ldr	r1, [r7, #28]
 80061c2:	0148      	lsls	r0, r1, #5
 80061c4:	6a39      	ldr	r1, [r7, #32]
 80061c6:	4401      	add	r1, r0
 80061c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061cc:	4313      	orrs	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	799b      	ldrb	r3, [r3, #6]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	f040 80c3 	bne.w	8006360 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	7c5b      	ldrb	r3, [r3, #17]
 80061de:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061e4:	4313      	orrs	r3, r2
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061f6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	440a      	add	r2, r1
 800620e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006212:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006216:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	79db      	ldrb	r3, [r3, #7]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d123      	bne.n	8006268 <USB_HC_StartXfer+0x2dc>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d11f      	bne.n	8006268 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006246:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	440a      	add	r2, r1
 800625e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006266:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	7c9b      	ldrb	r3, [r3, #18]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d003      	beq.n	8006278 <USB_HC_StartXfer+0x2ec>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	7c9b      	ldrb	r3, [r3, #18]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d117      	bne.n	80062a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800627c:	2b01      	cmp	r3, #1
 800627e:	d113      	bne.n	80062a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	78db      	ldrb	r3, [r3, #3]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10f      	bne.n	80062a8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	6a3a      	ldr	r2, [r7, #32]
 800629c:	440a      	add	r2, r1
 800629e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	7c9b      	ldrb	r3, [r3, #18]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d162      	bne.n	8006376 <USB_HC_StartXfer+0x3ea>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	78db      	ldrb	r3, [r3, #3]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d15e      	bne.n	8006376 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	3b01      	subs	r3, #1
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d858      	bhi.n	8006374 <USB_HC_StartXfer+0x3e8>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USB_HC_StartXfer+0x33c>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062fb 	.word	0x080062fb
 80062d0:	0800631d 	.word	0x0800631d
 80062d4:	0800633f 	.word	0x0800633f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	6a3a      	ldr	r2, [r7, #32]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f6:	6053      	str	r3, [r2, #4]
          break;
 80062f8:	e03d      	b.n	8006376 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f043 030e 	orr.w	r3, r3, #14
 8006318:	6053      	str	r3, [r2, #4]
          break;
 800631a:	e02c      	b.n	8006376 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	440a      	add	r2, r1
 8006332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800633a:	6053      	str	r3, [r2, #4]
          break;
 800633c:	e01b      	b.n	8006376 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	6a3a      	ldr	r2, [r7, #32]
 8006352:	440a      	add	r2, r1
 8006354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800635c:	6053      	str	r3, [r2, #4]
          break;
 800635e:	e00a      	b.n	8006376 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	461a      	mov	r2, r3
 800636e:	2300      	movs	r3, #0
 8006370:	6053      	str	r3, [r2, #4]
 8006372:	e000      	b.n	8006376 <USB_HC_StartXfer+0x3ea>
          break;
 8006374:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	4413      	add	r3, r2
 800637e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800638c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	78db      	ldrb	r3, [r3, #3]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	e003      	b.n	80063a8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063a6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063bc:	461a      	mov	r2, r3
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	e055      	b.n	8006478 <USB_HC_StartXfer+0x4ec>
 80063cc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	78db      	ldrb	r3, [r3, #3]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d14e      	bne.n	8006476 <USB_HC_StartXfer+0x4ea>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d04a      	beq.n	8006476 <USB_HC_StartXfer+0x4ea>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	79db      	ldrb	r3, [r3, #7]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d146      	bne.n	8006476 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	7c9b      	ldrb	r3, [r3, #18]
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d831      	bhi.n	8006454 <USB_HC_StartXfer+0x4c8>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <USB_HC_StartXfer+0x46c>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	08006409 	.word	0x08006409
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	08006409 	.word	0x08006409
 8006404:	0800642d 	.word	0x0800642d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	3303      	adds	r3, #3
 800640e:	089b      	lsrs	r3, r3, #2
 8006410:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006412:	8afa      	ldrh	r2, [r7, #22]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	b29b      	uxth	r3, r3
 800641a:	429a      	cmp	r2, r3
 800641c:	d91c      	bls.n	8006458 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	619a      	str	r2, [r3, #24]
        }
        break;
 800642a:	e015      	b.n	8006458 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	3303      	adds	r3, #3
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006436:	8afa      	ldrh	r2, [r7, #22]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	b29b      	uxth	r3, r3
 8006442:	429a      	cmp	r2, r3
 8006444:	d90a      	bls.n	800645c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	619a      	str	r2, [r3, #24]
        }
        break;
 8006452:	e003      	b.n	800645c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006454:	bf00      	nop
 8006456:	e002      	b.n	800645e <USB_HC_StartXfer+0x4d2>
        break;
 8006458:	bf00      	nop
 800645a:	e000      	b.n	800645e <USB_HC_StartXfer+0x4d2>
        break;
 800645c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6999      	ldr	r1, [r3, #24]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	785a      	ldrb	r2, [r3, #1]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	b29b      	uxth	r3, r3
 800646c:	2000      	movs	r0, #0
 800646e:	9000      	str	r0, [sp, #0]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff f9ca 	bl	800580a <USB_WritePacket>
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3728      	adds	r7, #40	; 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	b29b      	uxth	r3, r3
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b089      	sub	sp, #36	; 0x24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	0c9b      	lsrs	r3, r3, #18
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	0fdb      	lsrs	r3, r3, #31
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	0fdb      	lsrs	r3, r3, #31
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b20      	cmp	r3, #32
 8006506:	d10d      	bne.n	8006524 <USB_HC_Halt+0x82>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <USB_HC_Halt+0x82>
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d002      	beq.n	8006520 <USB_HC_Halt+0x7e>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d101      	bne.n	8006524 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e0d8      	b.n	80066d6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <USB_HC_Halt+0x8e>
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d173      	bne.n	8006618 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d14a      	bne.n	80065f2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d133      	bne.n	80065d0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	440a      	add	r2, r1
 800657e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006582:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006586:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b4:	d82e      	bhi.n	8006614 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065cc:	d0ec      	beq.n	80065a8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ce:	e081      	b.n	80066d4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065f0:	e070      	b.n	80066d4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	440a      	add	r2, r1
 8006608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006610:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006612:	e05f      	b.n	80066d4 <USB_HC_Halt+0x232>
            break;
 8006614:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006616:	e05d      	b.n	80066d4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006636:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d133      	bne.n	80066b0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	440a      	add	r2, r1
 800665e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006666:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006686:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3301      	adds	r3, #1
 800668c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006694:	d81d      	bhi.n	80066d2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ac:	d0ec      	beq.n	8006688 <USB_HC_Halt+0x1e6>
 80066ae:	e011      	b.n	80066d4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	e000      	b.n	80066d4 <USB_HC_Halt+0x232>
          break;
 80066d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3724      	adds	r7, #36	; 0x24
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	04da      	lsls	r2, r3, #19
 8006700:	4b15      	ldr	r3, [pc, #84]	; (8006758 <USB_DoPing+0x74>)
 8006702:	4013      	ands	r3, r2
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	440a      	add	r2, r1
 800670c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006714:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800672c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006734:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	461a      	mov	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	1ff80000 	.word	0x1ff80000

0800675c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fe ff8d 	bl	8005690 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006776:	2110      	movs	r1, #16
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7fe ffe6 	bl	800574a <USB_FlushTxFifo>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff f810 	bl	80057ae <USB_FlushRxFifo>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e01f      	b.n	80067de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	461a      	mov	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3301      	adds	r3, #1
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b0f      	cmp	r3, #15
 80067e2:	d9dc      	bls.n	800679e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e034      	b.n	8006854 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006800:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006808:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006810:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	461a      	mov	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006830:	d80c      	bhi.n	800684c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006848:	d0ec      	beq.n	8006824 <USB_StopHost+0xc8>
 800684a:	e000      	b.n	800684e <USB_StopHost+0xf2>
        break;
 800684c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	3301      	adds	r3, #1
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d9c7      	bls.n	80067ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006860:	461a      	mov	r2, r3
 8006862:	f04f 33ff 	mov.w	r3, #4294967295
 8006866:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fe fefc 	bl	800566e <USB_EnableGlobalInt>

  return ret;
 8006876:	7ffb      	ldrb	r3, [r7, #31]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b089      	sub	sp, #36	; 0x24
 8006884:	af04      	add	r7, sp, #16
 8006886:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006888:	2301      	movs	r3, #1
 800688a:	2202      	movs	r2, #2
 800688c:	2102      	movs	r1, #2
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fc85 	bl	800719e <USBH_FindInterface>
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d002      	beq.n	80068a4 <USBH_CDC_InterfaceInit+0x24>
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d901      	bls.n	80068a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068a4:	2302      	movs	r3, #2
 80068a6:	e13d      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc5a 	bl	8007166 <USBH_SelectInterface>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068bc:	2302      	movs	r3, #2
 80068be:	e131      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068c6:	2050      	movs	r0, #80	; 0x50
 80068c8:	f002 fb74 	bl	8008fb4 <malloc>
 80068cc:	4603      	mov	r3, r0
 80068ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068e0:	2302      	movs	r3, #2
 80068e2:	e11f      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068e4:	2250      	movs	r2, #80	; 0x50
 80068e6:	2100      	movs	r1, #0
 80068e8:	68b8      	ldr	r0, [r7, #8]
 80068ea:	f002 fd36 	bl	800935a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	211a      	movs	r1, #26
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b25b      	sxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	da15      	bge.n	8006932 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	211a      	movs	r1, #26
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	4413      	add	r3, r2
 8006912:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006916:	781a      	ldrb	r2, [r3, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	211a      	movs	r1, #26
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	4413      	add	r3, r2
 8006928:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 ffce 	bl	80088da <USBH_AllocPipe>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	7819      	ldrb	r1, [r3, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	7858      	ldrb	r0, [r3, #1]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	8952      	ldrh	r2, [r2, #10]
 800695e:	9202      	str	r2, [sp, #8]
 8006960:	2203      	movs	r2, #3
 8006962:	9201      	str	r2, [sp, #4]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4623      	mov	r3, r4
 8006968:	4602      	mov	r2, r0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 ff86 	bl	800887c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2200      	movs	r2, #0
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f002 fa95 	bl	8008ea8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800697e:	2300      	movs	r3, #0
 8006980:	2200      	movs	r2, #0
 8006982:	210a      	movs	r1, #10
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc0a 	bl	800719e <USBH_FindInterface>
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2bff      	cmp	r3, #255	; 0xff
 8006992:	d002      	beq.n	800699a <USBH_CDC_InterfaceInit+0x11a>
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d901      	bls.n	800699e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800699a:	2302      	movs	r3, #2
 800699c:	e0c2      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	211a      	movs	r1, #26
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da16      	bge.n	80069e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	211a      	movs	r1, #26
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	211a      	movs	r1, #26
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069dc:	881a      	ldrh	r2, [r3, #0]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	835a      	strh	r2, [r3, #26]
 80069e2:	e015      	b.n	8006a10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	211a      	movs	r1, #26
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	211a      	movs	r1, #26
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	211a      	movs	r1, #26
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da16      	bge.n	8006a56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	211a      	movs	r1, #26
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	211a      	movs	r1, #26
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a4e:	881a      	ldrh	r2, [r3, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	835a      	strh	r2, [r3, #26]
 8006a54:	e015      	b.n	8006a82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	211a      	movs	r1, #26
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	211a      	movs	r1, #26
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	7b9b      	ldrb	r3, [r3, #14]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 ff26 	bl	80088da <USBH_AllocPipe>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	7bdb      	ldrb	r3, [r3, #15]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 ff1c 	bl	80088da <USBH_AllocPipe>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7b59      	ldrb	r1, [r3, #13]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7b98      	ldrb	r0, [r3, #14]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	8b12      	ldrh	r2, [r2, #24]
 8006ac2:	9202      	str	r2, [sp, #8]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4623      	mov	r3, r4
 8006acc:	4602      	mov	r2, r0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fed4 	bl	800887c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	7b19      	ldrb	r1, [r3, #12]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	7bd8      	ldrb	r0, [r3, #15]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	8b52      	ldrh	r2, [r2, #26]
 8006aec:	9202      	str	r2, [sp, #8]
 8006aee:	2202      	movs	r2, #2
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4623      	mov	r3, r4
 8006af6:	4602      	mov	r2, r0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 febf 	bl	800887c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	7b5b      	ldrb	r3, [r3, #13]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 f9ca 	bl	8008ea8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	7b1b      	ldrb	r3, [r3, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f002 f9c3 	bl	8008ea8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd90      	pop	{r4, r7, pc}

08006b2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 feb4 	bl	80088ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fedf 	bl	800891c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	7b1b      	ldrb	r3, [r3, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00e      	beq.n	8006b8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7b1b      	ldrb	r3, [r3, #12]
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fea1 	bl	80088ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	7b1b      	ldrb	r3, [r3, #12]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fecc 	bl	800891c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	7b5b      	ldrb	r3, [r3, #13]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00e      	beq.n	8006bb0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	7b5b      	ldrb	r3, [r3, #13]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fe8e 	bl	80088ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	7b5b      	ldrb	r3, [r3, #13]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 feb9 	bl	800891c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 f9fd 	bl	8008fc4 <free>
    phost->pActiveClass->pData = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3340      	adds	r3, #64	; 0x40
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8b1 	bl	8006d5e <GetLineCoding>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c12:	7afb      	ldrb	r3, [r7, #11]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d877      	bhi.n	8006d30 <USBH_CDC_Process+0x114>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <USBH_CDC_Process+0x2c>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c5d 	.word	0x08006c5d
 8006c4c:	08006c63 	.word	0x08006c63
 8006c50:	08006c93 	.word	0x08006c93
 8006c54:	08006d07 	.word	0x08006d07
 8006c58:	08006d15 	.word	0x08006d15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c60:	e06d      	b.n	8006d3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f897 	bl	8006d9c <SetLineCoding>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c80:	e058      	b.n	8006d34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d055      	beq.n	8006d34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c90:	e050      	b.n	8006d34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	3340      	adds	r3, #64	; 0x40
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f860 	bl	8006d5e <GetLineCoding>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d126      	bne.n	8006cf6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	791b      	ldrb	r3, [r3, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d13b      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d133      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d12b      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d124      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f958 	bl	8006fa4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cf4:	e020      	b.n	8006d38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d01d      	beq.n	8006d38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2204      	movs	r2, #4
 8006d00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d04:	e018      	b.n	8006d38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f867 	bl	8006dda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8da 	bl	8006ec6 <CDC_ProcessReception>
      break;
 8006d12:	e014      	b.n	8006d3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 f822 	bl	8007d60 <USBH_ClrFeature>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d2e:	e005      	b.n	8006d3c <USBH_CDC_Process+0x120>

    default:
      break;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <USBH_CDC_Process+0x122>
      break;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <USBH_CDC_Process+0x122>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <USBH_CDC_Process+0x122>
      break;
 8006d3c:	bf00      	nop

  }

  return status;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	22a1      	movs	r2, #161	; 0xa1
 8006d6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2221      	movs	r2, #33	; 0x21
 8006d72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2207      	movs	r2, #7
 8006d84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2207      	movs	r2, #7
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fb23 	bl	80083d8 <USBH_CtlReq>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2221      	movs	r2, #33	; 0x21
 8006daa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2207      	movs	r2, #7
 8006dc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fb04 	bl	80083d8 <USBH_CtlReq>
 8006dd0:	4603      	mov	r3, r0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	af02      	add	r7, sp, #8
 8006de0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d002      	beq.n	8006e00 <CDC_ProcessTransmission+0x26>
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d023      	beq.n	8006e46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dfe:	e05e      	b.n	8006ebe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	8b12      	ldrh	r2, [r2, #24]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d90b      	bls.n	8006e24 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	69d9      	ldr	r1, [r3, #28]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8b1a      	ldrh	r2, [r3, #24]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	7b5b      	ldrb	r3, [r3, #13]
 8006e18:	2001      	movs	r0, #1
 8006e1a:	9000      	str	r0, [sp, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fcea 	bl	80087f6 <USBH_BulkSendData>
 8006e22:	e00b      	b.n	8006e3c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	7b5b      	ldrb	r3, [r3, #13]
 8006e32:	2001      	movs	r0, #1
 8006e34:	9000      	str	r0, [sp, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fcdd 	bl	80087f6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e44:	e03b      	b.n	8006ebe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	7b5b      	ldrb	r3, [r3, #13]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f002 f801 	bl	8008e54 <USBH_LL_GetURBState>
 8006e52:	4603      	mov	r3, r0
 8006e54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d128      	bne.n	8006eae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	8b12      	ldrh	r2, [r2, #24]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d90e      	bls.n	8006e86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	8b12      	ldrh	r2, [r2, #24]
 8006e70:	1a9a      	subs	r2, r3, r2
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	8b12      	ldrh	r2, [r2, #24]
 8006e7e:	441a      	add	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	61da      	str	r2, [r3, #28]
 8006e84:	e002      	b.n	8006e8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e9c:	e00e      	b.n	8006ebc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f868 	bl	8006f7c <USBH_CDC_TransmitCallback>
      break;
 8006eac:	e006      	b.n	8006ebc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006eae:	7afb      	ldrb	r3, [r7, #11]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d103      	bne.n	8006ebc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ebc:	bf00      	nop
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d002      	beq.n	8006eec <CDC_ProcessReception+0x26>
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d00e      	beq.n	8006f08 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006eea:	e043      	b.n	8006f74 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6a19      	ldr	r1, [r3, #32]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	8b5a      	ldrh	r2, [r3, #26]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	7b1b      	ldrb	r3, [r3, #12]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fca1 	bl	8008840 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2204      	movs	r2, #4
 8006f02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f06:	e035      	b.n	8006f74 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	7b1b      	ldrb	r3, [r3, #12]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 ffa0 	bl	8008e54 <USBH_LL_GetURBState>
 8006f14:	4603      	mov	r3, r0
 8006f16:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f18:	7cfb      	ldrb	r3, [r7, #19]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d129      	bne.n	8006f72 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	7b1b      	ldrb	r3, [r3, #12]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 ff03 	bl	8008d30 <USBH_LL_GetLastXferSize>
 8006f2a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d016      	beq.n	8006f64 <CDC_ProcessReception+0x9e>
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	8b5b      	ldrh	r3, [r3, #26]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d910      	bls.n	8006f64 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	441a      	add	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f62:	e006      	b.n	8006f72 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f80f 	bl	8006f90 <USBH_CDC_ReceiveCallback>
      break;
 8006f72:	bf00      	nop
  }
}
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e029      	b.n	8007024 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	79fa      	ldrb	r2, [r7, #7]
 8006fd4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f81f 	bl	800702c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fdd3 	bl	8008bc8 <USBH_LL_Init>

  return USBH_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e009      	b.n	8007052 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	33e0      	adds	r3, #224	; 0xe0
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	2200      	movs	r2, #0
 800704a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d9f2      	bls.n	800703e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e009      	b.n	8007072 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007078:	d3f1      	bcc.n	800705e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2240      	movs	r2, #64	; 0x40
 800709e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	331c      	adds	r3, #28
 80070ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f002 f942 	bl	800935a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f002 f939 	bl	800935a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f203 3326 	addw	r3, r3, #806	; 0x326
 80070ee:	2212      	movs	r2, #18
 80070f0:	2100      	movs	r1, #0
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 f931 	bl	800935a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070fe:	223e      	movs	r2, #62	; 0x3e
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f002 f929 	bl	800935a <memset>

  return USBH_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d016      	beq.n	8007154 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10e      	bne.n	800714e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	33de      	adds	r3, #222	; 0xde
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
 800714c:	e004      	b.n	8007158 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800714e:	2302      	movs	r3, #2
 8007150:	73fb      	strb	r3, [r7, #15]
 8007152:	e001      	b.n	8007158 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800717c:	78fa      	ldrb	r2, [r7, #3]
 800717e:	429a      	cmp	r2, r3
 8007180:	d204      	bcs.n	800718c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800718a:	e001      	b.n	8007190 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800718c:	2302      	movs	r3, #2
 800718e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	461a      	mov	r2, r3
 80071ac:	4603      	mov	r3, r0
 80071ae:	70fb      	strb	r3, [r7, #3]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70bb      	strb	r3, [r7, #2]
 80071b4:	4613      	mov	r3, r2
 80071b6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071c6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071c8:	e025      	b.n	8007216 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	221a      	movs	r2, #26
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	3308      	adds	r3, #8
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	3302      	adds	r3, #2
 80071da:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	795b      	ldrb	r3, [r3, #5]
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d002      	beq.n	80071ec <USBH_FindInterface+0x4e>
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	2bff      	cmp	r3, #255	; 0xff
 80071ea:	d111      	bne.n	8007210 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071f0:	78ba      	ldrb	r2, [r7, #2]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d002      	beq.n	80071fc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071f6:	78bb      	ldrb	r3, [r7, #2]
 80071f8:	2bff      	cmp	r3, #255	; 0xff
 80071fa:	d109      	bne.n	8007210 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007200:	787a      	ldrb	r2, [r7, #1]
 8007202:	429a      	cmp	r2, r3
 8007204:	d002      	beq.n	800720c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007206:	787b      	ldrb	r3, [r7, #1]
 8007208:	2bff      	cmp	r3, #255	; 0xff
 800720a:	d101      	bne.n	8007210 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	e006      	b.n	800721e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	3301      	adds	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d9d6      	bls.n	80071ca <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800721c:	23ff      	movs	r3, #255	; 0xff
}
 800721e:	4618      	mov	r0, r3
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fd04 	bl	8008c40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007238:	2101      	movs	r1, #1
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fe1d 	bl	8008e7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007254:	2302      	movs	r3, #2
 8007256:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d102      	bne.n	800726e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2203      	movs	r2, #3
 800726c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b0b      	cmp	r3, #11
 8007276:	f200 81be 	bhi.w	80075f6 <USBH_Process+0x3aa>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <USBH_Process+0x34>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072b1 	.word	0x080072b1
 8007284:	080072e3 	.word	0x080072e3
 8007288:	0800734b 	.word	0x0800734b
 800728c:	08007591 	.word	0x08007591
 8007290:	080075f7 	.word	0x080075f7
 8007294:	080073ef 	.word	0x080073ef
 8007298:	08007537 	.word	0x08007537
 800729c:	08007425 	.word	0x08007425
 80072a0:	08007445 	.word	0x08007445
 80072a4:	08007465 	.word	0x08007465
 80072a8:	080074a9 	.word	0x080074a9
 80072ac:	08007579 	.word	0x08007579
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 819e 	beq.w	80075fa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072c4:	20c8      	movs	r0, #200	; 0xc8
 80072c6:	f001 fe22 	bl	8008f0e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fd15 	bl	8008cfa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072e0:	e18b      	b.n	80075fa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d107      	bne.n	80072fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072fa:	e18d      	b.n	8007618 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007306:	d914      	bls.n	8007332 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800730e:	3301      	adds	r3, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800731e:	2b03      	cmp	r3, #3
 8007320:	d903      	bls.n	800732a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	220d      	movs	r2, #13
 8007326:	701a      	strb	r2, [r3, #0]
      break;
 8007328:	e176      	b.n	8007618 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
      break;
 8007330:	e172      	b.n	8007618 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007338:	f103 020a 	add.w	r2, r3, #10
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007342:	200a      	movs	r0, #10
 8007344:	f001 fde3 	bl	8008f0e <USBH_Delay>
      break;
 8007348:	e166      	b.n	8007618 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800735a:	2104      	movs	r1, #4
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007360:	2064      	movs	r0, #100	; 0x64
 8007362:	f001 fdd4 	bl	8008f0e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 fca0 	bl	8008cac <USBH_LL_GetSpeed>
 800736c:	4603      	mov	r3, r0
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2205      	movs	r2, #5
 800737a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 faab 	bl	80088da <USBH_AllocPipe>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800738c:	2180      	movs	r1, #128	; 0x80
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 faa3 	bl	80088da <USBH_AllocPipe>
 8007394:	4603      	mov	r3, r0
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7919      	ldrb	r1, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073b0:	b292      	uxth	r2, r2
 80073b2:	9202      	str	r2, [sp, #8]
 80073b4:	2200      	movs	r2, #0
 80073b6:	9201      	str	r2, [sp, #4]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	4603      	mov	r3, r0
 80073bc:	2280      	movs	r2, #128	; 0x80
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f001 fa5c 	bl	800887c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7959      	ldrb	r1, [r3, #5]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073d8:	b292      	uxth	r2, r2
 80073da:	9202      	str	r2, [sp, #8]
 80073dc:	2200      	movs	r2, #0
 80073de:	9201      	str	r2, [sp, #4]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4603      	mov	r3, r0
 80073e4:	2200      	movs	r2, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fa48 	bl	800887c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073ec:	e114      	b.n	8007618 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f918 	bl	8007624 <USBH_HandleEnum>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 80fe 	bne.w	80075fe <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007410:	2b01      	cmp	r3, #1
 8007412:	d103      	bne.n	800741c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2208      	movs	r2, #8
 8007418:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800741a:	e0f0      	b.n	80075fe <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2207      	movs	r2, #7
 8007420:	701a      	strb	r2, [r3, #0]
      break;
 8007422:	e0ec      	b.n	80075fe <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80e9 	beq.w	8007602 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007436:	2101      	movs	r1, #1
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2208      	movs	r2, #8
 8007440:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007442:	e0de      	b.n	8007602 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800744a:	b29b      	uxth	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fc3f 	bl	8007cd2 <USBH_SetCfg>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	f040 80d5 	bne.w	8007606 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2209      	movs	r2, #9
 8007460:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007462:	e0d0      	b.n	8007606 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d016      	beq.n	80074a0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007472:	2101      	movs	r1, #1
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc4f 	bl	8007d18 <USBH_SetFeature>
 800747a:	4603      	mov	r3, r0
 800747c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	220a      	movs	r2, #10
 800748a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800748c:	e0bd      	b.n	800760a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b03      	cmp	r3, #3
 8007494:	f040 80b9 	bne.w	800760a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	220a      	movs	r2, #10
 800749c:	701a      	strb	r2, [r3, #0]
      break;
 800749e:	e0b4      	b.n	800760a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	220a      	movs	r2, #10
 80074a4:	701a      	strb	r2, [r3, #0]
      break;
 80074a6:	e0b0      	b.n	800760a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80ad 	beq.w	800760e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]
 80074c0:	e016      	b.n	80074f0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80074c2:	7bfa      	ldrb	r2, [r7, #15]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	32de      	adds	r2, #222	; 0xde
 80074c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074cc:	791a      	ldrb	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d108      	bne.n	80074ea <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	32de      	adds	r2, #222	; 0xde
 80074de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80074e8:	e005      	b.n	80074f6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	3301      	adds	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0e5      	beq.n	80074c2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d016      	beq.n	800752e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2206      	movs	r2, #6
 8007516:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800751e:	2103      	movs	r1, #3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007524:	e073      	b.n	800760e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	220d      	movs	r2, #13
 800752a:	701a      	strb	r2, [r3, #0]
      break;
 800752c:	e06f      	b.n	800760e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	220d      	movs	r2, #13
 8007532:	701a      	strb	r2, [r3, #0]
      break;
 8007534:	e06b      	b.n	800760e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d017      	beq.n	8007570 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
 800754c:	4603      	mov	r3, r0
 800754e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d103      	bne.n	8007560 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	220b      	movs	r2, #11
 800755c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800755e:	e058      	b.n	8007612 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d154      	bne.n	8007612 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	220d      	movs	r2, #13
 800756c:	701a      	strb	r2, [r3, #0]
      break;
 800756e:	e050      	b.n	8007612 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	220d      	movs	r2, #13
 8007574:	701a      	strb	r2, [r3, #0]
      break;
 8007576:	e04c      	b.n	8007612 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d049      	beq.n	8007616 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
      }
      break;
 800758e:	e042      	b.n	8007616 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff fd47 	bl	800702c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075cc:	2105      	movs	r1, #5
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d107      	bne.n	80075ee <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fe1f 	bl	800722a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075ec:	e014      	b.n	8007618 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fb26 	bl	8008c40 <USBH_LL_Start>
      break;
 80075f4:	e010      	b.n	8007618 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80075f6:	bf00      	nop
 80075f8:	e00e      	b.n	8007618 <USBH_Process+0x3cc>
      break;
 80075fa:	bf00      	nop
 80075fc:	e00c      	b.n	8007618 <USBH_Process+0x3cc>
      break;
 80075fe:	bf00      	nop
 8007600:	e00a      	b.n	8007618 <USBH_Process+0x3cc>
    break;
 8007602:	bf00      	nop
 8007604:	e008      	b.n	8007618 <USBH_Process+0x3cc>
      break;
 8007606:	bf00      	nop
 8007608:	e006      	b.n	8007618 <USBH_Process+0x3cc>
      break;
 800760a:	bf00      	nop
 800760c:	e004      	b.n	8007618 <USBH_Process+0x3cc>
      break;
 800760e:	bf00      	nop
 8007610:	e002      	b.n	8007618 <USBH_Process+0x3cc>
      break;
 8007612:	bf00      	nop
 8007614:	e000      	b.n	8007618 <USBH_Process+0x3cc>
      break;
 8007616:	bf00      	nop
  }
  return USBH_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop

08007624 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af04      	add	r7, sp, #16
 800762a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007630:	2301      	movs	r3, #1
 8007632:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b07      	cmp	r3, #7
 800763a:	f200 81c1 	bhi.w	80079c0 <USBH_HandleEnum+0x39c>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <USBH_HandleEnum+0x20>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007665 	.word	0x08007665
 8007648:	08007723 	.word	0x08007723
 800764c:	0800778d 	.word	0x0800778d
 8007650:	0800781b 	.word	0x0800781b
 8007654:	08007885 	.word	0x08007885
 8007658:	080078f5 	.word	0x080078f5
 800765c:	0800793b 	.word	0x0800793b
 8007660:	08007981 	.word	0x08007981
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007664:	2108      	movs	r1, #8
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa50 	bl	8007b0c <USBH_Get_DevDesc>
 800766c:	4603      	mov	r3, r0
 800766e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d130      	bne.n	80076d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7919      	ldrb	r1, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800769a:	b292      	uxth	r2, r2
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	9201      	str	r2, [sp, #4]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4603      	mov	r3, r0
 80076a6:	2280      	movs	r2, #128	; 0x80
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f8e7 	bl	800887c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7959      	ldrb	r1, [r3, #5]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076c2:	b292      	uxth	r2, r2
 80076c4:	9202      	str	r2, [sp, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	9201      	str	r2, [sp, #4]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	4603      	mov	r3, r0
 80076ce:	2200      	movs	r2, #0
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f8d3 	bl	800887c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076d6:	e175      	b.n	80079c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f040 8172 	bne.w	80079c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076e6:	3301      	adds	r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d903      	bls.n	8007702 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	220d      	movs	r2, #13
 80076fe:	701a      	strb	r2, [r3, #0]
      break;
 8007700:	e160      	b.n	80079c4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	795b      	ldrb	r3, [r3, #5]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 f907 	bl	800891c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f901 	bl	800891c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
      break;
 8007720:	e150      	b.n	80079c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007722:	2112      	movs	r1, #18
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9f1 	bl	8007b0c <USBH_Get_DevDesc>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800773a:	e145      	b.n	80079c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b03      	cmp	r3, #3
 8007740:	f040 8142 	bne.w	80079c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800774a:	3301      	adds	r3, #1
 800774c:	b2da      	uxtb	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800775a:	2b03      	cmp	r3, #3
 800775c:	d903      	bls.n	8007766 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	220d      	movs	r2, #13
 8007762:	701a      	strb	r2, [r3, #0]
      break;
 8007764:	e130      	b.n	80079c8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	795b      	ldrb	r3, [r3, #5]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 f8d5 	bl	800891c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	791b      	ldrb	r3, [r3, #4]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 f8cf 	bl	800891c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e11d      	b.n	80079c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800778c:	2101      	movs	r1, #1
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa7b 	bl	8007c8a <USBH_SetAddress>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d132      	bne.n	8007804 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800779e:	2002      	movs	r0, #2
 80077a0:	f001 fbb5 	bl	8008f0e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2203      	movs	r2, #3
 80077b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	7919      	ldrb	r1, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077c6:	b292      	uxth	r2, r2
 80077c8:	9202      	str	r2, [sp, #8]
 80077ca:	2200      	movs	r2, #0
 80077cc:	9201      	str	r2, [sp, #4]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	4603      	mov	r3, r0
 80077d2:	2280      	movs	r2, #128	; 0x80
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 f851 	bl	800887c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7959      	ldrb	r1, [r3, #5]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077ee:	b292      	uxth	r2, r2
 80077f0:	9202      	str	r2, [sp, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	9201      	str	r2, [sp, #4]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	4603      	mov	r3, r0
 80077fa:	2200      	movs	r2, #0
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f83d 	bl	800887c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007802:	e0e3      	b.n	80079cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b03      	cmp	r3, #3
 8007808:	f040 80e0 	bne.w	80079cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	220d      	movs	r2, #13
 8007810:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	705a      	strb	r2, [r3, #1]
      break;
 8007818:	e0d8      	b.n	80079cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800781a:	2109      	movs	r1, #9
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9a1 	bl	8007b64 <USBH_Get_CfgDesc>
 8007822:	4603      	mov	r3, r0
 8007824:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2204      	movs	r2, #4
 8007830:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007832:	e0cd      	b.n	80079d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b03      	cmp	r3, #3
 8007838:	f040 80ca 	bne.w	80079d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007842:	3301      	adds	r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007852:	2b03      	cmp	r3, #3
 8007854:	d903      	bls.n	800785e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	220d      	movs	r2, #13
 800785a:	701a      	strb	r2, [r3, #0]
      break;
 800785c:	e0b8      	b.n	80079d0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	795b      	ldrb	r3, [r3, #5]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f859 	bl	800891c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	791b      	ldrb	r3, [r3, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 f853 	bl	800891c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]
      break;
 8007882:	e0a5      	b.n	80079d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f969 	bl	8007b64 <USBH_Get_CfgDesc>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2205      	movs	r2, #5
 80078a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078a2:	e097      	b.n	80079d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	f040 8094 	bne.w	80079d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078b2:	3301      	adds	r3, #1
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d903      	bls.n	80078ce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	220d      	movs	r2, #13
 80078ca:	701a      	strb	r2, [r3, #0]
      break;
 80078cc:	e082      	b.n	80079d4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	795b      	ldrb	r3, [r3, #5]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f821 	bl	800891c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f81b 	bl	800891c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	701a      	strb	r2, [r3, #0]
      break;
 80078f2:	e06f      	b.n	80079d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d019      	beq.n	8007932 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800790a:	23ff      	movs	r3, #255	; 0xff
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f953 	bl	8007bb8 <USBH_Get_StringDesc>
 8007912:	4603      	mov	r3, r0
 8007914:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2206      	movs	r2, #6
 8007920:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007922:	e059      	b.n	80079d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b03      	cmp	r3, #3
 8007928:	d156      	bne.n	80079d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2206      	movs	r2, #6
 800792e:	705a      	strb	r2, [r3, #1]
      break;
 8007930:	e052      	b.n	80079d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2206      	movs	r2, #6
 8007936:	705a      	strb	r2, [r3, #1]
      break;
 8007938:	e04e      	b.n	80079d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007940:	2b00      	cmp	r3, #0
 8007942:	d019      	beq.n	8007978 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007950:	23ff      	movs	r3, #255	; 0xff
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f930 	bl	8007bb8 <USBH_Get_StringDesc>
 8007958:	4603      	mov	r3, r0
 800795a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2207      	movs	r2, #7
 8007966:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007968:	e038      	b.n	80079dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b03      	cmp	r3, #3
 800796e:	d135      	bne.n	80079dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2207      	movs	r2, #7
 8007974:	705a      	strb	r2, [r3, #1]
      break;
 8007976:	e031      	b.n	80079dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2207      	movs	r2, #7
 800797c:	705a      	strb	r2, [r3, #1]
      break;
 800797e:	e02d      	b.n	80079dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007986:	2b00      	cmp	r3, #0
 8007988:	d017      	beq.n	80079ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007996:	23ff      	movs	r3, #255	; 0xff
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f90d 	bl	8007bb8 <USBH_Get_StringDesc>
 800799e:	4603      	mov	r3, r0
 80079a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d102      	bne.n	80079ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80079ac:	e018      	b.n	80079e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d115      	bne.n	80079e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]
      break;
 80079b8:	e012      	b.n	80079e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
      break;
 80079be:	e00f      	b.n	80079e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80079c0:	bf00      	nop
 80079c2:	e00e      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079c4:	bf00      	nop
 80079c6:	e00c      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079c8:	bf00      	nop
 80079ca:	e00a      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079cc:	bf00      	nop
 80079ce:	e008      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079d0:	bf00      	nop
 80079d2:	e006      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079d4:	bf00      	nop
 80079d6:	e004      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079d8:	bf00      	nop
 80079da:	e002      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079dc:	bf00      	nop
 80079de:	e000      	b.n	80079e2 <USBH_HandleEnum+0x3be>
      break;
 80079e0:	bf00      	nop
  }
  return Status;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f804 	bl	8007a2e <USBH_HandleSof>
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b0b      	cmp	r3, #11
 8007a3e:	d10a      	bne.n	8007a56 <USBH_HandleSof+0x28>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
  }
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007a6e:	bf00      	nop
}
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a8a:	bf00      	nop
}
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f8c6 	bl	8008c76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 ff13 	bl	800891c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	795b      	ldrb	r3, [r3, #5]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 ff0d 	bl	800891c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007b18:	887b      	ldrh	r3, [r7, #2]
 8007b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1e:	d901      	bls.n	8007b24 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e01b      	b.n	8007b5c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b2a:	887b      	ldrh	r3, [r7, #2]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b34:	2100      	movs	r1, #0
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f872 	bl	8007c20 <USBH_GetDescriptor>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d109      	bne.n	8007b5a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b4c:	887a      	ldrh	r2, [r7, #2]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f929 	bl	8007da8 <USBH_ParseDevDesc>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	331c      	adds	r3, #28
 8007b74:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007b76:	887b      	ldrh	r3, [r7, #2]
 8007b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7c:	d901      	bls.n	8007b82 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e016      	b.n	8007bb0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f846 	bl	8007c20 <USBH_GetDescriptor>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d107      	bne.n	8007bae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b9e:	887b      	ldrh	r3, [r7, #2]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f9b3 	bl	8007f10 <USBH_ParseCfgDesc>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	72fb      	strb	r3, [r7, #11]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007bcc:	893b      	ldrh	r3, [r7, #8]
 8007bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd2:	d802      	bhi.n	8007bda <USBH_Get_StringDesc+0x22>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e01c      	b.n	8007c18 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007be6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007bee:	893b      	ldrh	r3, [r7, #8]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f812 	bl	8007c20 <USBH_GetDescriptor>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d107      	bne.n	8007c16 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c0c:	893a      	ldrh	r2, [r7, #8]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fb93 	bl	800833c <USBH_ParseStringDesc>
  }

  return status;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	72fb      	strb	r3, [r7, #11]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	789b      	ldrb	r3, [r3, #2]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d11c      	bne.n	8007c74 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2206      	movs	r2, #6
 8007c4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	893a      	ldrh	r2, [r7, #8]
 8007c50:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c52:	893b      	ldrh	r3, [r7, #8]
 8007c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5c:	d104      	bne.n	8007c68 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f240 4209 	movw	r2, #1033	; 0x409
 8007c64:	829a      	strh	r2, [r3, #20]
 8007c66:	e002      	b.n	8007c6e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8b3a      	ldrh	r2, [r7, #24]
 8007c72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c74:	8b3b      	ldrh	r3, [r7, #24]
 8007c76:	461a      	mov	r2, r3
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fbac 	bl	80083d8 <USBH_CtlReq>
 8007c80:	4603      	mov	r3, r0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	789b      	ldrb	r3, [r3, #2]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d10f      	bne.n	8007cbe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2205      	movs	r2, #5
 8007ca8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fb88 	bl	80083d8 <USBH_CtlReq>
 8007cc8:	4603      	mov	r3, r0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	789b      	ldrb	r3, [r3, #2]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d10e      	bne.n	8007d04 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2209      	movs	r2, #9
 8007cf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	887a      	ldrh	r2, [r7, #2]
 8007cf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d04:	2200      	movs	r2, #0
 8007d06:	2100      	movs	r1, #0
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fb65 	bl	80083d8 <USBH_CtlReq>
 8007d0e:	4603      	mov	r3, r0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	789b      	ldrb	r3, [r3, #2]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d10f      	bne.n	8007d4c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2203      	movs	r2, #3
 8007d36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fb41 	bl	80083d8 <USBH_CtlReq>
 8007d56:	4603      	mov	r3, r0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d10f      	bne.n	8007d94 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d94:	2200      	movs	r2, #0
 8007d96:	2100      	movs	r1, #0
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fb1d 	bl	80083d8 <USBH_CtlReq>
 8007d9e:	4603      	mov	r3, r0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007dbc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e098      	b.n	8007efe <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	781a      	ldrb	r2, [r3, #0]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	785a      	ldrb	r2, [r3, #1]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	3302      	adds	r3, #2
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	3303      	adds	r3, #3
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	791a      	ldrb	r2, [r3, #4]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	795a      	ldrb	r2, [r3, #5]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	799a      	ldrb	r2, [r3, #6]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	79da      	ldrb	r2, [r3, #7]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d11b      	bne.n	8007e64 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	79db      	ldrb	r3, [r3, #7]
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	dc0f      	bgt.n	8007e54 <USBH_ParseDevDesc+0xac>
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	db0f      	blt.n	8007e58 <USBH_ParseDevDesc+0xb0>
 8007e38:	3b08      	subs	r3, #8
 8007e3a:	4a34      	ldr	r2, [pc, #208]	; (8007f0c <USBH_ParseDevDesc+0x164>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	bf14      	ite	ne
 8007e48:	2301      	movne	r3, #1
 8007e4a:	2300      	moveq	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <USBH_ParseDevDesc+0xb8>
 8007e52:	e001      	b.n	8007e58 <USBH_ParseDevDesc+0xb0>
 8007e54:	2b40      	cmp	r3, #64	; 0x40
 8007e56:	d003      	beq.n	8007e60 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	71da      	strb	r2, [r3, #7]
        break;
 8007e5e:	e000      	b.n	8007e62 <USBH_ParseDevDesc+0xba>
        break;
 8007e60:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007e62:	e00e      	b.n	8007e82 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d107      	bne.n	8007e7e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	79db      	ldrb	r3, [r3, #7]
 8007e72:	2b08      	cmp	r3, #8
 8007e74:	d005      	beq.n	8007e82 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	71da      	strb	r2, [r3, #7]
 8007e7c:	e001      	b.n	8007e82 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d939      	bls.n	8007efc <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3309      	adds	r3, #9
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	330a      	adds	r3, #10
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	330b      	adds	r3, #11
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	330d      	adds	r3, #13
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	021b      	lsls	r3, r3, #8
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	7b9a      	ldrb	r2, [r3, #14]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	7bda      	ldrb	r2, [r3, #15]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	7c1a      	ldrb	r2, [r3, #16]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	7c5a      	ldrb	r2, [r3, #17]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	01000101 	.word	0x01000101

08007f10 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08c      	sub	sp, #48	; 0x30
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f24:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e0db      	b.n	80080fa <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	785a      	ldrb	r2, [r3, #1]
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	3302      	adds	r3, #2
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	3303      	adds	r3, #3
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f72:	bf28      	it	cs
 8007f74:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	791a      	ldrb	r2, [r3, #4]
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	795a      	ldrb	r2, [r3, #5]
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	799a      	ldrb	r2, [r3, #6]
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	79da      	ldrb	r2, [r3, #7]
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	7a1a      	ldrb	r2, [r3, #8]
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b09      	cmp	r3, #9
 8007fac:	d002      	beq.n	8007fb4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	2209      	movs	r2, #9
 8007fb2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	f240 809d 	bls.w	80080f6 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fbc:	2309      	movs	r3, #9
 8007fbe:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fc4:	e081      	b.n	80080ca <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fc6:	f107 0316 	add.w	r3, r7, #22
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fce:	f000 f9e8 	bl	80083a2 <USBH_GetNextDesc>
 8007fd2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d176      	bne.n	80080ca <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b09      	cmp	r3, #9
 8007fe2:	d002      	beq.n	8007fea <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	2209      	movs	r2, #9
 8007fe8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fee:	221a      	movs	r2, #26
 8007ff0:	fb02 f303 	mul.w	r3, r2, r3
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008000:	69f8      	ldr	r0, [r7, #28]
 8008002:	f000 f87e 	bl	8008102 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008010:	e043      	b.n	800809a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008012:	f107 0316 	add.w	r3, r7, #22
 8008016:	4619      	mov	r1, r3
 8008018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800801a:	f000 f9c2 	bl	80083a2 <USBH_GetNextDesc>
 800801e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	2b05      	cmp	r3, #5
 8008026:	d138      	bne.n	800809a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	795b      	ldrb	r3, [r3, #5]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d113      	bne.n	8008058 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008034:	2b02      	cmp	r3, #2
 8008036:	d003      	beq.n	8008040 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	799b      	ldrb	r3, [r3, #6]
 800803c:	2b03      	cmp	r3, #3
 800803e:	d10b      	bne.n	8008058 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	79db      	ldrb	r3, [r3, #7]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10b      	bne.n	8008060 <USBH_ParseCfgDesc+0x150>
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b09      	cmp	r3, #9
 800804e:	d007      	beq.n	8008060 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2209      	movs	r2, #9
 8008054:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008056:	e003      	b.n	8008060 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	2207      	movs	r2, #7
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e000      	b.n	8008062 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008060:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008066:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800806a:	3201      	adds	r2, #1
 800806c:	00d2      	lsls	r2, r2, #3
 800806e:	211a      	movs	r1, #26
 8008070:	fb01 f303 	mul.w	r3, r1, r3
 8008074:	4413      	add	r3, r2
 8008076:	3308      	adds	r3, #8
 8008078:	6a3a      	ldr	r2, [r7, #32]
 800807a:	4413      	add	r3, r2
 800807c:	3304      	adds	r3, #4
 800807e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008082:	69b9      	ldr	r1, [r7, #24]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f870 	bl	800816a <USBH_ParseEPDesc>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008094:	3301      	adds	r3, #1
 8008096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	791b      	ldrb	r3, [r3, #4]
 800809e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d204      	bcs.n	80080b0 <USBH_ParseCfgDesc+0x1a0>
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	885a      	ldrh	r2, [r3, #2]
 80080aa:	8afb      	ldrh	r3, [r7, #22]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d8b0      	bhi.n	8008012 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	791b      	ldrb	r3, [r3, #4]
 80080b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d201      	bcs.n	80080c0 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 80080bc:	2303      	movs	r3, #3
 80080be:	e01c      	b.n	80080fa <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 80080c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080c4:	3301      	adds	r3, #1
 80080c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d805      	bhi.n	80080de <USBH_ParseCfgDesc+0x1ce>
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	885a      	ldrh	r2, [r3, #2]
 80080d6:	8afb      	ldrh	r3, [r7, #22]
 80080d8:	429a      	cmp	r2, r3
 80080da:	f63f af74 	bhi.w	8007fc6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	791b      	ldrb	r3, [r3, #4]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	bf28      	it	cs
 80080e6:	2302      	movcs	r3, #2
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d201      	bcs.n	80080f6 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e001      	b.n	80080fa <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 80080f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3730      	adds	r7, #48	; 0x30
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	785a      	ldrb	r2, [r3, #1]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	789a      	ldrb	r2, [r3, #2]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	78da      	ldrb	r2, [r3, #3]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	3304      	adds	r3, #4
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b02      	cmp	r3, #2
 8008134:	bf28      	it	cs
 8008136:	2302      	movcs	r3, #2
 8008138:	b2da      	uxtb	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	795a      	ldrb	r2, [r3, #5]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	799a      	ldrb	r2, [r3, #6]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	79da      	ldrb	r2, [r3, #7]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	7a1a      	ldrb	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	721a      	strb	r2, [r3, #8]
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800816a:	b480      	push	{r7}
 800816c:	b087      	sub	sp, #28
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781a      	ldrb	r2, [r3, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	785a      	ldrb	r2, [r3, #1]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	789a      	ldrb	r2, [r3, #2]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	78da      	ldrb	r2, [r3, #3]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3304      	adds	r3, #4
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3305      	adds	r3, #5
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	021b      	lsls	r3, r3, #8
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	4313      	orrs	r3, r2
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	799a      	ldrb	r2, [r3, #6]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	889b      	ldrh	r3, [r3, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ce:	d804      	bhi.n	80081da <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d8:	d901      	bls.n	80081de <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80081da:	2303      	movs	r3, #3
 80081dc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d136      	bne.n	8008256 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	f003 0303 	and.w	r3, r3, #3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d108      	bne.n	8008206 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	889b      	ldrh	r3, [r3, #4]
 80081f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081fc:	f240 8097 	bls.w	800832e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008200:	2303      	movs	r3, #3
 8008202:	75fb      	strb	r3, [r7, #23]
 8008204:	e093      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	78db      	ldrb	r3, [r3, #3]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d107      	bne.n	8008222 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	f240 8089 	bls.w	800832e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800821c:	2303      	movs	r3, #3
 800821e:	75fb      	strb	r3, [r7, #23]
 8008220:	e085      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	78db      	ldrb	r3, [r3, #3]
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	2b01      	cmp	r3, #1
 800822c:	d005      	beq.n	800823a <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	78db      	ldrb	r3, [r3, #3]
 8008232:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008236:	2b03      	cmp	r3, #3
 8008238:	d10a      	bne.n	8008250 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	799b      	ldrb	r3, [r3, #6]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <USBH_ParseEPDesc+0xe0>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	799b      	ldrb	r3, [r3, #6]
 8008246:	2b10      	cmp	r3, #16
 8008248:	d970      	bls.n	800832c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800824a:	2303      	movs	r3, #3
 800824c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800824e:	e06d      	b.n	800832c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008250:	2303      	movs	r3, #3
 8008252:	75fb      	strb	r3, [r7, #23]
 8008254:	e06b      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800825c:	2b01      	cmp	r3, #1
 800825e:	d13c      	bne.n	80082da <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	78db      	ldrb	r3, [r3, #3]
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d005      	beq.n	8008278 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	78db      	ldrb	r3, [r3, #3]
 8008270:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008274:	2b00      	cmp	r3, #0
 8008276:	d106      	bne.n	8008286 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	889b      	ldrh	r3, [r3, #4]
 800827c:	2b40      	cmp	r3, #64	; 0x40
 800827e:	d956      	bls.n	800832e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008280:	2303      	movs	r3, #3
 8008282:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008284:	e053      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	78db      	ldrb	r3, [r3, #3]
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b01      	cmp	r3, #1
 8008290:	d10e      	bne.n	80082b0 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	799b      	ldrb	r3, [r3, #6]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800829e:	2b10      	cmp	r3, #16
 80082a0:	d803      	bhi.n	80082aa <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d941      	bls.n	800832e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80082aa:	2303      	movs	r3, #3
 80082ac:	75fb      	strb	r3, [r7, #23]
 80082ae:	e03e      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d10b      	bne.n	80082d4 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	799b      	ldrb	r3, [r3, #6]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <USBH_ParseEPDesc+0x164>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	889b      	ldrh	r3, [r3, #4]
 80082c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082cc:	d32f      	bcc.n	800832e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80082ce:	2303      	movs	r3, #3
 80082d0:	75fb      	strb	r3, [r7, #23]
 80082d2:	e02c      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
 80082d8:	e029      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d120      	bne.n	8008326 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	78db      	ldrb	r3, [r3, #3]
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	889b      	ldrh	r3, [r3, #4]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d01a      	beq.n	800832e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80082f8:	2303      	movs	r3, #3
 80082fa:	75fb      	strb	r3, [r7, #23]
 80082fc:	e017      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	78db      	ldrb	r3, [r3, #3]
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	2b03      	cmp	r3, #3
 8008308:	d10a      	bne.n	8008320 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	799b      	ldrb	r3, [r3, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <USBH_ParseEPDesc+0x1b0>
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	889b      	ldrh	r3, [r3, #4]
 8008316:	2b08      	cmp	r3, #8
 8008318:	d909      	bls.n	800832e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800831a:	2303      	movs	r3, #3
 800831c:	75fb      	strb	r3, [r7, #23]
 800831e:	e006      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008320:	2303      	movs	r3, #3
 8008322:	75fb      	strb	r3, [r7, #23]
 8008324:	e003      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008326:	2303      	movs	r3, #3
 8008328:	75fb      	strb	r3, [r7, #23]
 800832a:	e000      	b.n	800832e <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800832c:	bf00      	nop
  }

  return status;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008330:	4618      	mov	r0, r3
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b03      	cmp	r3, #3
 8008352:	d120      	bne.n	8008396 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	1e9a      	subs	r2, r3, #2
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	4293      	cmp	r3, r2
 800835e:	bf28      	it	cs
 8008360:	4613      	movcs	r3, r2
 8008362:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3302      	adds	r3, #2
 8008368:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800836a:	2300      	movs	r3, #0
 800836c:	82fb      	strh	r3, [r7, #22]
 800836e:	e00b      	b.n	8008388 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008370:	8afb      	ldrh	r3, [r7, #22]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4413      	add	r3, r2
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3301      	adds	r3, #1
 8008380:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008382:	8afb      	ldrh	r3, [r7, #22]
 8008384:	3302      	adds	r3, #2
 8008386:	82fb      	strh	r3, [r7, #22]
 8008388:	8afa      	ldrh	r2, [r7, #22]
 800838a:	8abb      	ldrh	r3, [r7, #20]
 800838c:	429a      	cmp	r2, r3
 800838e:	d3ef      	bcc.n	8008370 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]
  }
}
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	881a      	ldrh	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4413      	add	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083ca:	68fb      	ldr	r3, [r7, #12]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80083e6:	2301      	movs	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	789b      	ldrb	r3, [r3, #2]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d002      	beq.n	80083f8 <USBH_CtlReq+0x20>
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d00f      	beq.n	8008416 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80083f6:	e027      	b.n	8008448 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	88fa      	ldrh	r2, [r7, #6]
 8008402:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2202      	movs	r2, #2
 800840e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008410:	2301      	movs	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]
      break;
 8008414:	e018      	b.n	8008448 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 f81c 	bl	8008454 <USBH_HandleControl>
 800841c:	4603      	mov	r3, r0
 800841e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <USBH_CtlReq+0x54>
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	2b03      	cmp	r3, #3
 800842a:	d106      	bne.n	800843a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	761a      	strb	r2, [r3, #24]
      break;
 8008438:	e005      	b.n	8008446 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	2b02      	cmp	r3, #2
 800843e:	d102      	bne.n	8008446 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	709a      	strb	r2, [r3, #2]
      break;
 8008446:	bf00      	nop
  }
  return status;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af02      	add	r7, sp, #8
 800845a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008460:	2300      	movs	r3, #0
 8008462:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7e1b      	ldrb	r3, [r3, #24]
 8008468:	3b01      	subs	r3, #1
 800846a:	2b0a      	cmp	r3, #10
 800846c:	f200 8156 	bhi.w	800871c <USBH_HandleControl+0x2c8>
 8008470:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <USBH_HandleControl+0x24>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	080084a5 	.word	0x080084a5
 800847c:	080084bf 	.word	0x080084bf
 8008480:	08008529 	.word	0x08008529
 8008484:	0800854f 	.word	0x0800854f
 8008488:	08008587 	.word	0x08008587
 800848c:	080085b1 	.word	0x080085b1
 8008490:	08008603 	.word	0x08008603
 8008494:	08008625 	.word	0x08008625
 8008498:	08008661 	.word	0x08008661
 800849c:	08008687 	.word	0x08008687
 80084a0:	080086c5 	.word	0x080086c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f103 0110 	add.w	r1, r3, #16
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	795b      	ldrb	r3, [r3, #5]
 80084ae:	461a      	mov	r2, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f943 	bl	800873c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	761a      	strb	r2, [r3, #24]
      break;
 80084bc:	e139      	b.n	8008732 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	795b      	ldrb	r3, [r3, #5]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fcc5 	bl	8008e54 <USBH_LL_GetURBState>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d11e      	bne.n	8008512 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7c1b      	ldrb	r3, [r3, #16]
 80084d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	8adb      	ldrh	r3, [r3, #22]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80084e6:	7b7b      	ldrb	r3, [r7, #13]
 80084e8:	2b80      	cmp	r3, #128	; 0x80
 80084ea:	d103      	bne.n	80084f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2203      	movs	r2, #3
 80084f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f2:	e115      	b.n	8008720 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2205      	movs	r2, #5
 80084f8:	761a      	strb	r2, [r3, #24]
      break;
 80084fa:	e111      	b.n	8008720 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80084fc:	7b7b      	ldrb	r3, [r7, #13]
 80084fe:	2b80      	cmp	r3, #128	; 0x80
 8008500:	d103      	bne.n	800850a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2209      	movs	r2, #9
 8008506:	761a      	strb	r2, [r3, #24]
      break;
 8008508:	e10a      	b.n	8008720 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2207      	movs	r2, #7
 800850e:	761a      	strb	r2, [r3, #24]
      break;
 8008510:	e106      	b.n	8008720 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b04      	cmp	r3, #4
 8008516:	d003      	beq.n	8008520 <USBH_HandleControl+0xcc>
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b02      	cmp	r3, #2
 800851c:	f040 8100 	bne.w	8008720 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	220b      	movs	r2, #11
 8008524:	761a      	strb	r2, [r3, #24]
      break;
 8008526:	e0fb      	b.n	8008720 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800852e:	b29a      	uxth	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6899      	ldr	r1, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	899a      	ldrh	r2, [r3, #12]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	791b      	ldrb	r3, [r3, #4]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f93a 	bl	80087ba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2204      	movs	r2, #4
 800854a:	761a      	strb	r2, [r3, #24]
      break;
 800854c:	e0f1      	b.n	8008732 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fc7d 	bl	8008e54 <USBH_LL_GetURBState>
 800855a:	4603      	mov	r3, r0
 800855c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d102      	bne.n	800856a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2209      	movs	r2, #9
 8008568:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b05      	cmp	r3, #5
 800856e:	d102      	bne.n	8008576 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008570:	2303      	movs	r3, #3
 8008572:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008574:	e0d6      	b.n	8008724 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b04      	cmp	r3, #4
 800857a:	f040 80d3 	bne.w	8008724 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	220b      	movs	r2, #11
 8008582:	761a      	strb	r2, [r3, #24]
      break;
 8008584:	e0ce      	b.n	8008724 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6899      	ldr	r1, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	899a      	ldrh	r2, [r3, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	795b      	ldrb	r3, [r3, #5]
 8008592:	2001      	movs	r0, #1
 8008594:	9000      	str	r0, [sp, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f8ea 	bl	8008770 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2206      	movs	r2, #6
 80085ac:	761a      	strb	r2, [r3, #24]
      break;
 80085ae:	e0c0      	b.n	8008732 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	795b      	ldrb	r3, [r3, #5]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fc4c 	bl	8008e54 <USBH_LL_GetURBState>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d103      	bne.n	80085ce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2207      	movs	r2, #7
 80085ca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085cc:	e0ac      	b.n	8008728 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b05      	cmp	r3, #5
 80085d2:	d105      	bne.n	80085e0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220c      	movs	r2, #12
 80085d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
      break;
 80085de:	e0a3      	b.n	8008728 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d103      	bne.n	80085ee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2205      	movs	r2, #5
 80085ea:	761a      	strb	r2, [r3, #24]
      break;
 80085ec:	e09c      	b.n	8008728 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	f040 8099 	bne.w	8008728 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	220b      	movs	r2, #11
 80085fa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80085fc:	2302      	movs	r3, #2
 80085fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008600:	e092      	b.n	8008728 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	791b      	ldrb	r3, [r3, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	2100      	movs	r1, #0
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f8d5 	bl	80087ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008616:	b29a      	uxth	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2208      	movs	r2, #8
 8008620:	761a      	strb	r2, [r3, #24]

      break;
 8008622:	e086      	b.n	8008732 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	791b      	ldrb	r3, [r3, #4]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fc12 	bl	8008e54 <USBH_LL_GetURBState>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d105      	bne.n	8008646 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	220d      	movs	r2, #13
 800863e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008644:	e072      	b.n	800872c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b04      	cmp	r3, #4
 800864a:	d103      	bne.n	8008654 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	220b      	movs	r2, #11
 8008650:	761a      	strb	r2, [r3, #24]
      break;
 8008652:	e06b      	b.n	800872c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b05      	cmp	r3, #5
 8008658:	d168      	bne.n	800872c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800865a:	2303      	movs	r3, #3
 800865c:	73fb      	strb	r3, [r7, #15]
      break;
 800865e:	e065      	b.n	800872c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	795b      	ldrb	r3, [r3, #5]
 8008664:	2201      	movs	r2, #1
 8008666:	9200      	str	r2, [sp, #0]
 8008668:	2200      	movs	r2, #0
 800866a:	2100      	movs	r1, #0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f87f 	bl	8008770 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008678:	b29a      	uxth	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	220a      	movs	r2, #10
 8008682:	761a      	strb	r2, [r3, #24]
      break;
 8008684:	e055      	b.n	8008732 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	795b      	ldrb	r3, [r3, #5]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fbe1 	bl	8008e54 <USBH_LL_GetURBState>
 8008692:	4603      	mov	r3, r0
 8008694:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d105      	bne.n	80086a8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	220d      	movs	r2, #13
 80086a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086a6:	e043      	b.n	8008730 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d103      	bne.n	80086b6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2209      	movs	r2, #9
 80086b2:	761a      	strb	r2, [r3, #24]
      break;
 80086b4:	e03c      	b.n	8008730 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d139      	bne.n	8008730 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	220b      	movs	r2, #11
 80086c0:	761a      	strb	r2, [r3, #24]
      break;
 80086c2:	e035      	b.n	8008730 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7e5b      	ldrb	r3, [r3, #25]
 80086c8:	3301      	adds	r3, #1
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	765a      	strb	r2, [r3, #25]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	7e5b      	ldrb	r3, [r3, #25]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d806      	bhi.n	80086e6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80086e4:	e025      	b.n	8008732 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086ec:	2106      	movs	r1, #6
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	795b      	ldrb	r3, [r3, #5]
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f90c 	bl	800891c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f906 	bl	800891c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008716:	2302      	movs	r3, #2
 8008718:	73fb      	strb	r3, [r7, #15]
      break;
 800871a:	e00a      	b.n	8008732 <USBH_HandleControl+0x2de>

    default:
      break;
 800871c:	bf00      	nop
 800871e:	e008      	b.n	8008732 <USBH_HandleControl+0x2de>
      break;
 8008720:	bf00      	nop
 8008722:	e006      	b.n	8008732 <USBH_HandleControl+0x2de>
      break;
 8008724:	bf00      	nop
 8008726:	e004      	b.n	8008732 <USBH_HandleControl+0x2de>
      break;
 8008728:	bf00      	nop
 800872a:	e002      	b.n	8008732 <USBH_HandleControl+0x2de>
      break;
 800872c:	bf00      	nop
 800872e:	e000      	b.n	8008732 <USBH_HandleControl+0x2de>
      break;
 8008730:	bf00      	nop
  }

  return status;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af04      	add	r7, sp, #16
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4613      	mov	r3, r2
 8008748:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800874a:	79f9      	ldrb	r1, [r7, #7]
 800874c:	2300      	movs	r3, #0
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	2308      	movs	r3, #8
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	2300      	movs	r3, #0
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	2300      	movs	r3, #0
 800875e:	2200      	movs	r2, #0
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fb46 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af04      	add	r7, sp, #16
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4611      	mov	r1, r2
 800877c:	461a      	mov	r2, r3
 800877e:	460b      	mov	r3, r1
 8008780:	80fb      	strh	r3, [r7, #6]
 8008782:	4613      	mov	r3, r2
 8008784:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008794:	7979      	ldrb	r1, [r7, #5]
 8008796:	7e3b      	ldrb	r3, [r7, #24]
 8008798:	9303      	str	r3, [sp, #12]
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	9302      	str	r3, [sp, #8]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	2301      	movs	r3, #1
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	2300      	movs	r3, #0
 80087a8:	2200      	movs	r2, #0
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fb21 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af04      	add	r7, sp, #16
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	4611      	mov	r1, r2
 80087c6:	461a      	mov	r2, r3
 80087c8:	460b      	mov	r3, r1
 80087ca:	80fb      	strh	r3, [r7, #6]
 80087cc:	4613      	mov	r3, r2
 80087ce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087d0:	7979      	ldrb	r1, [r7, #5]
 80087d2:	2300      	movs	r3, #0
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	9302      	str	r3, [sp, #8]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	2301      	movs	r3, #1
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	2300      	movs	r3, #0
 80087e4:	2201      	movs	r2, #1
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 fb03 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087ec:	2300      	movs	r3, #0

}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b088      	sub	sp, #32
 80087fa:	af04      	add	r7, sp, #16
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	4611      	mov	r1, r2
 8008802:	461a      	mov	r2, r3
 8008804:	460b      	mov	r3, r1
 8008806:	80fb      	strh	r3, [r7, #6]
 8008808:	4613      	mov	r3, r2
 800880a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800881a:	7979      	ldrb	r1, [r7, #5]
 800881c:	7e3b      	ldrb	r3, [r7, #24]
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	9302      	str	r3, [sp, #8]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	2301      	movs	r3, #1
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	2302      	movs	r3, #2
 800882e:	2200      	movs	r2, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fade 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af04      	add	r7, sp, #16
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	4611      	mov	r1, r2
 800884c:	461a      	mov	r2, r3
 800884e:	460b      	mov	r3, r1
 8008850:	80fb      	strh	r3, [r7, #6]
 8008852:	4613      	mov	r3, r2
 8008854:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008856:	7979      	ldrb	r1, [r7, #5]
 8008858:	2300      	movs	r3, #0
 800885a:	9303      	str	r3, [sp, #12]
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	9302      	str	r3, [sp, #8]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	2301      	movs	r3, #1
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2302      	movs	r3, #2
 800886a:	2201      	movs	r2, #1
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fac0 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af04      	add	r7, sp, #16
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	461a      	mov	r2, r3
 800888a:	4603      	mov	r3, r0
 800888c:	70fb      	strb	r3, [r7, #3]
 800888e:	460b      	mov	r3, r1
 8008890:	70bb      	strb	r3, [r7, #2]
 8008892:	4613      	mov	r3, r2
 8008894:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008896:	7878      	ldrb	r0, [r7, #1]
 8008898:	78ba      	ldrb	r2, [r7, #2]
 800889a:	78f9      	ldrb	r1, [r7, #3]
 800889c:	8b3b      	ldrh	r3, [r7, #24]
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	7d3b      	ldrb	r3, [r7, #20]
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	7c3b      	ldrb	r3, [r7, #16]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	4603      	mov	r3, r0
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa53 	bl	8008d56 <USBH_LL_OpenPipe>

  return USBH_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa72 	bl	8008db4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f836 	bl	8008958 <USBH_GetFreePipe>
 80088ec:	4603      	mov	r3, r0
 80088ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80088f0:	89fb      	ldrh	r3, [r7, #14]
 80088f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00a      	beq.n	8008910 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80088fa:	78fa      	ldrb	r2, [r7, #3]
 80088fc:	89fb      	ldrh	r3, [r7, #14]
 80088fe:	f003 030f 	and.w	r3, r3, #15
 8008902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	33e0      	adds	r3, #224	; 0xe0
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008910:	89fb      	ldrh	r3, [r7, #14]
 8008912:	b2db      	uxtb	r3, r3
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	2b0f      	cmp	r3, #15
 800892c:	d80d      	bhi.n	800894a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	33e0      	adds	r3, #224	; 0xe0
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	33e0      	adds	r3, #224	; 0xe0
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]
 8008968:	e00f      	b.n	800898a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	33e0      	adds	r3, #224	; 0xe0
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	b29b      	uxth	r3, r3
 8008982:	e007      	b.n	8008994 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	3301      	adds	r3, #1
 8008988:	73fb      	strb	r3, [r7, #15]
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	2b0f      	cmp	r3, #15
 800898e:	d9ec      	bls.n	800896a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008990:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80089a4:	2201      	movs	r2, #1
 80089a6:	490e      	ldr	r1, [pc, #56]	; (80089e0 <MX_USB_HOST_Init+0x40>)
 80089a8:	480e      	ldr	r0, [pc, #56]	; (80089e4 <MX_USB_HOST_Init+0x44>)
 80089aa:	f7fe fb05 	bl	8006fb8 <USBH_Init>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80089b4:	f7f8 f8f4 	bl	8000ba0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80089b8:	490b      	ldr	r1, [pc, #44]	; (80089e8 <MX_USB_HOST_Init+0x48>)
 80089ba:	480a      	ldr	r0, [pc, #40]	; (80089e4 <MX_USB_HOST_Init+0x44>)
 80089bc:	f7fe fba9 	bl	8007112 <USBH_RegisterClass>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80089c6:	f7f8 f8eb 	bl	8000ba0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80089ca:	4806      	ldr	r0, [pc, #24]	; (80089e4 <MX_USB_HOST_Init+0x44>)
 80089cc:	f7fe fc2d 	bl	800722a <USBH_Start>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80089d6:	f7f8 f8e3 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80089da:	bf00      	nop
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	08008a01 	.word	0x08008a01
 80089e4:	200002c0 	.word	0x200002c0
 80089e8:	2000000c 	.word	0x2000000c

080089ec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80089f0:	4802      	ldr	r0, [pc, #8]	; (80089fc <MX_USB_HOST_Process+0x10>)
 80089f2:	f7fe fc2b 	bl	800724c <USBH_Process>
}
 80089f6:	bf00      	nop
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200002c0 	.word	0x200002c0

08008a00 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d819      	bhi.n	8008a48 <USBH_UserProcess+0x48>
 8008a14:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <USBH_UserProcess+0x1c>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a49 	.word	0x08008a49
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a41 	.word	0x08008a41
 8008a2c:	08008a31 	.word	0x08008a31
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008a30:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <USBH_UserProcess+0x58>)
 8008a32:	2203      	movs	r2, #3
 8008a34:	701a      	strb	r2, [r3, #0]
  break;
 8008a36:	e008      	b.n	8008a4a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <USBH_UserProcess+0x58>)
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	701a      	strb	r2, [r3, #0]
  break;
 8008a3e:	e004      	b.n	8008a4a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008a40:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <USBH_UserProcess+0x58>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	701a      	strb	r2, [r3, #0]
  break;
 8008a46:	e000      	b.n	8008a4a <USBH_UserProcess+0x4a>

  default:
  break;
 8008a48:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000698 	.word	0x20000698

08008a5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a64:	f107 0314 	add.w	r3, r7, #20
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	605a      	str	r2, [r3, #4]
 8008a6e:	609a      	str	r2, [r3, #8]
 8008a70:	60da      	str	r2, [r3, #12]
 8008a72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a7c:	d147      	bne.n	8008b0e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a7e:	2300      	movs	r3, #0
 8008a80:	613b      	str	r3, [r7, #16]
 8008a82:	4b25      	ldr	r3, [pc, #148]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	4a24      	ldr	r2, [pc, #144]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008a88:	f043 0301 	orr.w	r3, r3, #1
 8008a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a8e:	4b22      	ldr	r3, [pc, #136]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	613b      	str	r3, [r7, #16]
 8008a98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008aa8:	f107 0314 	add.w	r3, r7, #20
 8008aac:	4619      	mov	r1, r3
 8008aae:	481b      	ldr	r0, [pc, #108]	; (8008b1c <HAL_HCD_MspInit+0xc0>)
 8008ab0:	f7f9 fc58 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ab4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aba:	2302      	movs	r3, #2
 8008abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ac6:	230a      	movs	r3, #10
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aca:	f107 0314 	add.w	r3, r7, #20
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4812      	ldr	r0, [pc, #72]	; (8008b1c <HAL_HCD_MspInit+0xc0>)
 8008ad2:	f7f9 fc47 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	4a0f      	ldr	r2, [pc, #60]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aea:	4a0b      	ldr	r2, [pc, #44]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008af0:	6453      	str	r3, [r2, #68]	; 0x44
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <HAL_HCD_MspInit+0xbc>)
 8008af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008afe:	2200      	movs	r2, #0
 8008b00:	2100      	movs	r1, #0
 8008b02:	2043      	movs	r0, #67	; 0x43
 8008b04:	f7f9 f887 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b08:	2043      	movs	r0, #67	; 0x43
 8008b0a:	f7f9 f8a0 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b0e:	bf00      	nop
 8008b10:	3728      	adds	r7, #40	; 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	40023800 	.word	0x40023800
 8008b1c:	40020000 	.word	0x40020000

08008b20 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe ff6b 	bl	8007a0a <USBH_LL_IncTimer>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe ffa3 	bl	8007a96 <USBH_LL_Connect>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe ffac 	bl	8007ac4 <USBH_LL_Disconnect>
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
 8008b80:	4613      	mov	r3, r2
 8008b82:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe ff5d 	bl	8007a5e <USBH_LL_PortEnabled>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe ff5d 	bl	8007a7a <USBH_LL_PortDisabled>
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d12a      	bne.n	8008c30 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008bda:	4a18      	ldr	r2, [pc, #96]	; (8008c3c <USBH_LL_Init+0x74>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a15      	ldr	r2, [pc, #84]	; (8008c3c <USBH_LL_Init+0x74>)
 8008be6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bea:	4b14      	ldr	r3, [pc, #80]	; (8008c3c <USBH_LL_Init+0x74>)
 8008bec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bf0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008bf2:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <USBH_LL_Init+0x74>)
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008bf8:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <USBH_LL_Init+0x74>)
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <USBH_LL_Init+0x74>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c04:	4b0d      	ldr	r3, [pc, #52]	; (8008c3c <USBH_LL_Init+0x74>)
 8008c06:	2202      	movs	r2, #2
 8008c08:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <USBH_LL_Init+0x74>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c10:	480a      	ldr	r0, [pc, #40]	; (8008c3c <USBH_LL_Init+0x74>)
 8008c12:	f7f9 fd5c 	bl	80026ce <HAL_HCD_Init>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c1c:	f7f7 ffc0 	bl	8000ba0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008c20:	4806      	ldr	r0, [pc, #24]	; (8008c3c <USBH_LL_Init+0x74>)
 8008c22:	f7fa f9bd 	bl	8002fa0 <HAL_HCD_GetCurrentFrame>
 8008c26:	4603      	mov	r3, r0
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fe fede 	bl	80079ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2000069c 	.word	0x2000069c

08008c40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fa f92a 	bl	8002eb0 <HAL_HCD_Start>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f95e 	bl	8008f24 <USBH_Get_USB_Status>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fa f932 	bl	8002ef6 <HAL_HCD_Stop>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 f943 	bl	8008f24 <USBH_Get_USB_Status>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fa f97c 	bl	8002fbc <HAL_HCD_GetCurrentSpeed>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d00c      	beq.n	8008ce4 <USBH_LL_GetSpeed+0x38>
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d80d      	bhi.n	8008cea <USBH_LL_GetSpeed+0x3e>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <USBH_LL_GetSpeed+0x2c>
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d003      	beq.n	8008cde <USBH_LL_GetSpeed+0x32>
 8008cd6:	e008      	b.n	8008cea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
    break;
 8008cdc:	e008      	b.n	8008cf0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce2:	e005      	b.n	8008cf0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce8:	e002      	b.n	8008cf0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008cea:	2301      	movs	r3, #1
 8008cec:	73fb      	strb	r3, [r7, #15]
    break;
 8008cee:	bf00      	nop
  }
  return  speed;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fa f90d 	bl	8002f30 <HAL_HCD_ResetPort>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 f901 	bl	8008f24 <USBH_Get_USB_Status>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fa f915 	bl	8002f76 <HAL_HCD_HC_GetXferCount>
 8008d4c:	4603      	mov	r3, r0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d56:	b590      	push	{r4, r7, lr}
 8008d58:	b089      	sub	sp, #36	; 0x24
 8008d5a:	af04      	add	r7, sp, #16
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	461a      	mov	r2, r3
 8008d64:	4603      	mov	r3, r0
 8008d66:	70fb      	strb	r3, [r7, #3]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70bb      	strb	r3, [r7, #2]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d7e:	787c      	ldrb	r4, [r7, #1]
 8008d80:	78ba      	ldrb	r2, [r7, #2]
 8008d82:	78f9      	ldrb	r1, [r7, #3]
 8008d84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	4623      	mov	r3, r4
 8008d96:	f7f9 fd01 	bl	800279c <HAL_HCD_HC_Init>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 f8bf 	bl	8008f24 <USBH_Get_USB_Status>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd90      	pop	{r4, r7, pc}

08008db4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f9 fd9a 	bl	800290c <HAL_HCD_HC_Halt>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f8a0 	bl	8008f24 <USBH_Get_USB_Status>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008df2:	b590      	push	{r4, r7, lr}
 8008df4:	b089      	sub	sp, #36	; 0x24
 8008df6:	af04      	add	r7, sp, #16
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4603      	mov	r3, r0
 8008e02:	70fb      	strb	r3, [r7, #3]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70bb      	strb	r3, [r7, #2]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e1a:	787c      	ldrb	r4, [r7, #1]
 8008e1c:	78ba      	ldrb	r2, [r7, #2]
 8008e1e:	78f9      	ldrb	r1, [r7, #3]
 8008e20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e28:	9302      	str	r3, [sp, #8]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	4623      	mov	r3, r4
 8008e36:	f7f9 fd8d 	bl	8002954 <HAL_HCD_HC_SubmitRequest>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f86f 	bl	8008f24 <USBH_Get_USB_Status>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd90      	pop	{r4, r7, pc}

08008e54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fa f86e 	bl	8002f4c <HAL_HCD_HC_GetURBState>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d103      	bne.n	8008e98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f872 	bl	8008f7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e98:	20c8      	movs	r0, #200	; 0xc8
 8008e9a:	f7f8 f9b5 	bl	8001208 <HAL_Delay>
  return USBH_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ebe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	1a9b      	subs	r3, r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	3317      	adds	r3, #23
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	68f9      	ldr	r1, [r7, #12]
 8008eda:	4613      	mov	r3, r2
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	333c      	adds	r3, #60	; 0x3c
 8008ee6:	78ba      	ldrb	r2, [r7, #2]
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	e009      	b.n	8008f00 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	333d      	adds	r3, #61	; 0x3d
 8008efc:	78ba      	ldrb	r2, [r7, #2]
 8008efe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7f8 f976 	bl	8001208 <HAL_Delay>
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d817      	bhi.n	8008f68 <USBH_Get_USB_Status+0x44>
 8008f38:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <USBH_Get_USB_Status+0x1c>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f57 	.word	0x08008f57
 8008f48:	08008f5d 	.word	0x08008f5d
 8008f4c:	08008f63 	.word	0x08008f63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
    break;
 8008f54:	e00b      	b.n	8008f6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f56:	2302      	movs	r3, #2
 8008f58:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5a:	e008      	b.n	8008f6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f60:	e005      	b.n	8008f6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f62:	2302      	movs	r3, #2
 8008f64:	73fb      	strb	r3, [r7, #15]
    break;
 8008f66:	e002      	b.n	8008f6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6c:	bf00      	nop
  }
  return usb_status;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
 8008f94:	e001      	b.n	8008f9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f96:	2301      	movs	r3, #1
 8008f98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4803      	ldr	r0, [pc, #12]	; (8008fb0 <MX_DriverVbusFS+0x34>)
 8008fa2:	f7f9 fb7b 	bl	800269c <HAL_GPIO_WritePin>
}
 8008fa6:	bf00      	nop
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	40020800 	.word	0x40020800

08008fb4 <malloc>:
 8008fb4:	4b02      	ldr	r3, [pc, #8]	; (8008fc0 <malloc+0xc>)
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	f000 b82b 	b.w	8009014 <_malloc_r>
 8008fbe:	bf00      	nop
 8008fc0:	20000084 	.word	0x20000084

08008fc4 <free>:
 8008fc4:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <free+0xc>)
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	f000 ba53 	b.w	8009474 <_free_r>
 8008fce:	bf00      	nop
 8008fd0:	20000084 	.word	0x20000084

08008fd4 <sbrk_aligned>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4e0e      	ldr	r6, [pc, #56]	; (8009010 <sbrk_aligned+0x3c>)
 8008fd8:	460c      	mov	r4, r1
 8008fda:	6831      	ldr	r1, [r6, #0]
 8008fdc:	4605      	mov	r5, r0
 8008fde:	b911      	cbnz	r1, 8008fe6 <sbrk_aligned+0x12>
 8008fe0:	f000 f9f8 	bl	80093d4 <_sbrk_r>
 8008fe4:	6030      	str	r0, [r6, #0]
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 f9f3 	bl	80093d4 <_sbrk_r>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d00a      	beq.n	8009008 <sbrk_aligned+0x34>
 8008ff2:	1cc4      	adds	r4, r0, #3
 8008ff4:	f024 0403 	bic.w	r4, r4, #3
 8008ff8:	42a0      	cmp	r0, r4
 8008ffa:	d007      	beq.n	800900c <sbrk_aligned+0x38>
 8008ffc:	1a21      	subs	r1, r4, r0
 8008ffe:	4628      	mov	r0, r5
 8009000:	f000 f9e8 	bl	80093d4 <_sbrk_r>
 8009004:	3001      	adds	r0, #1
 8009006:	d101      	bne.n	800900c <sbrk_aligned+0x38>
 8009008:	f04f 34ff 	mov.w	r4, #4294967295
 800900c:	4620      	mov	r0, r4
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	20000a80 	.word	0x20000a80

08009014 <_malloc_r>:
 8009014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009018:	1ccd      	adds	r5, r1, #3
 800901a:	f025 0503 	bic.w	r5, r5, #3
 800901e:	3508      	adds	r5, #8
 8009020:	2d0c      	cmp	r5, #12
 8009022:	bf38      	it	cc
 8009024:	250c      	movcc	r5, #12
 8009026:	2d00      	cmp	r5, #0
 8009028:	4607      	mov	r7, r0
 800902a:	db01      	blt.n	8009030 <_malloc_r+0x1c>
 800902c:	42a9      	cmp	r1, r5
 800902e:	d905      	bls.n	800903c <_malloc_r+0x28>
 8009030:	230c      	movs	r3, #12
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	2600      	movs	r6, #0
 8009036:	4630      	mov	r0, r6
 8009038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009110 <_malloc_r+0xfc>
 8009040:	f000 f868 	bl	8009114 <__malloc_lock>
 8009044:	f8d8 3000 	ldr.w	r3, [r8]
 8009048:	461c      	mov	r4, r3
 800904a:	bb5c      	cbnz	r4, 80090a4 <_malloc_r+0x90>
 800904c:	4629      	mov	r1, r5
 800904e:	4638      	mov	r0, r7
 8009050:	f7ff ffc0 	bl	8008fd4 <sbrk_aligned>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	4604      	mov	r4, r0
 8009058:	d155      	bne.n	8009106 <_malloc_r+0xf2>
 800905a:	f8d8 4000 	ldr.w	r4, [r8]
 800905e:	4626      	mov	r6, r4
 8009060:	2e00      	cmp	r6, #0
 8009062:	d145      	bne.n	80090f0 <_malloc_r+0xdc>
 8009064:	2c00      	cmp	r4, #0
 8009066:	d048      	beq.n	80090fa <_malloc_r+0xe6>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	4631      	mov	r1, r6
 800906c:	4638      	mov	r0, r7
 800906e:	eb04 0903 	add.w	r9, r4, r3
 8009072:	f000 f9af 	bl	80093d4 <_sbrk_r>
 8009076:	4581      	cmp	r9, r0
 8009078:	d13f      	bne.n	80090fa <_malloc_r+0xe6>
 800907a:	6821      	ldr	r1, [r4, #0]
 800907c:	1a6d      	subs	r5, r5, r1
 800907e:	4629      	mov	r1, r5
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff ffa7 	bl	8008fd4 <sbrk_aligned>
 8009086:	3001      	adds	r0, #1
 8009088:	d037      	beq.n	80090fa <_malloc_r+0xe6>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	442b      	add	r3, r5
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	f8d8 3000 	ldr.w	r3, [r8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d038      	beq.n	800910a <_malloc_r+0xf6>
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	42a2      	cmp	r2, r4
 800909c:	d12b      	bne.n	80090f6 <_malloc_r+0xe2>
 800909e:	2200      	movs	r2, #0
 80090a0:	605a      	str	r2, [r3, #4]
 80090a2:	e00f      	b.n	80090c4 <_malloc_r+0xb0>
 80090a4:	6822      	ldr	r2, [r4, #0]
 80090a6:	1b52      	subs	r2, r2, r5
 80090a8:	d41f      	bmi.n	80090ea <_malloc_r+0xd6>
 80090aa:	2a0b      	cmp	r2, #11
 80090ac:	d917      	bls.n	80090de <_malloc_r+0xca>
 80090ae:	1961      	adds	r1, r4, r5
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	6025      	str	r5, [r4, #0]
 80090b4:	bf18      	it	ne
 80090b6:	6059      	strne	r1, [r3, #4]
 80090b8:	6863      	ldr	r3, [r4, #4]
 80090ba:	bf08      	it	eq
 80090bc:	f8c8 1000 	streq.w	r1, [r8]
 80090c0:	5162      	str	r2, [r4, r5]
 80090c2:	604b      	str	r3, [r1, #4]
 80090c4:	4638      	mov	r0, r7
 80090c6:	f104 060b 	add.w	r6, r4, #11
 80090ca:	f000 f829 	bl	8009120 <__malloc_unlock>
 80090ce:	f026 0607 	bic.w	r6, r6, #7
 80090d2:	1d23      	adds	r3, r4, #4
 80090d4:	1af2      	subs	r2, r6, r3
 80090d6:	d0ae      	beq.n	8009036 <_malloc_r+0x22>
 80090d8:	1b9b      	subs	r3, r3, r6
 80090da:	50a3      	str	r3, [r4, r2]
 80090dc:	e7ab      	b.n	8009036 <_malloc_r+0x22>
 80090de:	42a3      	cmp	r3, r4
 80090e0:	6862      	ldr	r2, [r4, #4]
 80090e2:	d1dd      	bne.n	80090a0 <_malloc_r+0x8c>
 80090e4:	f8c8 2000 	str.w	r2, [r8]
 80090e8:	e7ec      	b.n	80090c4 <_malloc_r+0xb0>
 80090ea:	4623      	mov	r3, r4
 80090ec:	6864      	ldr	r4, [r4, #4]
 80090ee:	e7ac      	b.n	800904a <_malloc_r+0x36>
 80090f0:	4634      	mov	r4, r6
 80090f2:	6876      	ldr	r6, [r6, #4]
 80090f4:	e7b4      	b.n	8009060 <_malloc_r+0x4c>
 80090f6:	4613      	mov	r3, r2
 80090f8:	e7cc      	b.n	8009094 <_malloc_r+0x80>
 80090fa:	230c      	movs	r3, #12
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4638      	mov	r0, r7
 8009100:	f000 f80e 	bl	8009120 <__malloc_unlock>
 8009104:	e797      	b.n	8009036 <_malloc_r+0x22>
 8009106:	6025      	str	r5, [r4, #0]
 8009108:	e7dc      	b.n	80090c4 <_malloc_r+0xb0>
 800910a:	605b      	str	r3, [r3, #4]
 800910c:	deff      	udf	#255	; 0xff
 800910e:	bf00      	nop
 8009110:	20000a7c 	.word	0x20000a7c

08009114 <__malloc_lock>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__malloc_lock+0x8>)
 8009116:	f000 b9aa 	b.w	800946e <__retarget_lock_acquire_recursive>
 800911a:	bf00      	nop
 800911c:	20000bc4 	.word	0x20000bc4

08009120 <__malloc_unlock>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__malloc_unlock+0x8>)
 8009122:	f000 b9a5 	b.w	8009470 <__retarget_lock_release_recursive>
 8009126:	bf00      	nop
 8009128:	20000bc4 	.word	0x20000bc4

0800912c <std>:
 800912c:	2300      	movs	r3, #0
 800912e:	b510      	push	{r4, lr}
 8009130:	4604      	mov	r4, r0
 8009132:	e9c0 3300 	strd	r3, r3, [r0]
 8009136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800913a:	6083      	str	r3, [r0, #8]
 800913c:	8181      	strh	r1, [r0, #12]
 800913e:	6643      	str	r3, [r0, #100]	; 0x64
 8009140:	81c2      	strh	r2, [r0, #14]
 8009142:	6183      	str	r3, [r0, #24]
 8009144:	4619      	mov	r1, r3
 8009146:	2208      	movs	r2, #8
 8009148:	305c      	adds	r0, #92	; 0x5c
 800914a:	f000 f906 	bl	800935a <memset>
 800914e:	4b0d      	ldr	r3, [pc, #52]	; (8009184 <std+0x58>)
 8009150:	6263      	str	r3, [r4, #36]	; 0x24
 8009152:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <std+0x5c>)
 8009154:	62a3      	str	r3, [r4, #40]	; 0x28
 8009156:	4b0d      	ldr	r3, [pc, #52]	; (800918c <std+0x60>)
 8009158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <std+0x64>)
 800915c:	6323      	str	r3, [r4, #48]	; 0x30
 800915e:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <std+0x68>)
 8009160:	6224      	str	r4, [r4, #32]
 8009162:	429c      	cmp	r4, r3
 8009164:	d006      	beq.n	8009174 <std+0x48>
 8009166:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800916a:	4294      	cmp	r4, r2
 800916c:	d002      	beq.n	8009174 <std+0x48>
 800916e:	33d0      	adds	r3, #208	; 0xd0
 8009170:	429c      	cmp	r4, r3
 8009172:	d105      	bne.n	8009180 <std+0x54>
 8009174:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800917c:	f000 b976 	b.w	800946c <__retarget_lock_init_recursive>
 8009180:	bd10      	pop	{r4, pc}
 8009182:	bf00      	nop
 8009184:	080092d5 	.word	0x080092d5
 8009188:	080092f7 	.word	0x080092f7
 800918c:	0800932f 	.word	0x0800932f
 8009190:	08009353 	.word	0x08009353
 8009194:	20000a84 	.word	0x20000a84

08009198 <stdio_exit_handler>:
 8009198:	4a02      	ldr	r2, [pc, #8]	; (80091a4 <stdio_exit_handler+0xc>)
 800919a:	4903      	ldr	r1, [pc, #12]	; (80091a8 <stdio_exit_handler+0x10>)
 800919c:	4803      	ldr	r0, [pc, #12]	; (80091ac <stdio_exit_handler+0x14>)
 800919e:	f000 b869 	b.w	8009274 <_fwalk_sglue>
 80091a2:	bf00      	nop
 80091a4:	2000002c 	.word	0x2000002c
 80091a8:	08009bc1 	.word	0x08009bc1
 80091ac:	20000038 	.word	0x20000038

080091b0 <cleanup_stdio>:
 80091b0:	6841      	ldr	r1, [r0, #4]
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <cleanup_stdio+0x34>)
 80091b4:	4299      	cmp	r1, r3
 80091b6:	b510      	push	{r4, lr}
 80091b8:	4604      	mov	r4, r0
 80091ba:	d001      	beq.n	80091c0 <cleanup_stdio+0x10>
 80091bc:	f000 fd00 	bl	8009bc0 <_fflush_r>
 80091c0:	68a1      	ldr	r1, [r4, #8]
 80091c2:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <cleanup_stdio+0x38>)
 80091c4:	4299      	cmp	r1, r3
 80091c6:	d002      	beq.n	80091ce <cleanup_stdio+0x1e>
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fcf9 	bl	8009bc0 <_fflush_r>
 80091ce:	68e1      	ldr	r1, [r4, #12]
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <cleanup_stdio+0x3c>)
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d004      	beq.n	80091e0 <cleanup_stdio+0x30>
 80091d6:	4620      	mov	r0, r4
 80091d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091dc:	f000 bcf0 	b.w	8009bc0 <_fflush_r>
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	bf00      	nop
 80091e4:	20000a84 	.word	0x20000a84
 80091e8:	20000aec 	.word	0x20000aec
 80091ec:	20000b54 	.word	0x20000b54

080091f0 <global_stdio_init.part.0>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <global_stdio_init.part.0+0x30>)
 80091f4:	4c0b      	ldr	r4, [pc, #44]	; (8009224 <global_stdio_init.part.0+0x34>)
 80091f6:	4a0c      	ldr	r2, [pc, #48]	; (8009228 <global_stdio_init.part.0+0x38>)
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	4620      	mov	r0, r4
 80091fc:	2200      	movs	r2, #0
 80091fe:	2104      	movs	r1, #4
 8009200:	f7ff ff94 	bl	800912c <std>
 8009204:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009208:	2201      	movs	r2, #1
 800920a:	2109      	movs	r1, #9
 800920c:	f7ff ff8e 	bl	800912c <std>
 8009210:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009214:	2202      	movs	r2, #2
 8009216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800921a:	2112      	movs	r1, #18
 800921c:	f7ff bf86 	b.w	800912c <std>
 8009220:	20000bbc 	.word	0x20000bbc
 8009224:	20000a84 	.word	0x20000a84
 8009228:	08009199 	.word	0x08009199

0800922c <__sfp_lock_acquire>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sfp_lock_acquire+0x8>)
 800922e:	f000 b91e 	b.w	800946e <__retarget_lock_acquire_recursive>
 8009232:	bf00      	nop
 8009234:	20000bc5 	.word	0x20000bc5

08009238 <__sfp_lock_release>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__sfp_lock_release+0x8>)
 800923a:	f000 b919 	b.w	8009470 <__retarget_lock_release_recursive>
 800923e:	bf00      	nop
 8009240:	20000bc5 	.word	0x20000bc5

08009244 <__sinit>:
 8009244:	b510      	push	{r4, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	f7ff fff0 	bl	800922c <__sfp_lock_acquire>
 800924c:	6a23      	ldr	r3, [r4, #32]
 800924e:	b11b      	cbz	r3, 8009258 <__sinit+0x14>
 8009250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009254:	f7ff bff0 	b.w	8009238 <__sfp_lock_release>
 8009258:	4b04      	ldr	r3, [pc, #16]	; (800926c <__sinit+0x28>)
 800925a:	6223      	str	r3, [r4, #32]
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <__sinit+0x2c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1f5      	bne.n	8009250 <__sinit+0xc>
 8009264:	f7ff ffc4 	bl	80091f0 <global_stdio_init.part.0>
 8009268:	e7f2      	b.n	8009250 <__sinit+0xc>
 800926a:	bf00      	nop
 800926c:	080091b1 	.word	0x080091b1
 8009270:	20000bbc 	.word	0x20000bbc

08009274 <_fwalk_sglue>:
 8009274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009278:	4607      	mov	r7, r0
 800927a:	4688      	mov	r8, r1
 800927c:	4614      	mov	r4, r2
 800927e:	2600      	movs	r6, #0
 8009280:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009284:	f1b9 0901 	subs.w	r9, r9, #1
 8009288:	d505      	bpl.n	8009296 <_fwalk_sglue+0x22>
 800928a:	6824      	ldr	r4, [r4, #0]
 800928c:	2c00      	cmp	r4, #0
 800928e:	d1f7      	bne.n	8009280 <_fwalk_sglue+0xc>
 8009290:	4630      	mov	r0, r6
 8009292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d907      	bls.n	80092ac <_fwalk_sglue+0x38>
 800929c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092a0:	3301      	adds	r3, #1
 80092a2:	d003      	beq.n	80092ac <_fwalk_sglue+0x38>
 80092a4:	4629      	mov	r1, r5
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c0      	blx	r8
 80092aa:	4306      	orrs	r6, r0
 80092ac:	3568      	adds	r5, #104	; 0x68
 80092ae:	e7e9      	b.n	8009284 <_fwalk_sglue+0x10>

080092b0 <iprintf>:
 80092b0:	b40f      	push	{r0, r1, r2, r3}
 80092b2:	b507      	push	{r0, r1, r2, lr}
 80092b4:	4906      	ldr	r1, [pc, #24]	; (80092d0 <iprintf+0x20>)
 80092b6:	ab04      	add	r3, sp, #16
 80092b8:	6808      	ldr	r0, [r1, #0]
 80092ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80092be:	6881      	ldr	r1, [r0, #8]
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	f000 f94d 	bl	8009560 <_vfiprintf_r>
 80092c6:	b003      	add	sp, #12
 80092c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092cc:	b004      	add	sp, #16
 80092ce:	4770      	bx	lr
 80092d0:	20000084 	.word	0x20000084

080092d4 <__sread>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	460c      	mov	r4, r1
 80092d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092dc:	f000 f868 	bl	80093b0 <_read_r>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	bfab      	itete	ge
 80092e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092e6:	89a3      	ldrhlt	r3, [r4, #12]
 80092e8:	181b      	addge	r3, r3, r0
 80092ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092ee:	bfac      	ite	ge
 80092f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80092f2:	81a3      	strhlt	r3, [r4, #12]
 80092f4:	bd10      	pop	{r4, pc}

080092f6 <__swrite>:
 80092f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fa:	461f      	mov	r7, r3
 80092fc:	898b      	ldrh	r3, [r1, #12]
 80092fe:	05db      	lsls	r3, r3, #23
 8009300:	4605      	mov	r5, r0
 8009302:	460c      	mov	r4, r1
 8009304:	4616      	mov	r6, r2
 8009306:	d505      	bpl.n	8009314 <__swrite+0x1e>
 8009308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800930c:	2302      	movs	r3, #2
 800930e:	2200      	movs	r2, #0
 8009310:	f000 f83c 	bl	800938c <_lseek_r>
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800931a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800931e:	81a3      	strh	r3, [r4, #12]
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	4628      	mov	r0, r5
 8009326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	f000 b863 	b.w	80093f4 <_write_r>

0800932e <__sseek>:
 800932e:	b510      	push	{r4, lr}
 8009330:	460c      	mov	r4, r1
 8009332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009336:	f000 f829 	bl	800938c <_lseek_r>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	bf15      	itete	ne
 8009340:	6560      	strne	r0, [r4, #84]	; 0x54
 8009342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800934a:	81a3      	strheq	r3, [r4, #12]
 800934c:	bf18      	it	ne
 800934e:	81a3      	strhne	r3, [r4, #12]
 8009350:	bd10      	pop	{r4, pc}

08009352 <__sclose>:
 8009352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009356:	f000 b809 	b.w	800936c <_close_r>

0800935a <memset>:
 800935a:	4402      	add	r2, r0
 800935c:	4603      	mov	r3, r0
 800935e:	4293      	cmp	r3, r2
 8009360:	d100      	bne.n	8009364 <memset+0xa>
 8009362:	4770      	bx	lr
 8009364:	f803 1b01 	strb.w	r1, [r3], #1
 8009368:	e7f9      	b.n	800935e <memset+0x4>
	...

0800936c <_close_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4d06      	ldr	r5, [pc, #24]	; (8009388 <_close_r+0x1c>)
 8009370:	2300      	movs	r3, #0
 8009372:	4604      	mov	r4, r0
 8009374:	4608      	mov	r0, r1
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	f7f7 fe2d 	bl	8000fd6 <_close>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_close_r+0x1a>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_close_r+0x1a>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	20000bc0 	.word	0x20000bc0

0800938c <_lseek_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d07      	ldr	r5, [pc, #28]	; (80093ac <_lseek_r+0x20>)
 8009390:	4604      	mov	r4, r0
 8009392:	4608      	mov	r0, r1
 8009394:	4611      	mov	r1, r2
 8009396:	2200      	movs	r2, #0
 8009398:	602a      	str	r2, [r5, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	f7f7 fe42 	bl	8001024 <_lseek>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_lseek_r+0x1e>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_lseek_r+0x1e>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	20000bc0 	.word	0x20000bc0

080093b0 <_read_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d07      	ldr	r5, [pc, #28]	; (80093d0 <_read_r+0x20>)
 80093b4:	4604      	mov	r4, r0
 80093b6:	4608      	mov	r0, r1
 80093b8:	4611      	mov	r1, r2
 80093ba:	2200      	movs	r2, #0
 80093bc:	602a      	str	r2, [r5, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	f7f7 fdd0 	bl	8000f64 <_read>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d102      	bne.n	80093ce <_read_r+0x1e>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	b103      	cbz	r3, 80093ce <_read_r+0x1e>
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	20000bc0 	.word	0x20000bc0

080093d4 <_sbrk_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4d06      	ldr	r5, [pc, #24]	; (80093f0 <_sbrk_r+0x1c>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f7 fe2e 	bl	8001040 <_sbrk>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_sbrk_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_sbrk_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	20000bc0 	.word	0x20000bc0

080093f4 <_write_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d07      	ldr	r5, [pc, #28]	; (8009414 <_write_r+0x20>)
 80093f8:	4604      	mov	r4, r0
 80093fa:	4608      	mov	r0, r1
 80093fc:	4611      	mov	r1, r2
 80093fe:	2200      	movs	r2, #0
 8009400:	602a      	str	r2, [r5, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	f7f7 fdcb 	bl	8000f9e <_write>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_write_r+0x1e>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_write_r+0x1e>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	20000bc0 	.word	0x20000bc0

08009418 <__errno>:
 8009418:	4b01      	ldr	r3, [pc, #4]	; (8009420 <__errno+0x8>)
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20000084 	.word	0x20000084

08009424 <__libc_init_array>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	4d0d      	ldr	r5, [pc, #52]	; (800945c <__libc_init_array+0x38>)
 8009428:	4c0d      	ldr	r4, [pc, #52]	; (8009460 <__libc_init_array+0x3c>)
 800942a:	1b64      	subs	r4, r4, r5
 800942c:	10a4      	asrs	r4, r4, #2
 800942e:	2600      	movs	r6, #0
 8009430:	42a6      	cmp	r6, r4
 8009432:	d109      	bne.n	8009448 <__libc_init_array+0x24>
 8009434:	4d0b      	ldr	r5, [pc, #44]	; (8009464 <__libc_init_array+0x40>)
 8009436:	4c0c      	ldr	r4, [pc, #48]	; (8009468 <__libc_init_array+0x44>)
 8009438:	f000 fd04 	bl	8009e44 <_init>
 800943c:	1b64      	subs	r4, r4, r5
 800943e:	10a4      	asrs	r4, r4, #2
 8009440:	2600      	movs	r6, #0
 8009442:	42a6      	cmp	r6, r4
 8009444:	d105      	bne.n	8009452 <__libc_init_array+0x2e>
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	f855 3b04 	ldr.w	r3, [r5], #4
 800944c:	4798      	blx	r3
 800944e:	3601      	adds	r6, #1
 8009450:	e7ee      	b.n	8009430 <__libc_init_array+0xc>
 8009452:	f855 3b04 	ldr.w	r3, [r5], #4
 8009456:	4798      	blx	r3
 8009458:	3601      	adds	r6, #1
 800945a:	e7f2      	b.n	8009442 <__libc_init_array+0x1e>
 800945c:	08009ed0 	.word	0x08009ed0
 8009460:	08009ed0 	.word	0x08009ed0
 8009464:	08009ed0 	.word	0x08009ed0
 8009468:	08009ed4 	.word	0x08009ed4

0800946c <__retarget_lock_init_recursive>:
 800946c:	4770      	bx	lr

0800946e <__retarget_lock_acquire_recursive>:
 800946e:	4770      	bx	lr

08009470 <__retarget_lock_release_recursive>:
 8009470:	4770      	bx	lr
	...

08009474 <_free_r>:
 8009474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009476:	2900      	cmp	r1, #0
 8009478:	d044      	beq.n	8009504 <_free_r+0x90>
 800947a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947e:	9001      	str	r0, [sp, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f1a1 0404 	sub.w	r4, r1, #4
 8009486:	bfb8      	it	lt
 8009488:	18e4      	addlt	r4, r4, r3
 800948a:	f7ff fe43 	bl	8009114 <__malloc_lock>
 800948e:	4a1e      	ldr	r2, [pc, #120]	; (8009508 <_free_r+0x94>)
 8009490:	9801      	ldr	r0, [sp, #4]
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	b933      	cbnz	r3, 80094a4 <_free_r+0x30>
 8009496:	6063      	str	r3, [r4, #4]
 8009498:	6014      	str	r4, [r2, #0]
 800949a:	b003      	add	sp, #12
 800949c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094a0:	f7ff be3e 	b.w	8009120 <__malloc_unlock>
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	d908      	bls.n	80094ba <_free_r+0x46>
 80094a8:	6825      	ldr	r5, [r4, #0]
 80094aa:	1961      	adds	r1, r4, r5
 80094ac:	428b      	cmp	r3, r1
 80094ae:	bf01      	itttt	eq
 80094b0:	6819      	ldreq	r1, [r3, #0]
 80094b2:	685b      	ldreq	r3, [r3, #4]
 80094b4:	1949      	addeq	r1, r1, r5
 80094b6:	6021      	streq	r1, [r4, #0]
 80094b8:	e7ed      	b.n	8009496 <_free_r+0x22>
 80094ba:	461a      	mov	r2, r3
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	b10b      	cbz	r3, 80094c4 <_free_r+0x50>
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d9fa      	bls.n	80094ba <_free_r+0x46>
 80094c4:	6811      	ldr	r1, [r2, #0]
 80094c6:	1855      	adds	r5, r2, r1
 80094c8:	42a5      	cmp	r5, r4
 80094ca:	d10b      	bne.n	80094e4 <_free_r+0x70>
 80094cc:	6824      	ldr	r4, [r4, #0]
 80094ce:	4421      	add	r1, r4
 80094d0:	1854      	adds	r4, r2, r1
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	d1e0      	bne.n	800949a <_free_r+0x26>
 80094d8:	681c      	ldr	r4, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	6053      	str	r3, [r2, #4]
 80094de:	440c      	add	r4, r1
 80094e0:	6014      	str	r4, [r2, #0]
 80094e2:	e7da      	b.n	800949a <_free_r+0x26>
 80094e4:	d902      	bls.n	80094ec <_free_r+0x78>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6003      	str	r3, [r0, #0]
 80094ea:	e7d6      	b.n	800949a <_free_r+0x26>
 80094ec:	6825      	ldr	r5, [r4, #0]
 80094ee:	1961      	adds	r1, r4, r5
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf04      	itt	eq
 80094f4:	6819      	ldreq	r1, [r3, #0]
 80094f6:	685b      	ldreq	r3, [r3, #4]
 80094f8:	6063      	str	r3, [r4, #4]
 80094fa:	bf04      	itt	eq
 80094fc:	1949      	addeq	r1, r1, r5
 80094fe:	6021      	streq	r1, [r4, #0]
 8009500:	6054      	str	r4, [r2, #4]
 8009502:	e7ca      	b.n	800949a <_free_r+0x26>
 8009504:	b003      	add	sp, #12
 8009506:	bd30      	pop	{r4, r5, pc}
 8009508:	20000a7c 	.word	0x20000a7c

0800950c <__sfputc_r>:
 800950c:	6893      	ldr	r3, [r2, #8]
 800950e:	3b01      	subs	r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	b410      	push	{r4}
 8009514:	6093      	str	r3, [r2, #8]
 8009516:	da08      	bge.n	800952a <__sfputc_r+0x1e>
 8009518:	6994      	ldr	r4, [r2, #24]
 800951a:	42a3      	cmp	r3, r4
 800951c:	db01      	blt.n	8009522 <__sfputc_r+0x16>
 800951e:	290a      	cmp	r1, #10
 8009520:	d103      	bne.n	800952a <__sfputc_r+0x1e>
 8009522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009526:	f000 bb73 	b.w	8009c10 <__swbuf_r>
 800952a:	6813      	ldr	r3, [r2, #0]
 800952c:	1c58      	adds	r0, r3, #1
 800952e:	6010      	str	r0, [r2, #0]
 8009530:	7019      	strb	r1, [r3, #0]
 8009532:	4608      	mov	r0, r1
 8009534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009538:	4770      	bx	lr

0800953a <__sfputs_r>:
 800953a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	4614      	mov	r4, r2
 8009542:	18d5      	adds	r5, r2, r3
 8009544:	42ac      	cmp	r4, r5
 8009546:	d101      	bne.n	800954c <__sfputs_r+0x12>
 8009548:	2000      	movs	r0, #0
 800954a:	e007      	b.n	800955c <__sfputs_r+0x22>
 800954c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009550:	463a      	mov	r2, r7
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff ffda 	bl	800950c <__sfputc_r>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d1f3      	bne.n	8009544 <__sfputs_r+0xa>
 800955c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009560 <_vfiprintf_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	460d      	mov	r5, r1
 8009566:	b09d      	sub	sp, #116	; 0x74
 8009568:	4614      	mov	r4, r2
 800956a:	4698      	mov	r8, r3
 800956c:	4606      	mov	r6, r0
 800956e:	b118      	cbz	r0, 8009578 <_vfiprintf_r+0x18>
 8009570:	6a03      	ldr	r3, [r0, #32]
 8009572:	b90b      	cbnz	r3, 8009578 <_vfiprintf_r+0x18>
 8009574:	f7ff fe66 	bl	8009244 <__sinit>
 8009578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d405      	bmi.n	800958a <_vfiprintf_r+0x2a>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	059a      	lsls	r2, r3, #22
 8009582:	d402      	bmi.n	800958a <_vfiprintf_r+0x2a>
 8009584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009586:	f7ff ff72 	bl	800946e <__retarget_lock_acquire_recursive>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	071b      	lsls	r3, r3, #28
 800958e:	d501      	bpl.n	8009594 <_vfiprintf_r+0x34>
 8009590:	692b      	ldr	r3, [r5, #16]
 8009592:	b99b      	cbnz	r3, 80095bc <_vfiprintf_r+0x5c>
 8009594:	4629      	mov	r1, r5
 8009596:	4630      	mov	r0, r6
 8009598:	f000 fb78 	bl	8009c8c <__swsetup_r>
 800959c:	b170      	cbz	r0, 80095bc <_vfiprintf_r+0x5c>
 800959e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095a0:	07dc      	lsls	r4, r3, #31
 80095a2:	d504      	bpl.n	80095ae <_vfiprintf_r+0x4e>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b01d      	add	sp, #116	; 0x74
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	89ab      	ldrh	r3, [r5, #12]
 80095b0:	0598      	lsls	r0, r3, #22
 80095b2:	d4f7      	bmi.n	80095a4 <_vfiprintf_r+0x44>
 80095b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b6:	f7ff ff5b 	bl	8009470 <__retarget_lock_release_recursive>
 80095ba:	e7f3      	b.n	80095a4 <_vfiprintf_r+0x44>
 80095bc:	2300      	movs	r3, #0
 80095be:	9309      	str	r3, [sp, #36]	; 0x24
 80095c0:	2320      	movs	r3, #32
 80095c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ca:	2330      	movs	r3, #48	; 0x30
 80095cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009780 <_vfiprintf_r+0x220>
 80095d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d4:	f04f 0901 	mov.w	r9, #1
 80095d8:	4623      	mov	r3, r4
 80095da:	469a      	mov	sl, r3
 80095dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095e0:	b10a      	cbz	r2, 80095e6 <_vfiprintf_r+0x86>
 80095e2:	2a25      	cmp	r2, #37	; 0x25
 80095e4:	d1f9      	bne.n	80095da <_vfiprintf_r+0x7a>
 80095e6:	ebba 0b04 	subs.w	fp, sl, r4
 80095ea:	d00b      	beq.n	8009604 <_vfiprintf_r+0xa4>
 80095ec:	465b      	mov	r3, fp
 80095ee:	4622      	mov	r2, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7ff ffa1 	bl	800953a <__sfputs_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	f000 80a9 	beq.w	8009750 <_vfiprintf_r+0x1f0>
 80095fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009600:	445a      	add	r2, fp
 8009602:	9209      	str	r2, [sp, #36]	; 0x24
 8009604:	f89a 3000 	ldrb.w	r3, [sl]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80a1 	beq.w	8009750 <_vfiprintf_r+0x1f0>
 800960e:	2300      	movs	r3, #0
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009618:	f10a 0a01 	add.w	sl, sl, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	9307      	str	r3, [sp, #28]
 8009620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009624:	931a      	str	r3, [sp, #104]	; 0x68
 8009626:	4654      	mov	r4, sl
 8009628:	2205      	movs	r2, #5
 800962a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962e:	4854      	ldr	r0, [pc, #336]	; (8009780 <_vfiprintf_r+0x220>)
 8009630:	f7f6 fdce 	bl	80001d0 <memchr>
 8009634:	9a04      	ldr	r2, [sp, #16]
 8009636:	b9d8      	cbnz	r0, 8009670 <_vfiprintf_r+0x110>
 8009638:	06d1      	lsls	r1, r2, #27
 800963a:	bf44      	itt	mi
 800963c:	2320      	movmi	r3, #32
 800963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009642:	0713      	lsls	r3, r2, #28
 8009644:	bf44      	itt	mi
 8009646:	232b      	movmi	r3, #43	; 0x2b
 8009648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964c:	f89a 3000 	ldrb.w	r3, [sl]
 8009650:	2b2a      	cmp	r3, #42	; 0x2a
 8009652:	d015      	beq.n	8009680 <_vfiprintf_r+0x120>
 8009654:	9a07      	ldr	r2, [sp, #28]
 8009656:	4654      	mov	r4, sl
 8009658:	2000      	movs	r0, #0
 800965a:	f04f 0c0a 	mov.w	ip, #10
 800965e:	4621      	mov	r1, r4
 8009660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009664:	3b30      	subs	r3, #48	; 0x30
 8009666:	2b09      	cmp	r3, #9
 8009668:	d94d      	bls.n	8009706 <_vfiprintf_r+0x1a6>
 800966a:	b1b0      	cbz	r0, 800969a <_vfiprintf_r+0x13a>
 800966c:	9207      	str	r2, [sp, #28]
 800966e:	e014      	b.n	800969a <_vfiprintf_r+0x13a>
 8009670:	eba0 0308 	sub.w	r3, r0, r8
 8009674:	fa09 f303 	lsl.w	r3, r9, r3
 8009678:	4313      	orrs	r3, r2
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	46a2      	mov	sl, r4
 800967e:	e7d2      	b.n	8009626 <_vfiprintf_r+0xc6>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d19      	adds	r1, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9103      	str	r1, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfbb      	ittet	lt
 800968c:	425b      	neglt	r3, r3
 800968e:	f042 0202 	orrlt.w	r2, r2, #2
 8009692:	9307      	strge	r3, [sp, #28]
 8009694:	9307      	strlt	r3, [sp, #28]
 8009696:	bfb8      	it	lt
 8009698:	9204      	strlt	r2, [sp, #16]
 800969a:	7823      	ldrb	r3, [r4, #0]
 800969c:	2b2e      	cmp	r3, #46	; 0x2e
 800969e:	d10c      	bne.n	80096ba <_vfiprintf_r+0x15a>
 80096a0:	7863      	ldrb	r3, [r4, #1]
 80096a2:	2b2a      	cmp	r3, #42	; 0x2a
 80096a4:	d134      	bne.n	8009710 <_vfiprintf_r+0x1b0>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9203      	str	r2, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfb8      	it	lt
 80096b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b6:	3402      	adds	r4, #2
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009790 <_vfiprintf_r+0x230>
 80096be:	7821      	ldrb	r1, [r4, #0]
 80096c0:	2203      	movs	r2, #3
 80096c2:	4650      	mov	r0, sl
 80096c4:	f7f6 fd84 	bl	80001d0 <memchr>
 80096c8:	b138      	cbz	r0, 80096da <_vfiprintf_r+0x17a>
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	eba0 000a 	sub.w	r0, r0, sl
 80096d0:	2240      	movs	r2, #64	; 0x40
 80096d2:	4082      	lsls	r2, r0
 80096d4:	4313      	orrs	r3, r2
 80096d6:	3401      	adds	r4, #1
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096de:	4829      	ldr	r0, [pc, #164]	; (8009784 <_vfiprintf_r+0x224>)
 80096e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e4:	2206      	movs	r2, #6
 80096e6:	f7f6 fd73 	bl	80001d0 <memchr>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d03f      	beq.n	800976e <_vfiprintf_r+0x20e>
 80096ee:	4b26      	ldr	r3, [pc, #152]	; (8009788 <_vfiprintf_r+0x228>)
 80096f0:	bb1b      	cbnz	r3, 800973a <_vfiprintf_r+0x1da>
 80096f2:	9b03      	ldr	r3, [sp, #12]
 80096f4:	3307      	adds	r3, #7
 80096f6:	f023 0307 	bic.w	r3, r3, #7
 80096fa:	3308      	adds	r3, #8
 80096fc:	9303      	str	r3, [sp, #12]
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	443b      	add	r3, r7
 8009702:	9309      	str	r3, [sp, #36]	; 0x24
 8009704:	e768      	b.n	80095d8 <_vfiprintf_r+0x78>
 8009706:	fb0c 3202 	mla	r2, ip, r2, r3
 800970a:	460c      	mov	r4, r1
 800970c:	2001      	movs	r0, #1
 800970e:	e7a6      	b.n	800965e <_vfiprintf_r+0xfe>
 8009710:	2300      	movs	r3, #0
 8009712:	3401      	adds	r4, #1
 8009714:	9305      	str	r3, [sp, #20]
 8009716:	4619      	mov	r1, r3
 8009718:	f04f 0c0a 	mov.w	ip, #10
 800971c:	4620      	mov	r0, r4
 800971e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009722:	3a30      	subs	r2, #48	; 0x30
 8009724:	2a09      	cmp	r2, #9
 8009726:	d903      	bls.n	8009730 <_vfiprintf_r+0x1d0>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0c6      	beq.n	80096ba <_vfiprintf_r+0x15a>
 800972c:	9105      	str	r1, [sp, #20]
 800972e:	e7c4      	b.n	80096ba <_vfiprintf_r+0x15a>
 8009730:	fb0c 2101 	mla	r1, ip, r1, r2
 8009734:	4604      	mov	r4, r0
 8009736:	2301      	movs	r3, #1
 8009738:	e7f0      	b.n	800971c <_vfiprintf_r+0x1bc>
 800973a:	ab03      	add	r3, sp, #12
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	462a      	mov	r2, r5
 8009740:	4b12      	ldr	r3, [pc, #72]	; (800978c <_vfiprintf_r+0x22c>)
 8009742:	a904      	add	r1, sp, #16
 8009744:	4630      	mov	r0, r6
 8009746:	f3af 8000 	nop.w
 800974a:	4607      	mov	r7, r0
 800974c:	1c78      	adds	r0, r7, #1
 800974e:	d1d6      	bne.n	80096fe <_vfiprintf_r+0x19e>
 8009750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009752:	07d9      	lsls	r1, r3, #31
 8009754:	d405      	bmi.n	8009762 <_vfiprintf_r+0x202>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	059a      	lsls	r2, r3, #22
 800975a:	d402      	bmi.n	8009762 <_vfiprintf_r+0x202>
 800975c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800975e:	f7ff fe87 	bl	8009470 <__retarget_lock_release_recursive>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	065b      	lsls	r3, r3, #25
 8009766:	f53f af1d 	bmi.w	80095a4 <_vfiprintf_r+0x44>
 800976a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800976c:	e71c      	b.n	80095a8 <_vfiprintf_r+0x48>
 800976e:	ab03      	add	r3, sp, #12
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	462a      	mov	r2, r5
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <_vfiprintf_r+0x22c>)
 8009776:	a904      	add	r1, sp, #16
 8009778:	4630      	mov	r0, r6
 800977a:	f000 f879 	bl	8009870 <_printf_i>
 800977e:	e7e4      	b.n	800974a <_vfiprintf_r+0x1ea>
 8009780:	08009e94 	.word	0x08009e94
 8009784:	08009e9e 	.word	0x08009e9e
 8009788:	00000000 	.word	0x00000000
 800978c:	0800953b 	.word	0x0800953b
 8009790:	08009e9a 	.word	0x08009e9a

08009794 <_printf_common>:
 8009794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	4616      	mov	r6, r2
 800979a:	4699      	mov	r9, r3
 800979c:	688a      	ldr	r2, [r1, #8]
 800979e:	690b      	ldr	r3, [r1, #16]
 80097a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097a4:	4293      	cmp	r3, r2
 80097a6:	bfb8      	it	lt
 80097a8:	4613      	movlt	r3, r2
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097b0:	4607      	mov	r7, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	b10a      	cbz	r2, 80097ba <_printf_common+0x26>
 80097b6:	3301      	adds	r3, #1
 80097b8:	6033      	str	r3, [r6, #0]
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	0699      	lsls	r1, r3, #26
 80097be:	bf42      	ittt	mi
 80097c0:	6833      	ldrmi	r3, [r6, #0]
 80097c2:	3302      	addmi	r3, #2
 80097c4:	6033      	strmi	r3, [r6, #0]
 80097c6:	6825      	ldr	r5, [r4, #0]
 80097c8:	f015 0506 	ands.w	r5, r5, #6
 80097cc:	d106      	bne.n	80097dc <_printf_common+0x48>
 80097ce:	f104 0a19 	add.w	sl, r4, #25
 80097d2:	68e3      	ldr	r3, [r4, #12]
 80097d4:	6832      	ldr	r2, [r6, #0]
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	42ab      	cmp	r3, r5
 80097da:	dc26      	bgt.n	800982a <_printf_common+0x96>
 80097dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097e0:	1e13      	subs	r3, r2, #0
 80097e2:	6822      	ldr	r2, [r4, #0]
 80097e4:	bf18      	it	ne
 80097e6:	2301      	movne	r3, #1
 80097e8:	0692      	lsls	r2, r2, #26
 80097ea:	d42b      	bmi.n	8009844 <_printf_common+0xb0>
 80097ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097f0:	4649      	mov	r1, r9
 80097f2:	4638      	mov	r0, r7
 80097f4:	47c0      	blx	r8
 80097f6:	3001      	adds	r0, #1
 80097f8:	d01e      	beq.n	8009838 <_printf_common+0xa4>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	6922      	ldr	r2, [r4, #16]
 80097fe:	f003 0306 	and.w	r3, r3, #6
 8009802:	2b04      	cmp	r3, #4
 8009804:	bf02      	ittt	eq
 8009806:	68e5      	ldreq	r5, [r4, #12]
 8009808:	6833      	ldreq	r3, [r6, #0]
 800980a:	1aed      	subeq	r5, r5, r3
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	bf0c      	ite	eq
 8009810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009814:	2500      	movne	r5, #0
 8009816:	4293      	cmp	r3, r2
 8009818:	bfc4      	itt	gt
 800981a:	1a9b      	subgt	r3, r3, r2
 800981c:	18ed      	addgt	r5, r5, r3
 800981e:	2600      	movs	r6, #0
 8009820:	341a      	adds	r4, #26
 8009822:	42b5      	cmp	r5, r6
 8009824:	d11a      	bne.n	800985c <_printf_common+0xc8>
 8009826:	2000      	movs	r0, #0
 8009828:	e008      	b.n	800983c <_printf_common+0xa8>
 800982a:	2301      	movs	r3, #1
 800982c:	4652      	mov	r2, sl
 800982e:	4649      	mov	r1, r9
 8009830:	4638      	mov	r0, r7
 8009832:	47c0      	blx	r8
 8009834:	3001      	adds	r0, #1
 8009836:	d103      	bne.n	8009840 <_printf_common+0xac>
 8009838:	f04f 30ff 	mov.w	r0, #4294967295
 800983c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009840:	3501      	adds	r5, #1
 8009842:	e7c6      	b.n	80097d2 <_printf_common+0x3e>
 8009844:	18e1      	adds	r1, r4, r3
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	2030      	movs	r0, #48	; 0x30
 800984a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800984e:	4422      	add	r2, r4
 8009850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009858:	3302      	adds	r3, #2
 800985a:	e7c7      	b.n	80097ec <_printf_common+0x58>
 800985c:	2301      	movs	r3, #1
 800985e:	4622      	mov	r2, r4
 8009860:	4649      	mov	r1, r9
 8009862:	4638      	mov	r0, r7
 8009864:	47c0      	blx	r8
 8009866:	3001      	adds	r0, #1
 8009868:	d0e6      	beq.n	8009838 <_printf_common+0xa4>
 800986a:	3601      	adds	r6, #1
 800986c:	e7d9      	b.n	8009822 <_printf_common+0x8e>
	...

08009870 <_printf_i>:
 8009870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009874:	7e0f      	ldrb	r7, [r1, #24]
 8009876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009878:	2f78      	cmp	r7, #120	; 0x78
 800987a:	4691      	mov	r9, r2
 800987c:	4680      	mov	r8, r0
 800987e:	460c      	mov	r4, r1
 8009880:	469a      	mov	sl, r3
 8009882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009886:	d807      	bhi.n	8009898 <_printf_i+0x28>
 8009888:	2f62      	cmp	r7, #98	; 0x62
 800988a:	d80a      	bhi.n	80098a2 <_printf_i+0x32>
 800988c:	2f00      	cmp	r7, #0
 800988e:	f000 80d4 	beq.w	8009a3a <_printf_i+0x1ca>
 8009892:	2f58      	cmp	r7, #88	; 0x58
 8009894:	f000 80c0 	beq.w	8009a18 <_printf_i+0x1a8>
 8009898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800989c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098a0:	e03a      	b.n	8009918 <_printf_i+0xa8>
 80098a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098a6:	2b15      	cmp	r3, #21
 80098a8:	d8f6      	bhi.n	8009898 <_printf_i+0x28>
 80098aa:	a101      	add	r1, pc, #4	; (adr r1, 80098b0 <_printf_i+0x40>)
 80098ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098b0:	08009909 	.word	0x08009909
 80098b4:	0800991d 	.word	0x0800991d
 80098b8:	08009899 	.word	0x08009899
 80098bc:	08009899 	.word	0x08009899
 80098c0:	08009899 	.word	0x08009899
 80098c4:	08009899 	.word	0x08009899
 80098c8:	0800991d 	.word	0x0800991d
 80098cc:	08009899 	.word	0x08009899
 80098d0:	08009899 	.word	0x08009899
 80098d4:	08009899 	.word	0x08009899
 80098d8:	08009899 	.word	0x08009899
 80098dc:	08009a21 	.word	0x08009a21
 80098e0:	08009949 	.word	0x08009949
 80098e4:	080099db 	.word	0x080099db
 80098e8:	08009899 	.word	0x08009899
 80098ec:	08009899 	.word	0x08009899
 80098f0:	08009a43 	.word	0x08009a43
 80098f4:	08009899 	.word	0x08009899
 80098f8:	08009949 	.word	0x08009949
 80098fc:	08009899 	.word	0x08009899
 8009900:	08009899 	.word	0x08009899
 8009904:	080099e3 	.word	0x080099e3
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	1d1a      	adds	r2, r3, #4
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	602a      	str	r2, [r5, #0]
 8009910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009918:	2301      	movs	r3, #1
 800991a:	e09f      	b.n	8009a5c <_printf_i+0x1ec>
 800991c:	6820      	ldr	r0, [r4, #0]
 800991e:	682b      	ldr	r3, [r5, #0]
 8009920:	0607      	lsls	r7, r0, #24
 8009922:	f103 0104 	add.w	r1, r3, #4
 8009926:	6029      	str	r1, [r5, #0]
 8009928:	d501      	bpl.n	800992e <_printf_i+0xbe>
 800992a:	681e      	ldr	r6, [r3, #0]
 800992c:	e003      	b.n	8009936 <_printf_i+0xc6>
 800992e:	0646      	lsls	r6, r0, #25
 8009930:	d5fb      	bpl.n	800992a <_printf_i+0xba>
 8009932:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009936:	2e00      	cmp	r6, #0
 8009938:	da03      	bge.n	8009942 <_printf_i+0xd2>
 800993a:	232d      	movs	r3, #45	; 0x2d
 800993c:	4276      	negs	r6, r6
 800993e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009942:	485a      	ldr	r0, [pc, #360]	; (8009aac <_printf_i+0x23c>)
 8009944:	230a      	movs	r3, #10
 8009946:	e012      	b.n	800996e <_printf_i+0xfe>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	6820      	ldr	r0, [r4, #0]
 800994c:	1d19      	adds	r1, r3, #4
 800994e:	6029      	str	r1, [r5, #0]
 8009950:	0605      	lsls	r5, r0, #24
 8009952:	d501      	bpl.n	8009958 <_printf_i+0xe8>
 8009954:	681e      	ldr	r6, [r3, #0]
 8009956:	e002      	b.n	800995e <_printf_i+0xee>
 8009958:	0641      	lsls	r1, r0, #25
 800995a:	d5fb      	bpl.n	8009954 <_printf_i+0xe4>
 800995c:	881e      	ldrh	r6, [r3, #0]
 800995e:	4853      	ldr	r0, [pc, #332]	; (8009aac <_printf_i+0x23c>)
 8009960:	2f6f      	cmp	r7, #111	; 0x6f
 8009962:	bf0c      	ite	eq
 8009964:	2308      	moveq	r3, #8
 8009966:	230a      	movne	r3, #10
 8009968:	2100      	movs	r1, #0
 800996a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800996e:	6865      	ldr	r5, [r4, #4]
 8009970:	60a5      	str	r5, [r4, #8]
 8009972:	2d00      	cmp	r5, #0
 8009974:	bfa2      	ittt	ge
 8009976:	6821      	ldrge	r1, [r4, #0]
 8009978:	f021 0104 	bicge.w	r1, r1, #4
 800997c:	6021      	strge	r1, [r4, #0]
 800997e:	b90e      	cbnz	r6, 8009984 <_printf_i+0x114>
 8009980:	2d00      	cmp	r5, #0
 8009982:	d04b      	beq.n	8009a1c <_printf_i+0x1ac>
 8009984:	4615      	mov	r5, r2
 8009986:	fbb6 f1f3 	udiv	r1, r6, r3
 800998a:	fb03 6711 	mls	r7, r3, r1, r6
 800998e:	5dc7      	ldrb	r7, [r0, r7]
 8009990:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009994:	4637      	mov	r7, r6
 8009996:	42bb      	cmp	r3, r7
 8009998:	460e      	mov	r6, r1
 800999a:	d9f4      	bls.n	8009986 <_printf_i+0x116>
 800999c:	2b08      	cmp	r3, #8
 800999e:	d10b      	bne.n	80099b8 <_printf_i+0x148>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	07de      	lsls	r6, r3, #31
 80099a4:	d508      	bpl.n	80099b8 <_printf_i+0x148>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	6861      	ldr	r1, [r4, #4]
 80099aa:	4299      	cmp	r1, r3
 80099ac:	bfde      	ittt	le
 80099ae:	2330      	movle	r3, #48	; 0x30
 80099b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099b8:	1b52      	subs	r2, r2, r5
 80099ba:	6122      	str	r2, [r4, #16]
 80099bc:	f8cd a000 	str.w	sl, [sp]
 80099c0:	464b      	mov	r3, r9
 80099c2:	aa03      	add	r2, sp, #12
 80099c4:	4621      	mov	r1, r4
 80099c6:	4640      	mov	r0, r8
 80099c8:	f7ff fee4 	bl	8009794 <_printf_common>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d14a      	bne.n	8009a66 <_printf_i+0x1f6>
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	b004      	add	sp, #16
 80099d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	f043 0320 	orr.w	r3, r3, #32
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	4833      	ldr	r0, [pc, #204]	; (8009ab0 <_printf_i+0x240>)
 80099e4:	2778      	movs	r7, #120	; 0x78
 80099e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	6829      	ldr	r1, [r5, #0]
 80099ee:	061f      	lsls	r7, r3, #24
 80099f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80099f4:	d402      	bmi.n	80099fc <_printf_i+0x18c>
 80099f6:	065f      	lsls	r7, r3, #25
 80099f8:	bf48      	it	mi
 80099fa:	b2b6      	uxthmi	r6, r6
 80099fc:	07df      	lsls	r7, r3, #31
 80099fe:	bf48      	it	mi
 8009a00:	f043 0320 	orrmi.w	r3, r3, #32
 8009a04:	6029      	str	r1, [r5, #0]
 8009a06:	bf48      	it	mi
 8009a08:	6023      	strmi	r3, [r4, #0]
 8009a0a:	b91e      	cbnz	r6, 8009a14 <_printf_i+0x1a4>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	f023 0320 	bic.w	r3, r3, #32
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	2310      	movs	r3, #16
 8009a16:	e7a7      	b.n	8009968 <_printf_i+0xf8>
 8009a18:	4824      	ldr	r0, [pc, #144]	; (8009aac <_printf_i+0x23c>)
 8009a1a:	e7e4      	b.n	80099e6 <_printf_i+0x176>
 8009a1c:	4615      	mov	r5, r2
 8009a1e:	e7bd      	b.n	800999c <_printf_i+0x12c>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	6826      	ldr	r6, [r4, #0]
 8009a24:	6961      	ldr	r1, [r4, #20]
 8009a26:	1d18      	adds	r0, r3, #4
 8009a28:	6028      	str	r0, [r5, #0]
 8009a2a:	0635      	lsls	r5, r6, #24
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	d501      	bpl.n	8009a34 <_printf_i+0x1c4>
 8009a30:	6019      	str	r1, [r3, #0]
 8009a32:	e002      	b.n	8009a3a <_printf_i+0x1ca>
 8009a34:	0670      	lsls	r0, r6, #25
 8009a36:	d5fb      	bpl.n	8009a30 <_printf_i+0x1c0>
 8009a38:	8019      	strh	r1, [r3, #0]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	6123      	str	r3, [r4, #16]
 8009a3e:	4615      	mov	r5, r2
 8009a40:	e7bc      	b.n	80099bc <_printf_i+0x14c>
 8009a42:	682b      	ldr	r3, [r5, #0]
 8009a44:	1d1a      	adds	r2, r3, #4
 8009a46:	602a      	str	r2, [r5, #0]
 8009a48:	681d      	ldr	r5, [r3, #0]
 8009a4a:	6862      	ldr	r2, [r4, #4]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f7f6 fbbe 	bl	80001d0 <memchr>
 8009a54:	b108      	cbz	r0, 8009a5a <_printf_i+0x1ea>
 8009a56:	1b40      	subs	r0, r0, r5
 8009a58:	6060      	str	r0, [r4, #4]
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	6123      	str	r3, [r4, #16]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a64:	e7aa      	b.n	80099bc <_printf_i+0x14c>
 8009a66:	6923      	ldr	r3, [r4, #16]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	47d0      	blx	sl
 8009a70:	3001      	adds	r0, #1
 8009a72:	d0ad      	beq.n	80099d0 <_printf_i+0x160>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	079b      	lsls	r3, r3, #30
 8009a78:	d413      	bmi.n	8009aa2 <_printf_i+0x232>
 8009a7a:	68e0      	ldr	r0, [r4, #12]
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	4298      	cmp	r0, r3
 8009a80:	bfb8      	it	lt
 8009a82:	4618      	movlt	r0, r3
 8009a84:	e7a6      	b.n	80099d4 <_printf_i+0x164>
 8009a86:	2301      	movs	r3, #1
 8009a88:	4632      	mov	r2, r6
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	47d0      	blx	sl
 8009a90:	3001      	adds	r0, #1
 8009a92:	d09d      	beq.n	80099d0 <_printf_i+0x160>
 8009a94:	3501      	adds	r5, #1
 8009a96:	68e3      	ldr	r3, [r4, #12]
 8009a98:	9903      	ldr	r1, [sp, #12]
 8009a9a:	1a5b      	subs	r3, r3, r1
 8009a9c:	42ab      	cmp	r3, r5
 8009a9e:	dcf2      	bgt.n	8009a86 <_printf_i+0x216>
 8009aa0:	e7eb      	b.n	8009a7a <_printf_i+0x20a>
 8009aa2:	2500      	movs	r5, #0
 8009aa4:	f104 0619 	add.w	r6, r4, #25
 8009aa8:	e7f5      	b.n	8009a96 <_printf_i+0x226>
 8009aaa:	bf00      	nop
 8009aac:	08009ea5 	.word	0x08009ea5
 8009ab0:	08009eb6 	.word	0x08009eb6

08009ab4 <__sflush_r>:
 8009ab4:	898a      	ldrh	r2, [r1, #12]
 8009ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aba:	4605      	mov	r5, r0
 8009abc:	0710      	lsls	r0, r2, #28
 8009abe:	460c      	mov	r4, r1
 8009ac0:	d458      	bmi.n	8009b74 <__sflush_r+0xc0>
 8009ac2:	684b      	ldr	r3, [r1, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dc05      	bgt.n	8009ad4 <__sflush_r+0x20>
 8009ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	dc02      	bgt.n	8009ad4 <__sflush_r+0x20>
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ad6:	2e00      	cmp	r6, #0
 8009ad8:	d0f9      	beq.n	8009ace <__sflush_r+0x1a>
 8009ada:	2300      	movs	r3, #0
 8009adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ae0:	682f      	ldr	r7, [r5, #0]
 8009ae2:	6a21      	ldr	r1, [r4, #32]
 8009ae4:	602b      	str	r3, [r5, #0]
 8009ae6:	d032      	beq.n	8009b4e <__sflush_r+0x9a>
 8009ae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	075a      	lsls	r2, r3, #29
 8009aee:	d505      	bpl.n	8009afc <__sflush_r+0x48>
 8009af0:	6863      	ldr	r3, [r4, #4]
 8009af2:	1ac0      	subs	r0, r0, r3
 8009af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009af6:	b10b      	cbz	r3, 8009afc <__sflush_r+0x48>
 8009af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009afa:	1ac0      	subs	r0, r0, r3
 8009afc:	2300      	movs	r3, #0
 8009afe:	4602      	mov	r2, r0
 8009b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b02:	6a21      	ldr	r1, [r4, #32]
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b0      	blx	r6
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	d106      	bne.n	8009b1c <__sflush_r+0x68>
 8009b0e:	6829      	ldr	r1, [r5, #0]
 8009b10:	291d      	cmp	r1, #29
 8009b12:	d82b      	bhi.n	8009b6c <__sflush_r+0xb8>
 8009b14:	4a29      	ldr	r2, [pc, #164]	; (8009bbc <__sflush_r+0x108>)
 8009b16:	410a      	asrs	r2, r1
 8009b18:	07d6      	lsls	r6, r2, #31
 8009b1a:	d427      	bmi.n	8009b6c <__sflush_r+0xb8>
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	6062      	str	r2, [r4, #4]
 8009b20:	04d9      	lsls	r1, r3, #19
 8009b22:	6922      	ldr	r2, [r4, #16]
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	d504      	bpl.n	8009b32 <__sflush_r+0x7e>
 8009b28:	1c42      	adds	r2, r0, #1
 8009b2a:	d101      	bne.n	8009b30 <__sflush_r+0x7c>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b903      	cbnz	r3, 8009b32 <__sflush_r+0x7e>
 8009b30:	6560      	str	r0, [r4, #84]	; 0x54
 8009b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b34:	602f      	str	r7, [r5, #0]
 8009b36:	2900      	cmp	r1, #0
 8009b38:	d0c9      	beq.n	8009ace <__sflush_r+0x1a>
 8009b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b3e:	4299      	cmp	r1, r3
 8009b40:	d002      	beq.n	8009b48 <__sflush_r+0x94>
 8009b42:	4628      	mov	r0, r5
 8009b44:	f7ff fc96 	bl	8009474 <_free_r>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	6360      	str	r0, [r4, #52]	; 0x34
 8009b4c:	e7c0      	b.n	8009ad0 <__sflush_r+0x1c>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b0      	blx	r6
 8009b54:	1c41      	adds	r1, r0, #1
 8009b56:	d1c8      	bne.n	8009aea <__sflush_r+0x36>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0c5      	beq.n	8009aea <__sflush_r+0x36>
 8009b5e:	2b1d      	cmp	r3, #29
 8009b60:	d001      	beq.n	8009b66 <__sflush_r+0xb2>
 8009b62:	2b16      	cmp	r3, #22
 8009b64:	d101      	bne.n	8009b6a <__sflush_r+0xb6>
 8009b66:	602f      	str	r7, [r5, #0]
 8009b68:	e7b1      	b.n	8009ace <__sflush_r+0x1a>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	e7ad      	b.n	8009ad0 <__sflush_r+0x1c>
 8009b74:	690f      	ldr	r7, [r1, #16]
 8009b76:	2f00      	cmp	r7, #0
 8009b78:	d0a9      	beq.n	8009ace <__sflush_r+0x1a>
 8009b7a:	0793      	lsls	r3, r2, #30
 8009b7c:	680e      	ldr	r6, [r1, #0]
 8009b7e:	bf08      	it	eq
 8009b80:	694b      	ldreq	r3, [r1, #20]
 8009b82:	600f      	str	r7, [r1, #0]
 8009b84:	bf18      	it	ne
 8009b86:	2300      	movne	r3, #0
 8009b88:	eba6 0807 	sub.w	r8, r6, r7
 8009b8c:	608b      	str	r3, [r1, #8]
 8009b8e:	f1b8 0f00 	cmp.w	r8, #0
 8009b92:	dd9c      	ble.n	8009ace <__sflush_r+0x1a>
 8009b94:	6a21      	ldr	r1, [r4, #32]
 8009b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b98:	4643      	mov	r3, r8
 8009b9a:	463a      	mov	r2, r7
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b0      	blx	r6
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	dc06      	bgt.n	8009bb2 <__sflush_r+0xfe>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	e78e      	b.n	8009ad0 <__sflush_r+0x1c>
 8009bb2:	4407      	add	r7, r0
 8009bb4:	eba8 0800 	sub.w	r8, r8, r0
 8009bb8:	e7e9      	b.n	8009b8e <__sflush_r+0xda>
 8009bba:	bf00      	nop
 8009bbc:	dfbffffe 	.word	0xdfbffffe

08009bc0 <_fflush_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	690b      	ldr	r3, [r1, #16]
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	b913      	cbnz	r3, 8009bd0 <_fflush_r+0x10>
 8009bca:	2500      	movs	r5, #0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	b118      	cbz	r0, 8009bda <_fflush_r+0x1a>
 8009bd2:	6a03      	ldr	r3, [r0, #32]
 8009bd4:	b90b      	cbnz	r3, 8009bda <_fflush_r+0x1a>
 8009bd6:	f7ff fb35 	bl	8009244 <__sinit>
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f3      	beq.n	8009bca <_fflush_r+0xa>
 8009be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009be4:	07d0      	lsls	r0, r2, #31
 8009be6:	d404      	bmi.n	8009bf2 <_fflush_r+0x32>
 8009be8:	0599      	lsls	r1, r3, #22
 8009bea:	d402      	bmi.n	8009bf2 <_fflush_r+0x32>
 8009bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bee:	f7ff fc3e 	bl	800946e <__retarget_lock_acquire_recursive>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f7ff ff5d 	bl	8009ab4 <__sflush_r>
 8009bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfc:	07da      	lsls	r2, r3, #31
 8009bfe:	4605      	mov	r5, r0
 8009c00:	d4e4      	bmi.n	8009bcc <_fflush_r+0xc>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	059b      	lsls	r3, r3, #22
 8009c06:	d4e1      	bmi.n	8009bcc <_fflush_r+0xc>
 8009c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0a:	f7ff fc31 	bl	8009470 <__retarget_lock_release_recursive>
 8009c0e:	e7dd      	b.n	8009bcc <_fflush_r+0xc>

08009c10 <__swbuf_r>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	460e      	mov	r6, r1
 8009c14:	4614      	mov	r4, r2
 8009c16:	4605      	mov	r5, r0
 8009c18:	b118      	cbz	r0, 8009c22 <__swbuf_r+0x12>
 8009c1a:	6a03      	ldr	r3, [r0, #32]
 8009c1c:	b90b      	cbnz	r3, 8009c22 <__swbuf_r+0x12>
 8009c1e:	f7ff fb11 	bl	8009244 <__sinit>
 8009c22:	69a3      	ldr	r3, [r4, #24]
 8009c24:	60a3      	str	r3, [r4, #8]
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	071a      	lsls	r2, r3, #28
 8009c2a:	d525      	bpl.n	8009c78 <__swbuf_r+0x68>
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	b31b      	cbz	r3, 8009c78 <__swbuf_r+0x68>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	1a98      	subs	r0, r3, r2
 8009c36:	6963      	ldr	r3, [r4, #20]
 8009c38:	b2f6      	uxtb	r6, r6
 8009c3a:	4283      	cmp	r3, r0
 8009c3c:	4637      	mov	r7, r6
 8009c3e:	dc04      	bgt.n	8009c4a <__swbuf_r+0x3a>
 8009c40:	4621      	mov	r1, r4
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7ff ffbc 	bl	8009bc0 <_fflush_r>
 8009c48:	b9e0      	cbnz	r0, 8009c84 <__swbuf_r+0x74>
 8009c4a:	68a3      	ldr	r3, [r4, #8]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	60a3      	str	r3, [r4, #8]
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	6022      	str	r2, [r4, #0]
 8009c56:	701e      	strb	r6, [r3, #0]
 8009c58:	6962      	ldr	r2, [r4, #20]
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d004      	beq.n	8009c6a <__swbuf_r+0x5a>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	07db      	lsls	r3, r3, #31
 8009c64:	d506      	bpl.n	8009c74 <__swbuf_r+0x64>
 8009c66:	2e0a      	cmp	r6, #10
 8009c68:	d104      	bne.n	8009c74 <__swbuf_r+0x64>
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f7ff ffa7 	bl	8009bc0 <_fflush_r>
 8009c72:	b938      	cbnz	r0, 8009c84 <__swbuf_r+0x74>
 8009c74:	4638      	mov	r0, r7
 8009c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f000 f806 	bl	8009c8c <__swsetup_r>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d0d5      	beq.n	8009c30 <__swbuf_r+0x20>
 8009c84:	f04f 37ff 	mov.w	r7, #4294967295
 8009c88:	e7f4      	b.n	8009c74 <__swbuf_r+0x64>
	...

08009c8c <__swsetup_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4b2a      	ldr	r3, [pc, #168]	; (8009d38 <__swsetup_r+0xac>)
 8009c90:	4605      	mov	r5, r0
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	460c      	mov	r4, r1
 8009c96:	b118      	cbz	r0, 8009ca0 <__swsetup_r+0x14>
 8009c98:	6a03      	ldr	r3, [r0, #32]
 8009c9a:	b90b      	cbnz	r3, 8009ca0 <__swsetup_r+0x14>
 8009c9c:	f7ff fad2 	bl	8009244 <__sinit>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca6:	0718      	lsls	r0, r3, #28
 8009ca8:	d422      	bmi.n	8009cf0 <__swsetup_r+0x64>
 8009caa:	06d9      	lsls	r1, r3, #27
 8009cac:	d407      	bmi.n	8009cbe <__swsetup_r+0x32>
 8009cae:	2309      	movs	r3, #9
 8009cb0:	602b      	str	r3, [r5, #0]
 8009cb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	e034      	b.n	8009d28 <__swsetup_r+0x9c>
 8009cbe:	0758      	lsls	r0, r3, #29
 8009cc0:	d512      	bpl.n	8009ce8 <__swsetup_r+0x5c>
 8009cc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc4:	b141      	cbz	r1, 8009cd8 <__swsetup_r+0x4c>
 8009cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	d002      	beq.n	8009cd4 <__swsetup_r+0x48>
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f7ff fbd0 	bl	8009474 <_free_r>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6363      	str	r3, [r4, #52]	; 0x34
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	6063      	str	r3, [r4, #4]
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f043 0308 	orr.w	r3, r3, #8
 8009cee:	81a3      	strh	r3, [r4, #12]
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	b94b      	cbnz	r3, 8009d08 <__swsetup_r+0x7c>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cfe:	d003      	beq.n	8009d08 <__swsetup_r+0x7c>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4628      	mov	r0, r5
 8009d04:	f000 f840 	bl	8009d88 <__smakebuf_r>
 8009d08:	89a0      	ldrh	r0, [r4, #12]
 8009d0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d0e:	f010 0301 	ands.w	r3, r0, #1
 8009d12:	d00a      	beq.n	8009d2a <__swsetup_r+0x9e>
 8009d14:	2300      	movs	r3, #0
 8009d16:	60a3      	str	r3, [r4, #8]
 8009d18:	6963      	ldr	r3, [r4, #20]
 8009d1a:	425b      	negs	r3, r3
 8009d1c:	61a3      	str	r3, [r4, #24]
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	b943      	cbnz	r3, 8009d34 <__swsetup_r+0xa8>
 8009d22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d26:	d1c4      	bne.n	8009cb2 <__swsetup_r+0x26>
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
 8009d2a:	0781      	lsls	r1, r0, #30
 8009d2c:	bf58      	it	pl
 8009d2e:	6963      	ldrpl	r3, [r4, #20]
 8009d30:	60a3      	str	r3, [r4, #8]
 8009d32:	e7f4      	b.n	8009d1e <__swsetup_r+0x92>
 8009d34:	2000      	movs	r0, #0
 8009d36:	e7f7      	b.n	8009d28 <__swsetup_r+0x9c>
 8009d38:	20000084 	.word	0x20000084

08009d3c <__swhatbuf_r>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	460c      	mov	r4, r1
 8009d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d44:	2900      	cmp	r1, #0
 8009d46:	b096      	sub	sp, #88	; 0x58
 8009d48:	4615      	mov	r5, r2
 8009d4a:	461e      	mov	r6, r3
 8009d4c:	da0d      	bge.n	8009d6a <__swhatbuf_r+0x2e>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d54:	f04f 0100 	mov.w	r1, #0
 8009d58:	bf0c      	ite	eq
 8009d5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009d5e:	2340      	movne	r3, #64	; 0x40
 8009d60:	2000      	movs	r0, #0
 8009d62:	6031      	str	r1, [r6, #0]
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	b016      	add	sp, #88	; 0x58
 8009d68:	bd70      	pop	{r4, r5, r6, pc}
 8009d6a:	466a      	mov	r2, sp
 8009d6c:	f000 f848 	bl	8009e00 <_fstat_r>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	dbec      	blt.n	8009d4e <__swhatbuf_r+0x12>
 8009d74:	9901      	ldr	r1, [sp, #4]
 8009d76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009d7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009d7e:	4259      	negs	r1, r3
 8009d80:	4159      	adcs	r1, r3
 8009d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d86:	e7eb      	b.n	8009d60 <__swhatbuf_r+0x24>

08009d88 <__smakebuf_r>:
 8009d88:	898b      	ldrh	r3, [r1, #12]
 8009d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d8c:	079d      	lsls	r5, r3, #30
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	d507      	bpl.n	8009da4 <__smakebuf_r+0x1c>
 8009d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	6163      	str	r3, [r4, #20]
 8009da0:	b002      	add	sp, #8
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	ab01      	add	r3, sp, #4
 8009da6:	466a      	mov	r2, sp
 8009da8:	f7ff ffc8 	bl	8009d3c <__swhatbuf_r>
 8009dac:	9900      	ldr	r1, [sp, #0]
 8009dae:	4605      	mov	r5, r0
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff f92f 	bl	8009014 <_malloc_r>
 8009db6:	b948      	cbnz	r0, 8009dcc <__smakebuf_r+0x44>
 8009db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbc:	059a      	lsls	r2, r3, #22
 8009dbe:	d4ef      	bmi.n	8009da0 <__smakebuf_r+0x18>
 8009dc0:	f023 0303 	bic.w	r3, r3, #3
 8009dc4:	f043 0302 	orr.w	r3, r3, #2
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	e7e3      	b.n	8009d94 <__smakebuf_r+0xc>
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	6020      	str	r0, [r4, #0]
 8009dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	6163      	str	r3, [r4, #20]
 8009dda:	9b01      	ldr	r3, [sp, #4]
 8009ddc:	6120      	str	r0, [r4, #16]
 8009dde:	b15b      	cbz	r3, 8009df8 <__smakebuf_r+0x70>
 8009de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de4:	4630      	mov	r0, r6
 8009de6:	f000 f81d 	bl	8009e24 <_isatty_r>
 8009dea:	b128      	cbz	r0, 8009df8 <__smakebuf_r+0x70>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	f043 0301 	orr.w	r3, r3, #1
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	431d      	orrs	r5, r3
 8009dfc:	81a5      	strh	r5, [r4, #12]
 8009dfe:	e7cf      	b.n	8009da0 <__smakebuf_r+0x18>

08009e00 <_fstat_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d07      	ldr	r5, [pc, #28]	; (8009e20 <_fstat_r+0x20>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	f7f7 f8ee 	bl	8000fee <_fstat>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	d102      	bne.n	8009e1c <_fstat_r+0x1c>
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	b103      	cbz	r3, 8009e1c <_fstat_r+0x1c>
 8009e1a:	6023      	str	r3, [r4, #0]
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000bc0 	.word	0x20000bc0

08009e24 <_isatty_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d06      	ldr	r5, [pc, #24]	; (8009e40 <_isatty_r+0x1c>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	602b      	str	r3, [r5, #0]
 8009e30:	f7f7 f8ed 	bl	800100e <_isatty>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d102      	bne.n	8009e3e <_isatty_r+0x1a>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	b103      	cbz	r3, 8009e3e <_isatty_r+0x1a>
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	20000bc0 	.word	0x20000bc0

08009e44 <_init>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	bf00      	nop
 8009e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	469e      	mov	lr, r3
 8009e4e:	4770      	bx	lr

08009e50 <_fini>:
 8009e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e52:	bf00      	nop
 8009e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e56:	bc08      	pop	{r3}
 8009e58:	469e      	mov	lr, r3
 8009e5a:	4770      	bx	lr
